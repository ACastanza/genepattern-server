#
# Configure job execution
#
# Note: this is a YAML file, indentation is important, TAB characters are not permitted
#
# The GP server uses the snakeyaml parser (http://code.google.com/p/snakeyaml/). 
# For more details about the YAML format, see: http://www.yaml.org/
#

# apply these properties to all jobs
default.properties: 
    executor: RuntimeExec
    java_flags: -Xmx512m

# a list of command executors
# The executor id, 'org.genepattern.server.executor.PipelineExecutor', is reserved for the default executor which runs all GP pipelines.
# Don't use this as an executor id in this file.
# a map of <id>:<obj>, where
#    obj := <classname> | <map>
#    classname := fully qualified classname of a class which implements the org.genepattern.server.executor.CommandExecutor interface
#    map := classname=<classname> [configuration.file: <path_to_config_file> | configuration.properties: <map>] [default.properties: <map>]
executors:
    # default executor for all jobs, it is included in GenePattern
    RuntimeExec: 
        classname: org.genepattern.server.executor.RuntimeCommandExecutor
        configuration.properties:
            # the total number of jobs to run concurrently
            num.threads: 20
            # the total number of jobs to keep on the queue, not yet implemented
            #max.pending.jobs: 20000

    # nested declaration with configuration file, <id>: { classname: <classname>, configuration: <config_file> }
    Test:
        classname: org.genepattern.server.executor.TestCommandExecutor
        configuration.file: test_command_executor.yaml

    # nested declaration with embedded configuration, <id>: { classname: <classname>, configuration: {}} 
    LSF:
        classname: org.genepattern.server.executor.lsf.LsfCommandExecutor
        #BroadCore configuration properties
        configuration.properties:
            hibernate.connection.datasource: java:comp/env/jdbc/gpdb
            hibernate.connection.username: GENEPATTERN_DEV_01
            hibernate.connection.password: ****
            hibernate.default_schema: GENEPATTERN_DEV_01
            hibernate.dialect: org.genepattern.server.database.PlatformOracle9Dialect
            hibernate.current_session_context_class: thread
            hibernate.transaction.factory_class: org.hibernate.transaction.JDBCTransactionFactory
            # number of seconds to check for completed jobs
            lsf.check.frequency: 15
            # number of threads in job submission pool
            lsf.num.job.submission.threads: 3
            # number of threads in job completion pool
            lsf.num.job.completion.threads: 3

            # set the GAP_SERVER_ID column of the JOB_LSF table
            #     <broadcore.env>:<hostname>:<jboss.server.name>
            # where hostname is the result of InetAddress.getLocalHost().getHostName()
            # and jboss.server.name = System.getProperty("jboss.server.name")
            broadcore.env: prod
            # use 'broadcore.server.name' to replace the 'jboss.server.name'
            broadcore.server.name: genepattern

        #job specific default properties applied to all jobs run with this executor
        #note: to override executor specific default properties add entries to module.properties, group.properties, or user.properties
        default.properties:
            lsf.project: genepattern
            lsf.queue: broad
            lsf.max.memory: 2
            lsf.wrapper.script: ""
            lsf.stdout.file: stdout.txt
            lsf.job.report.file: .lsf.out
            lsf.use.pre.exec.command: "false"
            lsf.extra.bsub.args: ""
            # default setting, no need to set
            #lsf.job.completion.listener: org.genepattern.server.executor.lsf.LsfJobCompletionListener
            # special case for scatter gather jobs, not yet implemented
            #lsf.firehose.scatter.gather: [true | false]
            #lsf.firehose.scatter.gather.output.filename: scatter.gather.out

# override default.properties and executor->default.properties based on taskname or lsid
# Note: executor->configuration.properties are intended to be applied at startup and are not overwritten here
module.properties:
    CBS:
        executor: LSF
        lsf.max.memory: 16
        java_flags: -Xmx16g
    CopyNumberDivideByNormals:
        executor: LSF
        lsf.max.memory: 16
    ESPPredictor:
        executor: LSF
        lsf.max.memory: 8
    ExpressionFileCreator: 
        executor: LSF
        lsf.max.memory: 8
    GISTIC: 
        executor: LSF
        lsf.max.memory: 12
    GLAD: 
        executor: LSF
        lsf.max.memory: 8
    HierarchicalClustering: 
        executor: LSF
        lsf.max.memory: 4
    LOHPaired: 
        executor: LSF
        lsf.max.memory: 4
    NMFConsensus: 
        executor: LSF
        lsf.max.memory: 8
    #example usage of anchor '&' and '*' alias to reuse the same set of properties
    SNPFileCreator: &snp_settings
        executor: LSF
        lsf.max.memory: 12
        java_flags: -Xmx12g
    SNPFileSorter: *snp_settings
    SNPMultipleSampleAnalysis: *snp_settings
    XChromosomeCorrect: 
        executor: LSF
        lsf.max.memory: 4

# custom configuration settings
# by group id
group.properties:
    test:
        # override default properties for all users in group 'test'
        executor: Test
        java_flags: -Xmx2g
        # override module.properties for all users in group 'test'
        module.properties:
            ExpressionFileCreator:
                lsf.max.memory: 2
        
# by user id
user.properties:
    admin:
        # override default properties for 'admin' user
        lsf.output.filename: lsf.out
        # override module.properties for 'admin' user
        module.properties:
            ExpressionFileCreator:
                lsf.max.memory: 24
                java_flags: -Xmx24g

{"35":{
    "inputs":[
        {
            "description":"data file - .gct, .res, .odf",
            "choices":[],
            "kinds":["gct", "res", "Dataset"],
            "name":"data.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"reference gene accession from data file to find neighbors for",
            "choices":[],
            "kinds":[],
            "name":"gene.accession",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"number of neighbors to find",
            "choices":[],
            "kinds":[],
            "name":"num.neighbors",
            "promptWhenRun":false,
            "defaultValue":"50",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"output filename for analysis results - .odf file",
            "choices":[],
            "kinds":[],
            "name":"marker.list.file",
            "promptWhenRun":false,
            "defaultValue":"<data.filename_basename>.markerlist",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"output filename raw data for selected markers - .gct file",
            "choices":[],
            "kinds":[],
            "name":"marker.dataset.file",
            "promptWhenRun":false,
            "defaultValue":"<data.filename_basename>.markerdata",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"continuous metric for finding neighbors",
            "choices":["0=Cosine distance", "1=Euclidean distance", "2=Manhattan distance", "3=Pearson distance"],
            "kinds":[],
            "name":"distance.metric",
            "promptWhenRun":false,
            "defaultValue":"3",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"if no, values below will be ignored",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"filter.data",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"minimum threshold for data",
            "choices":[],
            "kinds":[],
            "name":"min.threshold",
            "promptWhenRun":false,
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"maximum threshold for data",
            "choices":[],
            "kinds":[],
            "name":"max.threshold",
            "promptWhenRun":false,
            "defaultValue":"16000",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"minimum fold difference for filtering genes",
            "choices":[],
            "kinds":[],
            "name":"min.fold.diff",
            "promptWhenRun":false,
            "defaultValue":"5",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"minimum absolute difference for filtering genes",
            "choices":[],
            "kinds":[],
            "name":"min.abs.diff",
            "promptWhenRun":false,
            "defaultValue":"50",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"GeneNeighbors",
    "outputs":["Gene List", "gct"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00007:3"
}, "36":{
    "inputs":[
        {
            "description":"The file you want to extract the data from. Note that this must be a Word 2007 (.docx) file -- Files saved as Word 2003 or earlier (2003) may be compatible with the Add-In, but will not work with the extractor.",
            "choices":[],
            "kinds":[],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        }
    ],
    "name":"GenePatternDocumentExtractor",
    "outputs":[],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00168:1"
}, "159":{
    "inputs":[
        {
            "description":"",
            "choices":[],
            "kinds":[],
            "name":"hello",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"DIRECTORY"
        }
    ],
    "name":"DirectoryTest",
    "outputs":[],
    "type":"module",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:38:1"
}, "33":{
    "inputs":[
        {
            "description":"Input file to be annotated (res, gct, or odf format, or text file containing one probe per line). Annotations will be retrieved based on affymetrix probe ids.",
            "choices":[],
            "kinds":["res", "gct", "Dataset", "txt"],
            "name":"Input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Name of the output file containing the annotations (same format as input) that will be created.",
            "choices":[],
            "kinds":[],
            "name":"Output.file.name",
            "promptWhenRun":false,
            "defaultValue":"<Input.filename_basename>.annot",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Where to write the annotations in the output file",
            "choices":["0=Append to probe id", "1=Append to description", "2=Replace description", "3=Write to annotation file"],
            "kinds":[],
            "name":"Annotation.Column",
            "promptWhenRun":false,
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"",
            "choices":["=", "Affymetrix Description=include"],
            "kinds":[],
            "name":"Affymetrix.Description",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"",
            "choices":["=", "LocusLink Locus ID=include"],
            "kinds":[],
            "name":"LocusLink.ID",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"",
            "choices":["=", "LocusLink Description=include"],
            "kinds":[],
            "name":"LocusLink.Gene.Name",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"",
            "choices":["=", "LocusLink Symbol=include"],
            "kinds":[],
            "name":"LocusLink.Symbol",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"",
            "choices":["=", "LocusLink Location=include"],
            "kinds":[],
            "name":"LocusLink.Location",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"",
            "choices":["=", "Unigene Human Cluster=include"],
            "kinds":[],
            "name":"UniGene.HS.Cluster.ID",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"",
            "choices":["=", "Unigene Human Description=include"],
            "kinds":[],
            "name":"UniGene.HS.Description",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"",
            "choices":["=", "Unigene Mouse Cluster=include"],
            "kinds":[],
            "name":"UniGene.MM.Cluster.ID",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"",
            "choices":["=", "Unigene Mouse Description=include"],
            "kinds":[],
            "name":"UniGene.MM.Description",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        }
    ],
    "name":"GeneCruiser",
    "outputs":["res", "gct", "Dataset"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00037:6"
}, "158":{
    "inputs":[
        {
            "description":"",
            "choices":[],
            "kinds":[],
            "name":"ConvertLineEndings1.input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        }
    ],
    "name":"job192",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:36:1"
}, "34":{
    "inputs":[
        {
            "description":"odf format file from marker analysis (GeneNeighbors or ClassNeighbors)",
            "choices":[],
            "kinds":["Gene List"],
            "name":"inputfilename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        }
    ],
    "name":"GeneListSignificanceViewer",
    "outputs":[],
    "type":"visualizer",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00006:4"
}, "157":{
    "inputs":[
        {
            "description":"",
            "choices":[],
            "kinds":[],
            "name":"ConvertLineEndings1.input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        }
    ],
    "name":"job192",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:35:1"
}, "39":{
    "inputs":[
        {
            "description":"filename of subject FASTA file",
            "choices":[],
            "kinds":[],
            "name":"subject.fasta.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"> 0",
            "choices":[],
            "kinds":[],
            "name":"match",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"< 0",
            "choices":[],
            "kinds":[],
            "name":"mismatch",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"< 0",
            "choices":[],
            "kinds":[],
            "name":"gapopen",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"< 0",
            "choices":[],
            "kinds":[],
            "name":"gapextend",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"FASTA file",
            "choices":[],
            "kinds":[],
            "name":"query.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"filename of output",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"<subject.fasta.filename_basename>",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"GlobalAlignment",
    "outputs":[],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00008:0"
}, "156":{
    "inputs":[],
    "name":"job191",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:34:1"
}, "155":{
    "inputs":[],
    "name":"job191",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:33:1"
}, "37":{
    "inputs":[
        {
            "description":"GEO Series record (GSExxx) or a GEO Dataset (GDSxxx). Either a GEO accession or a GEO SOFT file must be given.",
            "choices":[],
            "kinds":[],
            "name":"GEO.accession",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"A previously downloaded GEO SOFT file or its gzipped representation. Either a GEO SOFT file or a GEO accession must be given.",
            "choices":[],
            "kinds":["soft", "gz"],
            "name":"GEO.SOFT.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"The name of the column that contains the expression values",
            "choices":[],
            "kinds":[],
            "name":"data.column.name",
            "promptWhenRun":false,
            "defaultValue":"VALUE",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"The name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "promptWhenRun":false,
            "defaultValue":"<GEO.accession><GEO.SOFT.file_basename>",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"FTP Proxy server",
            "choices":[],
            "kinds":[],
            "name":"ftp.proxy.server",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"FTP Proxy username",
            "choices":[],
            "kinds":[],
            "name":"ftp.proxy.username",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"FTP Proxy password",
            "choices":[],
            "kinds":[],
            "name":"ftp.proxy.password",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"PASSWORD"
        },
        {
            "description":"HTTP Proxy server",
            "choices":[],
            "kinds":[],
            "name":"http.proxy.server",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"HTTP Proxy username",
            "choices":[],
            "kinds":[],
            "name":"http.proxy.username",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"HTTP Proxy password",
            "choices":[],
            "kinds":[],
            "name":"http.proxy.password",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"PASSWORD"
        }
    ],
    "name":"GEOImporter",
    "outputs":["gct"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00042:5"
}, "154":{
    "inputs":[],
    "name":"job191",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:32:1"
}, "38":{
    "inputs":[
        {
            "description":"cn file that contains sorted SNPs and raw copy number value per probe. (note: data should not be in log2)",
            "choices":[],
            "kinds":["cn"],
            "name":"copy.number.input.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "promptWhenRun":false,
            "defaultValue":"<copy.number.input.file_basename>.glad",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"GLAD",
    "outputs":["glad"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00087:2"
}, "152":{
    "inputs":[],
    "name":"job191",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:30:1"
}, "153":{
    "inputs":[],
    "name":"job191",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:31:1"
}, "150":{
    "inputs":[],
    "name":"job191",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:28:1"
}, "151":{
    "inputs":[],
    "name":"job191",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:29:1"
}, "43":{
    "inputs":[
        {
            "description":"The dataset to display - .gct, .res, odf type=Dataset",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"dataset",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        }
    ],
    "name":"HeatMapViewer",
    "outputs":[],
    "type":"visualizer",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00010:10"
}, "42":{
    "inputs":[
        {
            "description":"zip output file from GSEA - .zip. Either a zip file or the inputs below are required.",
            "choices":[],
            "kinds":["zip"],
            "name":"zip.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"edb output file from GSEA - .edb",
            "choices":[],
            "kinds":["edb"],
            "name":"edb.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"rnk output file from GSEA - .rnk",
            "choices":[],
            "kinds":["rnk"],
            "name":"rnk.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"gene sets database - .gmt, .gmx, .grp",
            "choices":[],
            "kinds":["gmt", "gmx", "grp"],
            "name":"gene.sets.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"cls file - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"phenotype.labels",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        }
    ],
    "name":"GSEALeadingEdgeViewer",
    "outputs":[],
    "type":"visualizer",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00073:1"
}, "41":{
    "inputs":[
        {
            "description":"Dataset file - .res, .gct",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"expression.dataset",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Gene sets database from GSEA website.",
            "choices":["c1.all.v3.0.symbols.gmt=c1.all.v3.0.symbols.gmt [Positional]", "c2.all.v3.0.symbols.gmt=c2.all.v3.0.symbols.gmt [Curated]", "c2.cgp.v3.0.symbols.gmt=c2.cgp.v3.0.symbols.gmt [Curated]", "c2.cp.v3.0.symbols.gmt=c2.cp.v3.0.symbols.gmt [Curated]", "c2.cp.biocarta.v3.0.symbols.gmt=c2.cp.biocarta.v3.0.symbols.gmt [Curated]", "c2.cp.kegg.v3.0.symbols.gmt=c2.cp.kegg.v3.0.symbols.gmt [Curated]", "c2.cp.reactome.v3.0.symbols.gmt=c2.cp.reactome.v3.0.symbols.gmt [Curated]", "c3.all.v3.0.symbols.gmt=c3.all.v3.0.symbols.gmt [Motif]", "c3.mir.v3.0.symbols.gmt=c3.mir.v3.0.symbols.gmt [Motif]", "c3.tft.v3.0.symbols.gmt=c3.tft.v3.0.symbols.gmt [Motif]", "c4.all.v3.0.symbols.gmt=c4.all.v3.0.symbols.gmt [Computational]", "c4.cgn.v3.0.symbols.gmt=c4.cgn.v3.0.symbols.gmt [Computational]", "c4.cm.v3.0.symbols.gmt=c4.cm.v3.0.symbols.gmt [Computational]", "c5.all.v3.0.symbols.gmt=c5.all.v3.0.symbols.gmt [Gene Ontology]", "c5.bp.v3.0.symbols.gmt=c5.bp.v3.0.symbols.gmt [Gene Ontology]", "c5.cc.v3.0.symbols.gmt=c5.cc.v3.0.symbols.gmt [Gene Ontology]", "c5.mf.v3.0.symbols.gmt=c5.mf.v3.0.symbols.gmt [Gene Ontology]"],
            "kinds":[],
            "name":"gene.sets.database",
            "promptWhenRun":false,
            "defaultValue":"c1.all.v3.0.symbols.gmt [Positional]",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Gene sets database - .gmt, .gmx, .grp. Upload a gene set if your gene set is not listed as a choice for the gene sets database parameter.",
            "choices":[],
            "kinds":["gmt", "gmx", "grp"],
            "name":"gene.sets.database.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Number of permutations to perform",
            "choices":[],
            "kinds":[],
            "name":"number.of.permutations",
            "promptWhenRun":false,
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Cls file - .cls, must be binary",
            "choices":[],
            "kinds":["cls"],
            "name":"phenotype.labels",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Select true to have GSEA collapse each probe set in the expression dataset into a single vector for the gene, which gets identified by its gene symbol.",
            "choices":["false", "true"],
            "kinds":[],
            "name":"collapse.dataset",
            "promptWhenRun":false,
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Type of permutations to perform",
            "choices":["phenotype", "gene_set"],
            "kinds":[],
            "name":"permutation.type",
            "promptWhenRun":false,
            "defaultValue":"phenotype",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Chip file from GSEA website.",
            "choices":["ftp.broadinstitute.org://pub/gsea/annotations/GENE_SYMBOL.chip=GENE_SYMBOL.chip", "ftp.broadinstitute.org://pub/gsea/annotations/SEQ_ACCESSION.chip=SEQ_ACCESSION.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubA.chip=Hu35KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubB.chip=Hu35KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubC.chip=Hu35KsubC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubD.chip=Hu35KsubD.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu6800.chip=Hu6800.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_Focus.chip=HG_Focus.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133A.chip=HG_U133A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133AAOFAV2.chip=HG_U133AAOFAV2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133A_2.chip=HG_U133A_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133B.chip=HG_U133B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133_Plus_2.chip=HG_U133_Plus_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95Av2.chip=HG_U95Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95B.chip=HG_U95B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95C.chip=HG_U95C.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95D.chip=HG_U95D.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95E.chip=HG_U95E.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AFFYMETRIX.chip=AFFYMETRIX.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AG.chip=AG.chip", "ftp.broadinstitute.org://pub/gsea/annotations/APPLERA_ABI1700.chip=APPLERA_ABI1700.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ATH1_121501.chip=ATH1_121501.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1A.chip=Agilent_Human1A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1Av2.chip=Agilent_Human1Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1B.chip=Agilent_Human1B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1_cDNA.chip=Agilent_Human1_cDNA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_HumanGenome.chip=Agilent_HumanGenome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseDev.chip=Agilent_MouseDev.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseGenome.chip=Agilent_MouseGenome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseOligo.chip=Agilent_MouseOligo.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Mouse_cDNA.chip=Agilent_Mouse_cDNA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_RatGenome_G4131A.chip=Agilent_RatGenome_G4131A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_RatOligo.chip=Agilent_RatOligo.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AtlasMouse1.2.chip=AtlasMouse1.2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AtlasRat1.2.chip=AtlasRat1.2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/BIAO.chip=BIAO.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Bovine.chip=Bovine.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CNMCMuscleChip.chip=CNMCMuscleChip.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Caltech16KMouse.chip=Caltech16KMouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Caltech16KOligoMouse.chip=Caltech16KOligoMouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Canine_2.chip=Canine_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Clontech_Atlas_13K.chip=Clontech_Atlas_13K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Clontech_BD_Atlas.chip=Clontech_BD_Atlas.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_Human_Whole_Genome.chip=CodeLink_Human_Whole_Genome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_20K_I_Bioarray.chip=CodeLink_UniSet_Human_20K_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_II_Bioarray.chip=CodeLink_UniSet_Human_II_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_I_Bioarray.chip=CodeLink_UniSet_Human_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Rat_I_Bioarray.chip=CodeLink_UniSet_Rat_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/DrosGenome1.chip=DrosGenome1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Drosophila_2.chip=Drosophila_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/G4110A.chip=G4110A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/G4110Av2.chip=G4110Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/GenosysCytokineV2.chip=GenosysCytokineV2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HC_G110.chip=HC_G110.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HPCGGCompugenAnnotations.chip=HPCGGCompugenAnnotations.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HT_HG_U133A.chip=HT_HG_U133A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HT_HG_U133A_EA.chip=HT_HG_U133A_EA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HU6800.chip=HU6800.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illimina_Mus6_v1_1.chip=Illimina_Mus6_v1_1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illimuna_Mus6_v1.chip=Illimuna_Mus6_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Hum6_v1.chip=Illumina_Hum6_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Hum6_v2.chip=Illumina_Hum6_v2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_HumRef8_v1.chip=Illumina_HumRef8_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_HumRef8_v2.chip=Illumina_HumRef8_v2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Human.chip=Illumina_Human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_MusRef8_v1.chip=Illumina_MusRef8_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_MusRef8_v1_1.chip=Illumina_MusRef8_v1_1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_RatRef12_v1.chip=Illumina_RatRef12_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Av2.chip=MG_U74Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Bv2.chip=MG_U74Bv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Cv2.chip=MG_U74Cv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MOE430A.chip=MOE430A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MOE430B.chip=MOE430B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MWG_Human_30K_A.chip=MWG_Human_30K_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MWG_Human_30K_B.chip=MWG_Human_30K_B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mouse430A_2.chip=Mouse430A_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mouse430_2.chip=Mouse430_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu11KsubA.chip=Mu11KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu11KsubB.chip=Mu11KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubA.chip=Mu19KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubB.chip=Mu19KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubC.chip=Mu19KsubC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/NIA15k.chip=NIA15k.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Netherland_cancer_institute_operon_human_35k.chip=Netherland_cancer_institute_operon_human_35k.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Netherland_cancer_institute_operon_mouse_FOOk.chip=Netherland_cancer_institute_operon_mouse_FOOk.chip", "ftp.broadinstitute.org://pub/gsea/annotations/OPERON_HUMANv2.chip=OPERON_HUMANv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/OPERON_HUMANv3.chip=OPERON_HUMANv3.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RAE230A.chip=RAE230A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RAE230B.chip=RAE230B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34A.chip=RG_U34A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34B.chip=RG_U34B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34C.chip=RG_U34C.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RN_U34.chip=RN_U34.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RT_U34.chip=RT_U34.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_Ensembl1.1.chip=RZPD_Human_Ensembl1.1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_ORF_Clones_Gateway.chip=RZPD_Human_ORF_Clones_Gateway.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_Unigene3.1.chip=RZPD_Human_Unigene3.1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rat230_2.chip=Rat230_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Human.chip=RefSeq_NP_Human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Mouse.chip=RefSeq_NP_Mouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Rat.chip=RefSeq_NP_Rat.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_human.chip=RefSeq_human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Research_Genetics.chip=Research_Genetics.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rosetta.chip=Rosetta.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rosetta50K.chip=Rosetta50K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Stanford.chip=Stanford.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Stanford_Source_Accessions.chip=Stanford_Source_Accessions.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TIGR_31K_Human_Set.chip=TIGR_31K_Human_Set.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TIGR_40K_Human_Set.chip=TIGR_40K_Human_Set.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC.chip=TRC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC_DB.chip=TRC_DB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC_DB_v1.chip=TRC_DB_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/U133_X3P.chip=U133_X3P.chip", "ftp.broadinstitute.org://pub/gsea/annotations/UCLA_NIH_33K.chip=UCLA_NIH_33K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Zebrafish.chip=Zebrafish.chip", "ftp.broadinstitute.org://pub/gsea/annotations/labonweb_human.chip=labonweb_human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/lymphochip.chip=lymphochip.chip"],
            "kinds":[],
            "name":"chip.platform",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Chip to use. Upload a chip file if your chip is not listed as a choice for the chip platform parameter.",
            "choices":[],
            "kinds":[],
            "name":"chip.platform.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"The statistic used to score hits (gene set members) and misses (non-members)",
            "choices":["classic", "weighted", "weighted_p2", "weighted_p1.5"],
            "kinds":[],
            "name":"scoring.scheme",
            "promptWhenRun":false,
            "defaultValue":"weighted",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Class separation metric - gene markers are ranked using this metric to produce the gene list",
            "choices":["Cosine", "Euclidean", "Manhattan", "Pearson", "FeatureVariation", "tTest", "Signal2Noise", "None", "RegressionSlope", "Bhattacharyya", "Norm.Pearson", "Diff_of_Means", "Diff_of_Medians", "Ratio_of_Means", "Ratio_of_Medians", "log2_ratio_of_means", "Feature_stddev_by_mean"],
            "kinds":[],
            "name":"metric.for.ranking.genes",
            "promptWhenRun":false,
            "defaultValue":"Signal2Noise",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Direction in which the gene list should be ordered",
            "choices":["ascending", "descending"],
            "kinds":[],
            "name":"gene.list.ordering.mode",
            "promptWhenRun":false,
            "defaultValue":"descending",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Mode in which scores from the gene list should be considered",
            "choices":["real", "abs"],
            "kinds":[],
            "name":"gene.list.sorting.mode",
            "promptWhenRun":false,
            "defaultValue":"real",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Gene sets larger than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"max.gene.set.size",
            "promptWhenRun":false,
            "defaultValue":"500",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Gene sets smaller than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"min.gene.set.size",
            "promptWhenRun":false,
            "defaultValue":"15",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Collapsing mode",
            "choices":["Max_probe", "Median_of_probes"],
            "kinds":[],
            "name":"collapsing.mode.for.probe.sets.with.more.than.one.match",
            "promptWhenRun":false,
            "defaultValue":"Max_probe",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Normalization mode",
            "choices":["meandiv", "None"],
            "kinds":[],
            "name":"normalization.mode",
            "promptWhenRun":false,
            "defaultValue":"meandiv",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Type of phenotype randomization (does not apply to gene set permutations)",
            "choices":["equalize_and_balance", "no_balance"],
            "kinds":[],
            "name":"randomization.mode",
            "promptWhenRun":false,
            "defaultValue":"no_balance",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"If there is no known gene symbol match for a probe set, omit it from the collapsed dataset",
            "choices":["false", "true"],
            "kinds":[],
            "name":"omit.features.with.no.symbol.match",
            "promptWhenRun":false,
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Create detailed gene set report (heat map, mountain plot, etc.) for every enriched gene set",
            "choices":["false", "true"],
            "kinds":[],
            "name":"make.detailed.gene.set.report",
            "promptWhenRun":false,
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Use the median of each class instead of the mean for the class separation metrics",
            "choices":["true", "false"],
            "kinds":[],
            "name":"median.for.class.metrics",
            "promptWhenRun":false,
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Number of markers",
            "choices":[],
            "kinds":[],
            "name":"number.of.markers",
            "promptWhenRun":false,
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Plot GSEA mountain and related plots for the top sets of each phenotype",
            "choices":[],
            "kinds":[],
            "name":"plot.graphs.for.the.top.sets.of.each.phenotype",
            "promptWhenRun":false,
            "defaultValue":"20",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Seed to use for randomization",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "promptWhenRun":false,
            "defaultValue":"timestamp",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Whether to save random ranked lists",
            "choices":["false", "true"],
            "kinds":[],
            "name":"save.random.ranked.lists",
            "promptWhenRun":false,
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.file.name",
            "promptWhenRun":false,
            "defaultValue":"<expression.dataset_basename>.zip",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"GSEA",
    "outputs":[],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00072:11"
}, "40":{
    "inputs":[],
    "name":"Golub.Slonim.1999.Science.all.aml.pipeline",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.pipeline:00001:1"
}, "22":{
    "inputs":[
        {
            "description":"Input file in SAM or BAM format",
            "choices":[],
            "kinds":[],
            "name":"input.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"A label for the transfrags in the output files.",
            "choices":[],
            "kinds":[],
            "name":"output.label",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Reference annotation file",
            "choices":[],
            "kinds":[],
            "name":"GTF",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Maximum intron length",
            "choices":[],
            "kinds":[],
            "name":"max.intron.length",
            "promptWhenRun":false,
            "defaultValue":"300000",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Minimum isoform fraction. Range: [0.0-1.0]",
            "choices":[],
            "kinds":[],
            "name":"min.isoform.fraction",
            "promptWhenRun":false,
            "defaultValue":"0.05",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"Threshold for min depth of intronic coverage divided by the number of spliced reads. Range: [0.0,1.0]",
            "choices":[],
            "kinds":[],
            "name":"pre.mrna.fraction",
            "promptWhenRun":false,
            "defaultValue":"0.05",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"Threshold for SAM mapping quality",
            "choices":[],
            "kinds":[],
            "name":"min.mapping.quality",
            "promptWhenRun":false,
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"A GTF file specifying transcripts to be ignored",
            "choices":[],
            "kinds":[],
            "name":"mask.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"A reference multi-FASTA file for bias detection and correction algorithm",
            "choices":[],
            "kinds":[],
            "name":"reference.seq",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Whether to perform quartile normalization",
            "choices":["no", "yes"],
            "kinds":[],
            "name":"quartile.normalization",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"The alpha value for the binomial test used during false positive alignment filtration",
            "choices":[],
            "kinds":[],
            "name":"junc.alpha",
            "promptWhenRun":false,
            "defaultValue":"0.01",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Parameter for filtering prior to assembly",
            "choices":[],
            "kinds":[],
            "name":"small.anchor.fraction",
            "promptWhenRun":false,
            "defaultValue":"0.12",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Threshold for reporting assembled transcription fragments",
            "choices":[],
            "kinds":[],
            "name":"min.frags.per.transfrag",
            "promptWhenRun":false,
            "defaultValue":"10",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Number of importance samples generated for each locus during abundance estimation",
            "choices":[],
            "kinds":[],
            "name":"num.importance.samples",
            "promptWhenRun":false,
            "defaultValue":"1000",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Number of iterations allowed during maximum likelihood estimation of abundances",
            "choices":[],
            "kinds":[],
            "name":"max.mle.iterations",
            "promptWhenRun":false,
            "defaultValue":"5000",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Specify library type if module does not determine type automatically",
            "choices":["fr-unstranded=fr-unstranded (default)", "fr-firststrand=fr-firststrand", "fr-secondstrand=fr-secondstrand", "ff-unstranded=ff-unstranded", "ff-firststrand=ff-firststrand", "ff-secondstrand=ff-secondstrand"],
            "kinds":[],
            "name":"library.type",
            "promptWhenRun":false,
            "defaultValue":"fr-unstranded",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Number of threads used to align reads",
            "choices":[],
            "kinds":[],
            "name":"num.threads",
            "promptWhenRun":false,
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.Integer"
        }
    ],
    "name":"Cufflinks",
    "outputs":["genes.expr", "transcripts.expr", "gtf"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00231:1"
}, "169":{
    "inputs":[],
    "name":"job440",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:44:1"
}, "23":{
    "inputs":[
        {
            "description":"A GTF file output from Cufflinks, or a TXT containing a list of paths to GTF files.",
            "choices":[],
            "kinds":[],
            "name":"input.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"A prefix for the module output",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "promptWhenRun":false,
            "defaultValue":"<input.file_basename>",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"A reference annotation GTF",
            "choices":[],
            "kinds":[],
            "name":"reference.GTF",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Whether to ignore reference transcripts that are not overlapped by any transcript in the input files.",
            "choices":["no=no", "yes=yes"],
            "kinds":[],
            "name":"exclude.transcripts",
            "promptWhenRun":false,
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Fasta file or zip of fasta files against which your reads were aligned",
            "choices":[],
            "kinds":[],
            "name":"custom.reference.genome.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        }
    ],
    "name":"Cufflinks.cuffcompare",
    "outputs":["gtf", "tmap", "refmap", "loci", "tracking"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00235:1"
}, "24":{
    "inputs":[
        {
            "description":"Input file in SAM or BAM format",
            "choices":[],
            "kinds":[],
            "name":"first.SAM.or.BAM.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Input file in SAM or BAM format",
            "choices":[],
            "kinds":[],
            "name":"second.SAM.or.BAM.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"To specify more than 2 SAM or BAM files, use this parameter to specify a list of input files",
            "choices":[],
            "kinds":[],
            "name":"input.files.list",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"A reference annotation GTF",
            "choices":[],
            "kinds":[],
            "name":"GTF.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"A file containing a label for each sample (one label per line). ",
            "choices":[],
            "kinds":[],
            "name":"output.label",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Launch this many parallel search threads. Increasing this value can help decrease the runtime of this module.",
            "choices":[],
            "kinds":[],
            "name":"num.threads",
            "promptWhenRun":false,
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Threshold for mapping quality",
            "choices":[],
            "kinds":[],
            "name":"min.mapqual",
            "promptWhenRun":false,
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Analyze the provided samples as a time series",
            "choices":["no", "yes"],
            "kinds":[],
            "name":"time.series",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Reference file for bias detection qnd correction algorithm",
            "choices":[],
            "kinds":[],
            "name":"reference.seq",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Whether to perform quartile normalization",
            "choices":["no", "yes"],
            "kinds":[],
            "name":"quartile.normalization",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"The minimum number of alignments in a locus for needed to conduct significance testing on changes in that locus observed between samples.",
            "choices":[],
            "kinds":[],
            "name":"min.alignment.count",
            "promptWhenRun":false,
            "defaultValue":"500",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"The allowed false discovery rate.",
            "choices":[],
            "kinds":[],
            "name":"FDR",
            "promptWhenRun":false,
            "defaultValue":".05",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"Number of importance samples generated for each locus during abundance estimation",
            "choices":[],
            "kinds":[],
            "name":"num.importance.samples",
            "promptWhenRun":false,
            "defaultValue":"1000",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Number of iterations allowed during maximum likelihood estimation of abundances",
            "choices":[],
            "kinds":[],
            "name":"max.mle.iterations",
            "promptWhenRun":false,
            "defaultValue":"5000",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Specify library type if module does not determine type automatically",
            "choices":["=", "fr-unstranded", "fr-firststrand", "fr-secondstrand", "ff-unstranded", "ff-firststrand", "ff-secondstrand"],
            "kinds":[],
            "name":"library.type",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Mask GTF file",
            "choices":[],
            "kinds":[],
            "name":"mask.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        }
    ],
    "name":"Cufflinks.cuffdiff",
    "outputs":["isoforms.fpkm_tracking", "genes.fpkm_tracking", "cds.fpkm_tracking", "tss_groups.fpkm_tracking", "tss_group_exp.diff", "isoform_exp.diff", "gene_exp.diff", "cds_exp.diff", "splicing.diff", "cds.diff", "promoters.diff"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00236:1"
}, "25":{
    "inputs":[
        {
            "description":"Dataset file - .res, .gct",
            "choices":[],
            "kinds":["gct", "res", "Dataset"],
            "name":"dataset.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Adjacency matrix - .adj",
            "choices":[],
            "kinds":["adj"],
            "name":"adjacency.matrix.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        }
    ],
    "name":"CytoscapeViewer",
    "outputs":[],
    "type":"visualizer",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00097:2"
}, "166":{
    "inputs":[],
    "name":"job386",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:41:1"
}, "26":{
    "inputs":[
        {
            "description":"The URL to retrieve the file from",
            "choices":[],
            "kinds":[],
            "name":"URL",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"The name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"DownloadURL",
    "outputs":[],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00034:1"
}, "165":{
    "inputs":[
        {
            "description":"Expression Dataset (GCT)",
            "choices":[],
            "kinds":["gct"],
            "name":"gct.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Class File (CLS)",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        }
    ],
    "name":"ExpressCluster",
    "outputs":[],
    "type":"visualizer",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:40:2"
}, "27":{
    "inputs":[
        {
            "description":"A zip file of CEL files",
            "choices":[],
            "kinds":["zip"],
            "name":"input.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"The method to use",
            "choices":["dChip", "GCRMA", "MAS5", "RMA"],
            "kinds":[],
            "name":"method",
            "promptWhenRun":false,
            "defaultValue":"RMA",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"(GCRMA and RMA only) Whether to normalize data using quantile normalization",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"quantile.normalization",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"(RMA only) Whether to background correct using RMA background correction",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"background.correct",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Whether to compute Present/Absent calls",
            "choices":["yes=yes (create res file)", "no=no (create gct file)"],
            "kinds":[],
            "name":"compute.present.absent.calls",
            "promptWhenRun":false,
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"(MAS5 only) The normalization method to apply after expression values are computed. The column having the median of the means is used as the reference unless the parameter value to scale to is given.",
            "choices":["linear fit", "mean scaling", "median scaling", "none", "quantile normalization"],
            "kinds":[],
            "name":"normalization.method",
            "promptWhenRun":false,
            "defaultValue":"median scaling",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"(median/mean scaling only) The value to scale to.",
            "choices":[],
            "kinds":[],
            "name":"value.to.scale.to",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"A tab-delimited text file containing one scan, sample, and class per line",
            "choices":[],
            "kinds":["txt", "clm"],
            "name":"clm.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Whether to annotate probes with the gene symbol and description",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"annotate.probes",
            "promptWhenRun":false,
            "defaultValue":"yes",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Custom CDF file. Leave blank to use default internally provided CDF file (custom cdf file is not implemented for GCRMA).",
            "choices":[],
            "kinds":["cdf"],
            "name":"cdf.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"The base name of the output file(s)",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"ExpressionFileCreator",
    "outputs":["res", "gct", "cls"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00041:7"
}, "168":{
    "inputs":[],
    "name":"job423",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:43:1"
}, "28":{
    "inputs":[
        {
            "description":"Input filename - .res",
            "choices":[],
            "kinds":["res"],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Name of the output file (a .txt extension will be appended)",
            "choices":[],
            "kinds":[],
            "name":"output",
            "promptWhenRun":false,
            "defaultValue":"<input.filename_basename>",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"ExtractColumnNames",
    "outputs":["txt"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00003:2"
}, "167":{
    "inputs":[],
    "name":"job425",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:42:1"
}, "29":{
    "inputs":[
        {
            "description":"The results from ComparativeMarkerSelection - .odf",
            "choices":[],
            "kinds":["Comparative Marker Selection"],
            "name":"comparative.marker.selection.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"The dataset file used to select markers - .gct, .res, Dataset",
            "choices":[],
            "kinds":["gct", "res", "Dataset"],
            "name":"dataset.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"The field to filter features on",
            "choices":["Bonferroni", "FDR(BH)", "Feature P", "Feature P High", "Feature P Low", "Fold Change", "FWER", "maxT", "Q Value", "Rank", "Score"],
            "kinds":[],
            "name":"field",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Select features with field >= min",
            "choices":[],
            "kinds":[],
            "name":"min",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"Select features with field <= max",
            "choices":[],
            "kinds":[],
            "name":"max",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"Number of neighbors to select by score in each direction",
            "choices":[],
            "kinds":[],
            "name":"number.of.neighbors",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"The base name for the output files",
            "choices":[],
            "kinds":[],
            "name":"base.output.name",
            "promptWhenRun":false,
            "defaultValue":"<comparative.marker.selection.filename_basename>.filt",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"ExtractComparativeMarkerResults",
    "outputs":["gct", "res", "Dataset", "txt"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00046:3"
}, "161":{
    "inputs":[
        {
            "description":"Expression Dataset (GCT)",
            "choices":[],
            "kinds":["gct"],
            "name":"gct.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Class File (CLS)",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        }
    ],
    "name":"ExpressCluster",
    "outputs":[],
    "type":"visualizer",
    "lsid":"urn:lsid:8080.SD148.134.174.140.47:genepatternmodules:6:1"
}, "3":{
    "inputs":[
        {
            "description":"A pre-built bowtie index. Either a prebuilt or a custom Bowtie index must be specified.",
            "choices":["none=", "a_thaliana=A. Thaliana", "b_taurus=B. Taurus", "e_coli=E. Coli", "c_elegans_ws200=C. Elegans, WormBase WS200", "hg19=H. sapiens, UCSC hg19", "hg18=H. sapiens, UCSC hg18", "mm9=M. musculus, UCSC mm9", "mm8=M. musculus, UCSC mm8", "m_musculus_ncbi37=M. musculus, NCBI 37", "s_cerevisiae= S. cerevisiae"],
            "kinds":[],
            "name":"prebuilt.bowtie.index",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"A zip file containing Bowtie index files. Either a prebuilt or a custom Bowtie index must be specified.",
            "choices":[],
            "kinds":["zip"],
            "name":"custom.bowtie.index",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Unpaired read file or first mate for paired reads. This can be a file in FASTA or FASTQ format or a ZIP archive containing FASTA or FASTQ files",
            "choices":[],
            "kinds":["fq", "fastq", "fa", "mfa", "fna", "fasta"],
            "name":"mate.1.or.unpaired.read",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Second mate for paired reads. This can be a file in FASTA or FASTQ format or a ZIP archive containing FASTA or FASTQ",
            "choices":[],
            "kinds":["fq", "fastq", "fa", "mfa", "fna", "fasta"],
            "name":"mate.2",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Whether read characters are interpreted as colors",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"align.in.colorspace",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"A zip file containing quality values for unpaired or first mate of paired CFASTA reads",
            "choices":[],
            "kinds":[],
            "name":"unpaired.or.mate.1.CFASTA.quality.values",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.file"
        },
        {
            "description":"A zip file containing quality values for second mate of paired CFASTA reads",
            "choices":[],
            "kinds":[],
            "name":"mate.2.CFASTA.quality.values",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Scale to use for quality values",
            "choices":["none=", "phred33", "phred64", "solexa"],
            "kinds":[],
            "name":"quality.value.scale",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Only report alignments with at most this many mismatches.",
            "choices":[],
            "kinds":[],
            "name":"max.mismatches",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Only report alignments with at most this many mismatches in the \"seed\". This value may be 0, 1, 2, 3.",
            "choices":[],
            "kinds":[],
            "name":"max.seed.mismatches",
            "promptWhenRun":false,
            "defaultValue":"2",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"The maximum permitted total of quality values at all mismatched read positions in the entire alignment",
            "choices":[],
            "kinds":[],
            "name":"max.total.quality.value",
            "promptWhenRun":false,
            "defaultValue":"70",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"The seed length. Value must be greater than or equal to 5.",
            "choices":[],
            "kinds":[],
            "name":"seed.length",
            "promptWhenRun":false,
            "defaultValue":"28",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Whether to round quality values to the nearest 10",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"round.quality.values",
            "promptWhenRun":false,
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"The minimum insert size for valid paired-end alignments",
            "choices":[],
            "kinds":[],
            "name":"min.insert.size",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"The maximum insert size for valid paired-end alignments",
            "choices":[],
            "kinds":[],
            "name":"max.insert.size",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"The upstream/downstream mate orientations for a valid paired-end alignment against the forward reference strand",
            "choices":["m1r_m2r=mate1 or mate2 reverse-complement", "m1r_m2f=mate1 reverse-complement/ mate2 forward-oriented", "m1_fm2f=mate1 and mate2 forward-oriented"],
            "kinds":[],
            "name":"mate.orientation",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Whether to attempt to align against the forward reference strand",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"align.to.forward.reference",
            "promptWhenRun":false,
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Whether to attempt to align against the reverse-complement reference strand",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"align.to.reverse-complement",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"The random seed",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "promptWhenRun":false,
            "defaultValue":"12345678",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Report up to this valid alignments per read or pair. Specify -1 to report all alignments.",
            "choices":[],
            "kinds":[],
            "name":"report.max.alignments",
            "promptWhenRun":false,
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Suppress all alignments for a particular read or pair if more than this reportable alignments exist for it.",
            "choices":[],
            "kinds":[],
            "name":"suppress.alignments.max",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Whether reported singleton alignments are \"best\" in terms of stratum (i.e. number of mismatches, or mismatches in the seed) and in terms of the quality values at the mismatched position(s)",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"best",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"If many valid alignments exist and are reportable and they fall into more than one alignment \"stratum\", report only those alignments that fall into the best stratum.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"strata",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Launch this many parallel search threads",
            "choices":[],
            "kinds":[],
            "name":"threads",
            "promptWhenRun":false,
            "defaultValue":"8",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"The name of output file",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"bowtie_alignment.sam",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"Bowtie.aligner",
    "outputs":["sam"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00237:1"
}, "162":{
    "inputs":[
        {
            "description":"Expression Dataset (GCT)",
            "choices":[],
            "kinds":["gct"],
            "name":"gct.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Class File (CLS)",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        }
    ],
    "name":"ExpressCluster",
    "outputs":[],
    "type":"visualizer",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:39:1"
}, "2":{
    "inputs":[
        {
            "description":"input file with pre-processed MRM data in csv format",
            "choices":[],
            "kinds":["csv"],
            "name":"data.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"p-value threshold above which transition is quantification-worthy. Must be a value between 0 and 1 inclusive.",
            "choices":[],
            "kinds":[],
            "name":"pvalue.threshold",
            "promptWhenRun":false,
            "defaultValue":"0.00005",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"threshold for coefficient of variation below which transition is quantification-worthy",
            "choices":[],
            "kinds":[],
            "name":"cv.threshold",
            "promptWhenRun":false,
            "defaultValue":"0.2",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"calculate all possible pairs of relative ratios for a transition",
            "choices":["FALSE=no", "TRUE=yes"],
            "kinds":[],
            "name":"all.pairs",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"create files with intermediate results",
            "choices":["FALSE=no", "TRUE=yes"],
            "kinds":[],
            "name":"output.intermediate.results",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"file name prefix used for output file(s)",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "promptWhenRun":false,
            "defaultValue":"<data.file_basename>-results",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"AuDIT",
    "outputs":["csv"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00172:2"
}, "163":{
    "inputs":[
        {
            "description":"Expression Dataset (GCT)",
            "choices":[],
            "kinds":["gct"],
            "name":"gct.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Class File (CLS)",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        }
    ],
    "name":"ExpressCluster",
    "outputs":[],
    "type":"visualizer",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:39:2"
}, "1":{
    "inputs":[
        {
            "description":"spectrum data file - .csv",
            "choices":[],
            "kinds":["csv"],
            "name":"spectrum.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"minimum M/Z to include",
            "choices":[],
            "kinds":[],
            "name":"low.Da",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"maximum M/Z to include",
            "choices":[],
            "kinds":[],
            "name":"high.Da",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"discard spectra with quality < quality threshold",
            "choices":[],
            "kinds":[],
            "name":"quality.threshold",
            "promptWhenRun":false,
            "defaultValue":"0.45",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"window filter size",
            "choices":[],
            "kinds":[],
            "name":"window.filter",
            "promptWhenRun":false,
            "defaultValue":"5",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"factor to multiply standard deviation by",
            "choices":[],
            "kinds":[],
            "name":"factor",
            "promptWhenRun":false,
            "defaultValue":"3",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"averaging function",
            "choices":["median", "mean"],
            "kinds":[],
            "name":"smooth",
            "promptWhenRun":false,
            "defaultValue":"median",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"output file",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"<spectrum.filename_basename>.area.odf",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"AreaChange",
    "outputs":["Spectrum Area Change"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00049:2"
}, "164":{
    "inputs":[
        {
            "description":"Expression Dataset (GCT)",
            "choices":[],
            "kinds":["gct"],
            "name":"gct.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Class File (CLS)",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        }
    ],
    "name":"ExpressCluster",
    "outputs":[],
    "type":"visualizer",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:40:1"
}, "0":{
    "inputs":[
        {
            "description":"Dataset file - .res, .gct",
            "choices":[],
            "kinds":["gct", "res"],
            "name":"dataset.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"The name of a gene whose network interactions you want to reconstruct",
            "choices":[],
            "kinds":[],
            "name":"hub.gene",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"A file containing a list of hub genes with one gene per line - .txt",
            "choices":[],
            "kinds":["txt"],
            "name":"hub.genes.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"A file containing a list of genes with one gene per line that encode transcription factors - .txt",
            "choices":[],
            "kinds":["txt"],
            "name":"transcription.factor.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"The kernel width (or window width) of the Gaussian Kernel Estimator",
            "choices":[],
            "kinds":[],
            "name":"kernel.width",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"Threshold for the mutual information (MI) estimate to be considered statistically significant",
            "choices":[],
            "kinds":[],
            "name":"mi.threshold",
            "promptWhenRun":false,
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"Threshold for the p-value of a MI estimate to be considered statistically significant",
            "choices":[],
            "kinds":[],
            "name":"p.value",
            "promptWhenRun":false,
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"The percentage of MI estimation considered as sampling error",
            "choices":[],
            "kinds":[],
            "name":"dpi.tolerance",
            "promptWhenRun":false,
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"Filter out non-informative genes whose mean expression value is smaller than mean filter",
            "choices":[],
            "kinds":[],
            "name":"mean.filter",
            "promptWhenRun":false,
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"Filter out non-informative genes whose coefficient of variance is smaller than cv filter",
            "choices":[],
            "kinds":[],
            "name":"cv.filter",
            "promptWhenRun":false,
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"Output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"<dataset.file_basename>.output.adj",
            "required":false,
            "type":"java.lang.String"
        }
    ],
    "name":"ARACNE",
    "outputs":[],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00090:2"
}, "30":{
    "inputs":[
        {
            "description":"input file - .res, .gct, .odf, file from which the row names are extracted",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"output filename containing the row names - .txt",
            "choices":[],
            "kinds":[],
            "name":"output",
            "promptWhenRun":false,
            "defaultValue":"<input.filename_basename>.row.names.txt",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"ExtractRowNames",
    "outputs":["txt"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00004:3"
}, "7":{
    "inputs":[
        {
            "description":"The caArray server",
            "choices":[],
            "kinds":[],
            "name":"caArray.server",
            "promptWhenRun":false,
            "defaultValue":"//caarray-mageom-server.nci.nih.gov:8080/",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"caArrayImportViewer",
    "outputs":[],
    "type":"visualizer",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00066:1"
}, "6":{
    "inputs":[
        {
            "description":"URL for caArray server.",
            "choices":[],
            "kinds":[],
            "name":"url",
            "promptWhenRun":false,
            "defaultValue":"http://array.nci.nih.gov:8080",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Title or identifier of the caArray experiment to import data from.",
            "choices":[],
            "kinds":[],
            "name":"experiment",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Type of bioassay data to be retrieved.",
            "choices":["RAW", "DERIVED"],
            "kinds":[],
            "name":"type",
            "promptWhenRun":false,
            "defaultValue":"RAW",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Data file extension to be retrieved.",
            "choices":[],
            "kinds":[],
            "name":"extension",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Name of the zip file to be created.",
            "choices":[],
            "kinds":[],
            "name":"zipFileName",
            "promptWhenRun":false,
            "defaultValue":"<experiment>.zip",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Username for caArray server",
            "choices":[],
            "kinds":[],
            "name":"username",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Password for caArray server",
            "choices":[],
            "kinds":[],
            "name":"password",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"PASSWORD"
        }
    ],
    "name":"CaArray2.3.0Importer",
    "outputs":[],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00171:3"
}, "32":{
    "inputs":[
        {
            "description":"GCT file to convert",
            "choices":[],
            "kinds":["gct"],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"PCL file that will be produced",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "promptWhenRun":false,
            "defaultValue":"<input.filename_basename>.pcl",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"GctToPcl",
    "outputs":["pcl", "Prediction Results"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00152:1"
}, "5":{
    "inputs":[
        {
            "description":"URL for caArray server.",
            "choices":[],
            "kinds":[],
            "name":"url",
            "promptWhenRun":false,
            "defaultValue":"https://array.nci.nih.gov:8080",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Title or identifier of the caArray experiment to import data from.",
            "choices":[],
            "kinds":[],
            "name":"experiment",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Type of bioassay data to be retrieved.",
            "choices":["RAW", "DERIVED"],
            "kinds":[],
            "name":"type",
            "promptWhenRun":false,
            "defaultValue":"RAW",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Data file extension to be retrieved.",
            "choices":[],
            "kinds":[],
            "name":"extension",
            "promptWhenRun":false,
            "defaultValue":"CEL",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Name of the zip file to be created.",
            "choices":[],
            "kinds":[],
            "name":"zipFileName",
            "promptWhenRun":false,
            "defaultValue":"<experiment>.zip",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Username for caArray server",
            "choices":[],
            "kinds":[],
            "name":"username",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Password for caArray server",
            "choices":[],
            "kinds":[],
            "name":"password",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"PASSWORD"
        },
        {
            "description":"Use generated temporary filenames for downloaded files.",
            "choices":["true", "false"],
            "kinds":[],
            "name":"useGeneratedTempNames",
            "promptWhenRun":false,
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"CaArray2.1.0Importer",
    "outputs":[],
    "type":"module",
    "lsid":"urn:lsid:8020.jnedzel.gm94e-69f.broad.mit.edu:genepatternmodules:1:38"
}, "160":{
    "inputs":[
        {
            "description":"",
            "choices":[],
            "kinds":[],
            "name":"hello",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"DIRECTORY"
        }
    ],
    "name":"DirectoryTest",
    "outputs":[],
    "type":"module",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:38:2"
}, "31":{
    "inputs":[
        {
            "description":"odf file with or without features to summarize",
            "choices":[],
            "kinds":["Prediction Features"],
            "name":"feature.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        }
    ],
    "name":"FeatureSummaryViewer",
    "outputs":[],
    "type":"visualizer",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00005:3"
}, "4":{
    "inputs":[
        {
            "description":"A file or zip of files containing sequences in FASTA format",
            "choices":[],
            "kinds":["fn", "fa", "fasta"],
            "name":"input.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"The name of the index files",
            "choices":[],
            "kinds":[],
            "name":"index.name",
            "promptWhenRun":false,
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"Bowtie.indexer",
    "outputs":["zip"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00229:1"
}, "9":{
    "inputs":[
        {
            "description":"The data file - .gct, .res",
            "choices":[],
            "kinds":["gct", "res"],
            "name":"data.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"The class file - .cls ",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"The name of the output file for prediction results",
            "choices":[],
            "kinds":[],
            "name":"prediction.results.file",
            "promptWhenRun":false,
            "defaultValue":"<data.filename_basename>.pred.odf",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"CARTXValidation",
    "outputs":["Prediction Results"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00062:2"
}, "8":{
    "inputs":[
        {
            "description":"The training data file - .gct, .res, ignored if a saved model (saved.model.filename) is used",
            "choices":[],
            "kinds":["gct", "res"],
            "name":"train.data.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"The training class file - .cls, ignored if a saved model (saved.model.filename) is used",
            "choices":[],
            "kinds":["cls"],
            "name":"train.cls.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"input CART model",
            "choices":[],
            "kinds":["model"],
            "name":"saved.model.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"name of output CART model file  ",
            "choices":[],
            "kinds":[],
            "name":"model.output.file",
            "promptWhenRun":false,
            "defaultValue":"<train.data.filename_basename>.cart.model",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"The test data file - .gct, .res",
            "choices":[],
            "kinds":["gct", "res"],
            "name":"test.data.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"The test class file - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"test.cls.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"The name of the output file for prediction results",
            "choices":[],
            "kinds":[],
            "name":"pred.results.file",
            "promptWhenRun":false,
            "defaultValue":"<test.data.filename_basename>.pred.odf",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"The name of the file containing a plot of the classification tree",
            "choices":[],
            "kinds":[],
            "name":"tree.output.file",
            "promptWhenRun":false,
            "defaultValue":"<test.data.filename_basename>.tree.pdf",
            "required":false,
            "type":"java.lang.String"
        }
    ],
    "name":"CART",
    "outputs":["Prediction Results", "pdf", "model"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00056:2"
}, "19":{
    "inputs":[
        {
            "description":"A dataset file  - .gct, .res",
            "choices":[],
            "kinds":["gct", "res"],
            "name":"input.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"A class file  - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"reference label for samples in the data matrix file",
            "choices":[],
            "kinds":[],
            "name":"sample.reference.label",
            "promptWhenRun":false,
            "defaultValue":"Hybridization REF",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"reference label for features in the data matrix file",
            "choices":[],
            "kinds":[],
            "name":"feature.reference.label",
            "promptWhenRun":false,
            "defaultValue":"CompositeElement REF",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"label that specifies the type of intensity values in data matrix file ",
            "choices":[],
            "kinds":[],
            "name":"intensity.type.label",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"prefix to use for output file name",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "promptWhenRun":false,
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"ConvertToMAGETAB",
    "outputs":["txt"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00188:2"
}, "179":{
    "inputs":[
        {
            "description":"input filename - .res, .gct, .odf",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"PreprocessDataset1.input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        }
    ],
    "name":"PipelineTest",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:52:1"
}, "17":{
    "inputs":[
        {
            "description":"The input file (any non-binary file format)",
            "choices":[],
            "kinds":[],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"The output file",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"<input.filename_basename>.cvt.<input.filename_extension>",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"ConvertLineEndings",
    "outputs":[],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00002:1"
}, "178":{
    "inputs":[
        {
            "description":"The dataset to display - .gct, .res, odf type=Dataset",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"dataset",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        }
    ],
    "name":"HeatMapViewer",
    "outputs":[],
    "type":"visualizer",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00010:9"
}, "18":{
    "inputs":[
        {
            "description":"The gct, res, or odf file to convert",
            "choices":[],
            "kinds":[],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"The base name of the zip output file or the MAGE-ML file",
            "choices":[],
            "kinds":[],
            "name":"output.file.base.name",
            "promptWhenRun":false,
            "defaultValue":"<input.filename_basename>",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Whether to zip the MAGE-ML files",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"create.zip.file",
            "promptWhenRun":false,
            "defaultValue":"yes",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"ConvertToMAGEML",
    "outputs":[],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00038:2"
}, "177":{
    "inputs":[],
    "name":"testPreprocessThenHmv",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.genepatt.genepattern.broadinstitute.org:genepatternmodules:2867:3"
}, "15":{
    "inputs":[
        {
            "description":"Spectrum file -.csv",
            "choices":[],
            "kinds":["csv"],
            "name":"spectrum1.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Spectrum file - .csv",
            "choices":[],
            "kinds":["csv"],
            "name":"spectrum2.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Output file name - .odf",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"<spectrum1.filename_basename>spectrum2.filename_compare.odf",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Minimum M/Z to include",
            "choices":[],
            "kinds":[],
            "name":"low.Da",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Maximum M/Z to include",
            "choices":[],
            "kinds":[],
            "name":"high.Da",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        }
    ],
    "name":"CompareSpectra",
    "outputs":["Spectra Similarity"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00052:2"
}, "176":{
    "inputs":[],
    "name":"job424",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:51:1"
}, "16":{
    "inputs":[
        {
            "description":"The data to be clustered (.gct, .res, .odf)",
            "choices":[],
            "kinds":["gct", "res", "Dataset"],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Try K=2,3,...,kmax clusters (must be > 1)",
            "choices":[],
            "kinds":[],
            "name":"kmax",
            "promptWhenRun":false,
            "defaultValue":"5",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Number of resampling iterations",
            "choices":[],
            "kinds":[],
            "name":"resampling.iterations",
            "promptWhenRun":false,
            "defaultValue":"20",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Random number generator seed",
            "choices":[],
            "kinds":[],
            "name":"seed.value",
            "promptWhenRun":false,
            "defaultValue":"12345",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Type of clustering algorithm",
            "choices":["HIERARCHICAL=Hierarchical", "SOM", "NMF", "KMEANS=KMeans"],
            "kinds":[],
            "name":"clustering.algorithm",
            "promptWhenRun":false,
            "defaultValue":"HIERARCHICAL",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Whether to cluster by rows/genes or columns/experiments",
            "choices":["=columns", "-c=rows"],
            "kinds":[],
            "name":"cluster.by",
            "promptWhenRun":false,
            "defaultValue":"columns",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Distance measure",
            "choices":["EUCLIDEAN=Euclidean", "PEARSON=Pearson"],
            "kinds":[],
            "name":"distance.measure",
            "promptWhenRun":false,
            "defaultValue":"EUCLIDEAN",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"resampling scheme (one of 'subsample[ratio]', 'features[nfeat]', 'nosampling')",
            "choices":[],
            "kinds":[],
            "name":"resample",
            "promptWhenRun":false,
            "defaultValue":"subsample",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Ignored when algorithm other than hierarchical selected",
            "choices":["average", "complete", "single"],
            "kinds":[],
            "name":"merge.type",
            "promptWhenRun":false,
            "defaultValue":"average",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Number of SOM/NMF iterations",
            "choices":[],
            "kinds":[],
            "name":"descent.iterations",
            "promptWhenRun":false,
            "defaultValue":"2000",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Stub pre-pended to all the output file names",
            "choices":[],
            "kinds":[],
            "name":"output.stub",
            "promptWhenRun":false,
            "defaultValue":"<input.filename_basename>",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"row-wise, column-wise, both",
            "choices":["-n1=row-wise", "-n2=column-wise", "-n3=both", "=none"],
            "kinds":[],
            "name":"normalize.type",
            "promptWhenRun":false,
            "defaultValue":"row-wise",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"number of row/column normalization iterations (supercedes normalize.type)",
            "choices":[],
            "kinds":[],
            "name":"normalization.iterations",
            "promptWhenRun":false,
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Whether to create heatmaps (one for each cluster number)",
            "choices":["=no", "-p=yes"],
            "kinds":[],
            "name":"create.heat.map",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"point size of a consensus matrix's heat map (between 1 and 20)",
            "choices":[],
            "kinds":[],
            "name":"heat.map.size",
            "promptWhenRun":false,
            "defaultValue":"2",
            "required":false,
            "type":"java.lang.Integer"
        }
    ],
    "name":"ConsensusClustering",
    "outputs":["gct", "gif", "clu", "pdf", "clsdist", "stdev"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00030:5"
}, "13":{
    "inputs":[
        {
            "description":"The input file - .res, .gct, .odf type=Dataset",
            "choices":[],
            "kinds":["Dataset", "gct", "res"],
            "name":"input.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"The class file - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"The class file containing the confounding variable.",
            "choices":[],
            "kinds":["cls"],
            "name":"confounding.variable.cls.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"The test to perform",
            "choices":["0=Class 0", "1=Class 1", "2=2 Sided"],
            "kinds":[],
            "name":"test.direction",
            "promptWhenRun":false,
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"The statistic to use",
            "choices":["1=SNR", "0=T-Test", "3=SNR (median)", "2=T-Test (median)", "4=T-Test (min std)", "5=SNR (min std)", "6=SNR (median, min std)", "7=T-Test (median, min std)", "8=Paired T-Test"],
            "kinds":[],
            "name":"test.statistic",
            "promptWhenRun":false,
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"The minimum standard deviation if test statistic includes min std option",
            "choices":[],
            "kinds":[],
            "name":"min.std",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"The number of permutations to perform (use 0 to calculate asymptotic p-values using the standard independent two-sample t-test)",
            "choices":[],
            "kinds":[],
            "name":"number.of.permutations",
            "promptWhenRun":false,
            "defaultValue":"1000",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Whether to perform all possible permutations",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"complete",
            "promptWhenRun":false,
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Whether to perform balanced permutations",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"balanced",
            "promptWhenRun":false,
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"The seed of the random number generator used to produce permutations",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "promptWhenRun":false,
            "defaultValue":"779948241",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Whether to smooth p-values",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"smooth.p.values",
            "promptWhenRun":false,
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Tests to perform when cls file has more than two classes (Note: not fully corrected for multiple hypothesis testing)",
            "choices":["one versus all", "all pairs"],
            "kinds":[],
            "name":"phenotype.test",
            "promptWhenRun":false,
            "defaultValue":"one versus all",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"The name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "promptWhenRun":false,
            "defaultValue":"<input.file_basename>.comp.marker.odf",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"ComparativeMarkerSelection",
    "outputs":["Comparative Marker Selection"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00044:7"
}, "14":{
    "inputs":[
        {
            "description":"The output from ComparativeMarkerSelection",
            "choices":[],
            "kinds":["Comparative Marker Selection"],
            "name":"comparative.marker.selection.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"The dataset file used as  input to ComparativeMarkerSelection",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"dataset.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        }
    ],
    "name":"ComparativeMarkerSelectionViewer",
    "outputs":[],
    "type":"visualizer",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00045:4"
}, "11":{
    "inputs":[
        {
            "description":"Dataset file - .res, .gct, .odf",
            "choices":[],
            "kinds":[],
            "name":"data.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"class file - .cls, .odf",
            "choices":[],
            "kinds":[],
            "name":"class.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"output filename for marker gene list results - .odf file",
            "choices":[],
            "kinds":[],
            "name":"marker.gene.list.file",
            "promptWhenRun":false,
            "defaultValue":"<data.filename_basename>.genelist",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"output filename for marker data - .gct file",
            "choices":[],
            "kinds":[],
            "name":"marker.data.set.file",
            "promptWhenRun":false,
            "defaultValue":"<data.filename_basename>.neighbors",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"number of neighbors to find",
            "choices":[],
            "kinds":[],
            "name":"num.neighbors",
            "promptWhenRun":false,
            "defaultValue":"50",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"number of permutations in permutation test",
            "choices":[],
            "kinds":[],
            "name":"num.permutations",
            "promptWhenRun":false,
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"user-set significance value for permutation test",
            "choices":[],
            "kinds":[],
            "name":"user.pval",
            "promptWhenRun":false,
            "defaultValue":"0.5",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"use mean or median for feature selection",
            "choices":["=mean", "-d=median"],
            "kinds":[],
            "name":"mean.or.median",
            "promptWhenRun":false,
            "defaultValue":"mean",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"use signal-to-noise or t-test to select neighbors",
            "choices":["=t-test", "-S=SNR"],
            "kinds":[],
            "name":"ttest.or.snr",
            "promptWhenRun":false,
            "defaultValue":"t-test",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"if no, values below will be ignored",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"filter.data",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"minimum threshold for data",
            "choices":[],
            "kinds":[],
            "name":"min.threshold",
            "promptWhenRun":false,
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"maximum threshold for data",
            "choices":[],
            "kinds":[],
            "name":"max.threshold",
            "promptWhenRun":false,
            "defaultValue":"16000",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"minimum fold difference for filtering genes",
            "choices":[],
            "kinds":[],
            "name":"min.fold.diff",
            "promptWhenRun":false,
            "defaultValue":"5",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"minimum absolute difference for filtering genes",
            "choices":[],
            "kinds":[],
            "name":"min.abs.diff",
            "promptWhenRun":false,
            "defaultValue":"50",
            "required":true,
            "type":"java.lang.Integer"
        }
    ],
    "name":"ClassNeighbors",
    "outputs":[],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00001:1"
}, "12":{
    "inputs":[
        {
            "description":"Dataset file - .gct, .res",
            "choices":[],
            "kinds":["gct", "res"],
            "name":"dataset.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"The chip platform",
            "choices":[],
            "kinds":["chip"],
            "name":"chip.platform",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Collapse mode for probe sets => 1 gene",
            "choices":["Median", "Maximum"],
            "kinds":[],
            "name":"collapse.mode",
            "promptWhenRun":false,
            "defaultValue":"Maximum",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"The output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file.name",
            "promptWhenRun":false,
            "defaultValue":"<dataset.file_basename>.collapsed",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"CollapseDataset",
    "outputs":["gct", "res", "txt"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00134:1"
}, "170":{
    "inputs":[],
    "name":"job440",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:45:1"
}, "21":{
    "inputs":[
        {
            "description":"input clinical data. Case ID in 1st column (.txt file)",
            "choices":[],
            "kinds":[],
            "name":"input.surv.data.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"input class information (.cls file)",
            "choices":[],
            "kinds":[],
            "name":"input.cls.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"CoxRegression_result",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Column name for survival time",
            "choices":[],
            "kinds":[],
            "name":"time",
            "promptWhenRun":false,
            "defaultValue":"time",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Column name for censor (0: censored/alive, 1: event/death)",
            "choices":[],
            "kinds":[],
            "name":"status",
            "promptWhenRun":false,
            "defaultValue":"status",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"(e.g. age,labdata1,...)",
            "choices":[],
            "kinds":[],
            "name":"variable.continuous",
            "promptWhenRun":false,
            "defaultValue":"NA",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"(e.g. sex,cls,grade,...)",
            "choices":[],
            "kinds":[],
            "name":"variable.category",
            "promptWhenRun":false,
            "defaultValue":"NA",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"(e.g. sex:cls,sex:grade,...)",
            "choices":[],
            "kinds":[],
            "name":"variable.interaction.terms",
            "promptWhenRun":false,
            "defaultValue":"NA",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Fit is done for each strata",
            "choices":[],
            "kinds":[],
            "name":"strata",
            "promptWhenRun":false,
            "defaultValue":"NA",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"(e.g. cls:2) *only one subgroup can be specified",
            "choices":[],
            "kinds":[],
            "name":"input.subgroup",
            "promptWhenRun":false,
            "defaultValue":"NA",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"",
            "choices":["none=no", "both=Stepwise selection", "forward=Forward selection", "backward=Backward selection"],
            "kinds":[],
            "name":"variable.selection",
            "promptWhenRun":false,
            "defaultValue":"none",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"CoxRegression",
    "outputs":["png", "txt"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00164:1"
}, "171":{
    "inputs":[],
    "name":"job440",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:46:1"
}, "20":{
    "inputs":[
        {
            "description":"SNP file containing both normal and target samples.",
            "choices":[],
            "kinds":["snp"],
            "name":"snp.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"dChip format sample info file containing Ploidy(numeric) and Sample columns",
            "choices":[],
            "kinds":["txt", "xls"],
            "name":"sample.info.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Whether to include genotype calls from the input snp file if they exist.",
            "choices":["xcn=yes (create xcn file)", "cn=no (create cn file)"],
            "kinds":[],
            "name":"include.genotype.calls",
            "promptWhenRun":false,
            "defaultValue":"cn",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file.name",
            "promptWhenRun":false,
            "defaultValue":"<snp.file_basename>",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"CopyNumberDivideByNormals",
    "outputs":["cn", "xcn"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00085:2"
}, "174":{
    "inputs":[],
    "name":"job424",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:49:1"
}, "175":{
    "inputs":[],
    "name":"job424",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:50:1"
}, "109":{
    "inputs":[
        {
            "description":"",
            "choices":[],
            "kinds":[],
            "name":"required",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"DIRECTORY"
        },
        {
            "description":"",
            "choices":[],
            "kinds":[],
            "name":"optional",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"DIRECTORY"
        }
    ],
    "name":"Test",
    "outputs":[],
    "type":"module",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:4:1"
}, "172":{
    "inputs":[],
    "name":"job440",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:47:1"
}, "108":{
    "inputs":[
        {
            "description":"Summarized probe intensity data in .snp format",
            "choices":[],
            "kinds":["snp"],
            "name":"snp.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"A Sample information file that contains gender information",
            "choices":[],
            "kinds":[],
            "name":"sample.info.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"<snp.filename_basename>.xcorrected.snp",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"XChromosomeCorrect",
    "outputs":["snp"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00093:3"
}, "173":{
    "inputs":[],
    "name":"job441",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:48:1"
}, "107":{
    "inputs":[
        {
            "description":"Dataset input data file - res, gct, odf",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"data.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Class input file - cls",
            "choices":[],
            "kinds":["cls"],
            "name":"class.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"number of selected features",
            "choices":[],
            "kinds":[],
            "name":"num.features",
            "promptWhenRun":false,
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"statistic to use to perform feature selection",
            "choices":["0=SNR", "1=T-Test", "2=SNR (median)", "3=T-Test (median)", "4=SNR (min std)", "5=T-Test (min std)", "6=SNR (median, min std)", "7=T-Test (median, min std)"],
            "kinds":[],
            "name":"feature.selection.statistic",
            "promptWhenRun":false,
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"minimum standard deviation if feature selection statistic includes min std option",
            "choices":[],
            "kinds":[],
            "name":"min.std",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"Prediction results output file name - odf",
            "choices":[],
            "kinds":[],
            "name":"pred.results.file",
            "promptWhenRun":false,
            "defaultValue":"<data.filename_basename>.pred.odf",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Feature summary output file name - odf",
            "choices":[],
            "kinds":[],
            "name":"feature.summary.file",
            "promptWhenRun":false,
            "defaultValue":"<data.filename_basename>.feat.odf",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"WeightedVotingXValidation",
    "outputs":["Prediction Results", "Prediction Features"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00028:3"
}, "106":{
    "inputs":[
        {
            "description":"training data file name - .gct, .res, .odf type = Dataset, ignored if a saved model (saved.model.filename) is used",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"train.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"class file for training data - .cls, ignored if a saved model (saved.model.filename) is used",
            "choices":[],
            "kinds":["cls"],
            "name":"train.class.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"input Weighted Voting model file - .odf type = Weighted Voting Prediction Model",
            "choices":[],
            "kinds":["Weighted Voting Prediction Model"],
            "name":"saved.model.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"name of output Weighted Voting model file  - .odf type = Weighted Voting Prediction Model",
            "choices":[],
            "kinds":[],
            "name":"model.file",
            "promptWhenRun":false,
            "defaultValue":"<train.filename_basename>.model.odf",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"test data file name - .gct, .res, .odf type = Dataset",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"test.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"class file for test data - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"test.class.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"number of selected features if feature list filename is not specified",
            "choices":[],
            "kinds":[],
            "name":"num.features",
            "promptWhenRun":false,
            "defaultValue":"10",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"statistic to use to perform feature selection",
            "choices":["0=SNR", "1=T-Test", "2=SNR (median)", "3=T-Test (median)", "4=SNR (min std)", "5=T-Test (min std)", "6=SNR (median, min std)", "7=T-Test (median, min std)"],
            "kinds":[],
            "name":"feature.selection.statistic",
            "promptWhenRun":false,
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"minimum standard deviation if feature selection statistic includes min std option",
            "choices":[],
            "kinds":[],
            "name":"min.std",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"features to use for prediction",
            "choices":[],
            "kinds":[],
            "name":"feature.list.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"name of prediction results output file - .odf type = Prediction Results",
            "choices":[],
            "kinds":[],
            "name":"pred.results.file",
            "promptWhenRun":false,
            "defaultValue":"<test.filename_basename>.pred.odf",
            "required":false,
            "type":"java.lang.String"
        }
    ],
    "name":"WeightedVoting",
    "outputs":["Prediction Results"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00027:3"
}, "105":{
    "inputs":[
        {
            "description":"Feature list one - .grp, .txt",
            "choices":[],
            "kinds":["grp", "txt"],
            "name":"feature.list.one",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Feature list two - .grp, .txt",
            "choices":[],
            "kinds":["grp", "txt"],
            "name":"feature.list.two",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Feature list three - .grp, .txt",
            "choices":[],
            "kinds":["grp", "txt"],
            "name":"feature.list.three",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        }
    ],
    "name":"VennDiagram",
    "outputs":[],
    "type":"visualizer",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00105:1"
}, "104":{
    "inputs":[
        {
            "description":"input filename - .res, .gct, .odf type=Dataset",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"output file",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"<input.filename_basename>.unique",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"whether to make the row labels unique",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"make.row.labels.unique",
            "promptWhenRun":false,
            "defaultValue":"yes",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"whether to make the column labels unique",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"make.column.labels.unique",
            "promptWhenRun":false,
            "defaultValue":"yes",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"UniquifyLabels",
    "outputs":["res", "gct", "Dataset"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00067:1"
}, "103":{
    "inputs":[
        {
            "description":"Dataset - .res .gct, .odf",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"The output file format",
            "choices":["gct", "odf"],
            "kinds":[],
            "name":"output.file.format",
            "promptWhenRun":false,
            "defaultValue":"gct",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"The name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.file.name",
            "promptWhenRun":false,
            "defaultValue":"<input.filename_basename>.transposed",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"TransposeDataset",
    "outputs":["gct", "Dataset"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00026:3"
}, "102":{
    "inputs":[
        {
            "description":"A prebuilt bowtie index. Either a prebuilt or a custom Bowtie index must be specified.",
            "choices":["none=", "a_thaliana=A. Thaliana", "b_taurus=B. Taurus", "e_coli=E. Coli", "c_elegans_ws200=C. Elegans, WormBase WS200", "hg19=H. sapiens, UCSC hg19", "hg18=H. sapiens, UCSC hg18", "mm9=M. musculus, UCSC mm9", "mm8=M. musculus, UCSC mm8", "m_musculus_ncbi37=M. musculus, NCBI 37", "s_cerevisiae= S. cerevisiae"],
            "kinds":[],
            "name":"prebuilt.bowtie.index",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"A ZIP archive containing Bowtie index files. Either a prebuilt or a custom Bowtie index must be specified.",
            "choices":[],
            "kinds":["zip"],
            "name":"custom.bowtie.index",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Unpaired reads file or first mate for paired reads. A file or zip of files containing reads in FASTA or FASTQ format.",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "zip"],
            "name":"reads.pair.1",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Second mate for paired reads. A file or zip of files in FASTA or FASTQ format.",
            "choices":[],
            "kinds":["fn", "fa", "fastq", "zip"],
            "name":"reads.pair.2",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"The expected mean inner distance between mate pairs.",
            "choices":[],
            "kinds":[],
            "name":"mate.inner.dist",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"The standard deviation for the distribution on inner distances between mate pairs.",
            "choices":[],
            "kinds":[],
            "name":"mate.std.dev",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Library type for strand specific reads.",
            "choices":["None=", "fr-unstranded=Standard Illumina (fr-unstranded)", "fr-firststrand=dUTP, NSR, NNSR (fr-firststrand)", "fr-secondstrand=Ligation, Standard SOLiD (fr-secondstrand)"],
            "kinds":[],
            "name":"library.type",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"A GTF file (v. 2.2 or higher) containing a list of gene model annotations. The exon records in this file will be used to build a set of known splice junctions for each gene and to attempt to align reads to these junctions even if they would not normally be covered by the initial mapping.",
            "choices":[],
            "kinds":["gtf"],
            "name":"GTF.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"A file containing raw junctions. Junctions are specified one per line, in a tab-delimited format.",
            "choices":[],
            "kinds":["juncs"],
            "name":"raw.junctions.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"If no, then only look for junctions indicated in the supplied GFF file. (Ignored when no GTF file is specified).",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"find.novel.junctions",
            "promptWhenRun":false,
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"The anchor length. This value must be at least 3.",
            "choices":[],
            "kinds":[],
            "name":"min.anchor.length",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"The maximum number of mismatches that may appear in the \"anchor\" region of a spliced alignment.",
            "choices":[],
            "kinds":[],
            "name":"splice.mismatches",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"The minimum intron length. TopHat will ignore donor/acceptor pairs closer than this many bases apart.",
            "choices":[],
            "kinds":[],
            "name":"min.intron.length",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"The maximum intron length. When searching for junctions ab initio, TopHat will ignore donor/acceptor pairs farther than this many bases apart, except when such a pair is supported by a split segment alignment of a long read.",
            "choices":[],
            "kinds":[],
            "name":"max.intron.length",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Use the Solexa scale for quality values in FASTQ files.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"use.solexa.scale",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"As of the Illumina GA pipeline version 1.3, quality scores are encoded in Phred-scaled base-64. Use this option for FASTQ files from pipeline 1.3 or later.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"use.solexa.1.3.scale",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Separate quality value files - colorspace read files (CSFASTA) come with separate qual files.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"separate.qual.files",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Quality values are space-delimited integer values, this becomes default when you specify color option.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"integer.quals",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Colorspace reads. Requires a color space bowtie index.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"colorspace.reads",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Filters out junctions supported by too few alignments. Suppose a junction spanning two exons, is supported by S reads. Let the average depth of coverage of exon A be D, and assume that it is higher than B. If S / D is less than the minimum isoform fraction, the junction is not reported. A value of zero disables the filter.",
            "choices":[],
            "kinds":[],
            "name":"min.isoform.fraction",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Allows up to the specified alignments to the reference for a given read, and suppresses all alignments for reads with more than this many alignments.",
            "choices":[],
            "kinds":[],
            "name":"max.multihits",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Enables or disables the mate pair closure-based search for junctions. Closure-based search should only be used when the expected inner distance between mates is small (<= 50bp).",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"closure.search",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Enables or disables the coverage based search for junctions. Use when coverage search is disabled by default (such as for reads 75bp or longer), for maximum sensitivity.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"coverage.search",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Attempts to find alignments incident to microexons. Works only for reads 50bp or longer.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"microexon.search",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Enables or disables a slower, but potentially more sensitive algorithm to find junctions in addition to its standard search. Consider using this if you expect that your experiment produced a lot of reads from pre-mRNA, that fall within the introns of your transcripts.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"butterfly.search",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Specify how many parallel search threads to launch. All threads find alignments in parallel, increasing alignment throughput by approximately a multiple of the number of threads.",
            "choices":[],
            "kinds":[],
            "name":"num.threads",
            "promptWhenRun":false,
            "defaultValue":"8",
            "required":false,
            "type":"java.lang.Integer"
        }
    ],
    "name":"TopHat",
    "outputs":["bam", "bed"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00230:1"
}, "99":{
    "inputs":[
        {
            "description":"input clinical data including survival time & censor status -.txt",
            "choices":[],
            "kinds":["txt"],
            "name":"input.surv.data.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Class information file -.cls",
            "choices":[],
            "kinds":["cls"],
            "name":"input.cls.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Name of survival time field",
            "choices":[],
            "kinds":[],
            "name":"time.field",
            "promptWhenRun":false,
            "defaultValue":"time",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Name of survival time field (value should be \"event:1, censor:0\")",
            "choices":[],
            "kinds":[],
            "name":"censor.field",
            "promptWhenRun":false,
            "defaultValue":"status",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Name of class field in survival data file (optional)",
            "choices":[],
            "kinds":[],
            "name":"cls.field",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Output file name for survival fit results",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"print.fit.results",
            "promptWhenRun":false,
            "defaultValue":"F",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Assign line type/color automatically/manually?",
            "choices":["automatic=automatic", "manual=manual"],
            "kinds":[],
            "name":"line.type.color.assign",
            "promptWhenRun":false,
            "defaultValue":"automatic",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"e.g. 1,2,3,... (1: solid, 2: dashed, 3: dotted, 4: dot-dashed)",
            "choices":[],
            "kinds":[],
            "name":"manual.line.type",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"e.g. black, blue, red, ...",
            "choices":[],
            "kinds":[],
            "name":"manual.line.color",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Line width",
            "choices":["1=thin", "2=thick", "3=thickest"],
            "kinds":[],
            "name":"line.width",
            "promptWhenRun":false,
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Survival time conversion",
            "choices":["1=none", "365.25=days to years", "12=months to years"],
            "kinds":[],
            "name":"time.conversion",
            "promptWhenRun":false,
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"Maximum survival time (in original scale)",
            "choices":[],
            "kinds":[],
            "name":"max.time",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"Lower limit of y axis range",
            "choices":[],
            "kinds":[],
            "name":"surv.function.lower",
            "promptWhenRun":false,
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"Upper limit of y axis range",
            "choices":[],
            "kinds":[],
            "name":"surv.function.higher",
            "promptWhenRun":false,
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"Type of survival curve",
            "choices":["log=survival", "event=event", "cumhaz=cumulative hazard", "cloglog=complimentary log-log survival"],
            "kinds":[],
            "name":"curve.type",
            "promptWhenRun":false,
            "defaultValue":"log",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Show confidence inteval?",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"show.conf.interval",
            "promptWhenRun":false,
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Show legend?",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"add.legend",
            "promptWhenRun":false,
            "defaultValue":"T",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Position of legend",
            "choices":["left-bottom", "left-top", "right-bottom", "right-top"],
            "kinds":[],
            "name":"legend.position",
            "promptWhenRun":false,
            "defaultValue":"left-bottom",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Name for output files",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "promptWhenRun":false,
            "defaultValue":"<input.surv.data.file_basename>",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"SurvivalCurve",
    "outputs":["png", "txt"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00103:2"
}, "101":{
    "inputs":[
        {
            "description":"The training data file - .gct, .res",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"train.data.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"The training class file - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"train.cls.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"A saved model from a previous run of SVM",
            "choices":[],
            "kinds":["model"],
            "name":"saved.model.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"The test data file - .gct, .res",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"test.data.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"The test class file - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"test.cls.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"The name of the output file for prediction results",
            "choices":[],
            "kinds":[],
            "name":"pred.results.output.file",
            "promptWhenRun":false,
            "defaultValue":"<test.data.filename_basename>.pred.odf",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"The name of the file containing the saved model",
            "choices":[],
            "kinds":[],
            "name":"model.output.file",
            "promptWhenRun":false,
            "defaultValue":"<train.data.filename_basename>.model",
            "required":false,
            "type":"java.lang.String"
        }
    ],
    "name":"SVM",
    "outputs":["Prediction Results", "model"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00025:4"
}, "100":{
    "inputs":[
        {
            "description":"input clinical data including survival time & censor status  -.txt",
            "choices":[],
            "kinds":["txt"],
            "name":"input.surv.data.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"class information file (.cls format)",
            "choices":[],
            "kinds":["cls"],
            "name":"input.cls.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Name of survival time field",
            "choices":[],
            "kinds":[],
            "name":"time.field",
            "promptWhenRun":false,
            "defaultValue":"time",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Name of censor field (value should be \"event:1, no event: 0\")",
            "choices":[],
            "kinds":[],
            "name":"censor.field",
            "promptWhenRun":false,
            "defaultValue":"status",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Name of class field in survival data file (optional)",
            "choices":[],
            "kinds":[],
            "name":"cls.field",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Type of test",
            "choices":["0=log-rank test", "1=generalized Wilcoxon test"],
            "kinds":[],
            "name":"test.type",
            "promptWhenRun":false,
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Suggroups (classes) to be compared (e.g., A, C as in 3rd line of cls file)",
            "choices":[],
            "kinds":[],
            "name":"subgroup",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Output file name",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "promptWhenRun":false,
            "defaultValue":"<input.surv.data.file_basename>",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"SurvivalDifference",
    "outputs":["png", "txt"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00104:1"
}, "98":{
    "inputs":[
        {
            "description":"Input dataset A - .gct, should have common gene ID with dataset B",
            "choices":[],
            "kinds":["gct"],
            "name":"datasetA.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Input dataset B - .gct,  should have common gene ID with dataset A",
            "choices":[],
            "kinds":["gct"],
            "name":"datasetB.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Input class label A - .cls, 3rd line should be numeric, +1 if starts from \"0\"",
            "choices":[],
            "kinds":["cls"],
            "name":"classA.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Input class label B - .cls, 3rd line should be numeric, +1 if starts from \"0\"",
            "choices":[],
            "kinds":["cls"],
            "name":"classB.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Number of marker genes to be mapped",
            "choices":[],
            "kinds":[],
            "name":"num.marker.genes",
            "promptWhenRun":false,
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Number of random permutations for ES in each cell of SA matrix",
            "choices":[],
            "kinds":[],
            "name":"num.perm",
            "promptWhenRun":false,
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Number of random permutations for Fisher's statistics",
            "choices":[],
            "kinds":[],
            "name":"num.perm.fisher",
            "promptWhenRun":false,
            "defaultValue":"1000",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Weight enrichment by correlation vector (SNR)",
            "choices":["1=yes", "0=no"],
            "kinds":[],
            "name":"weighted.score.type",
            "promptWhenRun":false,
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Choice of null distribution",
            "choices":["pool=pool", "each=each"],
            "kinds":[],
            "name":"null.distribution",
            "promptWhenRun":false,
            "defaultValue":"pool",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"p-value correction method",
            "choices":["FDR=FDR", "Bonferroni=Bonferroni", "both=both"],
            "kinds":[],
            "name":"p.value.correction",
            "promptWhenRun":false,
            "defaultValue":"Bonferroni",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Cluster dataset A's subclass in heatmap of SA matrix",
            "choices":["1=yes", "NA=no"],
            "kinds":[],
            "name":"cluster.rows",
            "promptWhenRun":false,
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Cluster dataset B's subclass in heatmap of SA matrix",
            "choices":["1=yes", "NA=no"],
            "kinds":[],
            "name":"cluster.columns",
            "promptWhenRun":false,
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Create heatmap of each nominal-p matrix",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"nominal.p.value.matrix",
            "promptWhenRun":false,
            "defaultValue":"T",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Create legend for heatmap",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"create.legend",
            "promptWhenRun":false,
            "defaultValue":"T",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Random seed",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "promptWhenRun":false,
            "defaultValue":"47365321",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Name of output files containing heatmap of SA matrices, summary of ES matrix, nominal p-values, and corrected p-values",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "promptWhenRun":false,
            "defaultValue":"SubMap",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"SubMap",
    "outputs":["png", "txt"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00101:3"
}, "97":{
    "inputs":[
        {
            "description":"input dataset - .gct, .res",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"input.dataset.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"class template - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"whether to split the data using a percentage split or cross validation approach",
            "choices":["random=percentage split", "CV=cross-validation"],
            "kinds":[],
            "name":"split.method",
            "promptWhenRun":false,
            "defaultValue":"random",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"whether to create splits stratified with respect to the class template",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"stratified",
            "promptWhenRun":false,
            "defaultValue":"T",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"number of train/test splits to generate",
            "choices":[],
            "kinds":[],
            "name":"folds",
            "promptWhenRun":false,
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"proportion of data to be allocated to train file when split method is percentage split (ignored when split method is cross-validation)",
            "choices":[],
            "kinds":[],
            "name":"percentage.split.proportion",
            "promptWhenRun":false,
            "defaultValue":"0.5",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"random number generator seed",
            "choices":[],
            "kinds":[],
            "name":"seed",
            "promptWhenRun":false,
            "defaultValue":"123456",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"output saved to output.prefix.{train,test}.n.{gct|res,cls}, where n is the fold index",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "promptWhenRun":false,
            "defaultValue":"<input.dataset.file_basename>",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"SplitDatasetTrainTest",
    "outputs":["gct", "cls", "res"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00024:3"
}, "96":{
    "inputs":[
        {
            "description":"A GCT file containing data to cluster",
            "choices":[],
            "kinds":["gct"],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"The type of linkage to use in the hierarchical clustering - \"single\", \"complete\", \"centroid\", or \"average.\"",
            "choices":["average", "complete", "single", "centroid"],
            "kinds":[],
            "name":"method",
            "promptWhenRun":false,
            "defaultValue":"average",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"The sum of gene weights; this is the tuning parameter for sparse hierarchical clustering. If a non-negative number is given, then this tuning parameter is used. Otherwise, a tuning parameter is selected via a permutation approach. Note: The program runs much more quickly if wbound is specified rather than left at -1.",
            "choices":[],
            "kinds":[],
            "name":"wbound",
            "promptWhenRun":false,
            "defaultValue":"-1",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"By default, only the 5000 genes with highest variance will be used (for computational reasons). To use all the genes, set to -1. Warning: using all genes will be slow if there are many genes in the data set.",
            "choices":[],
            "kinds":[],
            "name":"maxnumgenes",
            "promptWhenRun":false,
            "defaultValue":"5000",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"If a clustering of the genes with non-zero weights is desired, set to TRUE.",
            "choices":["true", "false"],
            "kinds":[],
            "name":"cluster.features",
            "promptWhenRun":false,
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"The type of linkage used to cluster the features (if desired) - \"single\", \"complete\", \"centroid\", or \"average\". Used only if cluster features is set to \"TRUE\"",
            "choices":["average", "complete", "single", "centroid"],
            "kinds":[],
            "name":"method.features",
            "promptWhenRun":false,
            "defaultValue":"average",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Whether or not the arrays should be standardized to have mean zero and standard deviation one before clustering is performed.",
            "choices":["true", "false"],
            "kinds":[],
            "name":"standardize.arrays",
            "promptWhenRun":false,
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"SparseHierarchicalClustering",
    "outputs":["atr", "gtr"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00227:1"
}, "95":{
    "inputs":[
        {
            "description":"SOM Properties ODF file",
            "choices":[],
            "kinds":["SOM Cluster"],
            "name":"som.cluster.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        }
    ],
    "name":"SOMClusterViewer",
    "outputs":[],
    "type":"visualizer",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00023:5"
}, "94":{
    "inputs":[
        {
            "description":"Dataset (res, gct, or odf dataset)",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"dataset.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"The base output file name - .odf",
            "choices":[],
            "kinds":[],
            "name":"output.stub",
            "promptWhenRun":false,
            "defaultValue":"<dataset.filename_basename>",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Range of values can be entered and the program will automatically run the algorithm for each number of clusters in the range.",
            "choices":[],
            "kinds":[],
            "name":"cluster.range",
            "promptWhenRun":false,
            "defaultValue":"2-3",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"The seed for the random number generator, is exposed to allow the user to recreate a given session at a later time, (as opposed to allowing the program to generate a random initial seed which could result in different outcomes even if all the other parameters are identical).",
            "choices":[],
            "kinds":[],
            "name":"seed.range",
            "promptWhenRun":false,
            "defaultValue":"42",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"How many times the algorithm should try to refine the clusters. Initially, this value can be set low for faster exploration, but should be set high (e.g., 50,000) for good convergence.",
            "choices":[],
            "kinds":[],
            "name":"iterations",
            "promptWhenRun":false,
            "defaultValue":"50000",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Whether to cluster by rows or columns",
            "choices":["rows", "columns"],
            "kinds":[],
            "name":"cluster.by",
            "promptWhenRun":false,
            "defaultValue":"rows",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Setting this and som.cols to a non zero value will override cluster.range and the computation will be for the specified geometry",
            "choices":[],
            "kinds":[],
            "name":"som.rows",
            "promptWhenRun":false,
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Setting this and som.rows to a non zero value will override cluster.range and the computation will be for the specified geometry",
            "choices":[],
            "kinds":[],
            "name":"som.cols",
            "promptWhenRun":false,
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"How to select inital random centroids",
            "choices":["Random_Vectors", "Random_Datapoints"],
            "kinds":[],
            "name":"initialization",
            "promptWhenRun":false,
            "defaultValue":"Random_Vectors",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Neighborhood function determining how centroids near the target centroid are updated",
            "choices":["Bubble", "Gaussian"],
            "kinds":[],
            "name":"neighborhood",
            "promptWhenRun":false,
            "defaultValue":"Bubble",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Initial learning weight for centroid updates",
            "choices":[],
            "kinds":[],
            "name":"alpha.initial",
            "promptWhenRun":false,
            "defaultValue":"0.1",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"Final learning weight for centroid updates",
            "choices":[],
            "kinds":[],
            "name":"alpha.final",
            "promptWhenRun":false,
            "defaultValue":"0.005",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"Initial sigma to determine update neighborhood size around the target centroid",
            "choices":[],
            "kinds":[],
            "name":"sigma.initial",
            "promptWhenRun":false,
            "defaultValue":"5.0",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"Final sigma to determine update neighborhood size around the target centroid",
            "choices":[],
            "kinds":[],
            "name":"sigma.final",
            "promptWhenRun":false,
            "defaultValue":"0.5",
            "required":true,
            "type":"java.lang.Float"
        }
    ],
    "name":"SOMClustering",
    "outputs":["SOM Cluster"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00029:2"
}, "93":{
    "inputs":[
        {
            "description":"The dataset to display - .snp, .cn, .xcn",
            "choices":[],
            "kinds":["snp", "xcn", "cn"],
            "name":"dataset.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Sample information file",
            "choices":[],
            "kinds":[],
            "name":"sample.info.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Sample list file",
            "choices":[],
            "kinds":[],
            "name":"sample.list.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Maximum memory",
            "choices":[],
            "kinds":[],
            "name":"max.memory",
            "promptWhenRun":false,
            "defaultValue":"700m",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"SnpViewer",
    "outputs":[],
    "type":"visualizer",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00084:3"
}, "92":{
    "inputs":[
        {
            "description":"",
            "choices":[],
            "kinds":[],
            "name":"java.max.memory",
            "promptWhenRun":false,
            "defaultValue":"512m",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"The input file to analyze - .cn, .xcn, .snp, .txt",
            "choices":[],
            "kinds":["txt"],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Directory to save to",
            "choices":[],
            "kinds":[],
            "name":"save.dir",
            "promptWhenRun":false,
            "defaultValue":"./",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Number of permutations to use",
            "choices":[],
            "kinds":[],
            "name":"permutations",
            "promptWhenRun":false,
            "defaultValue":"500",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Number of MSA tests to use",
            "choices":[],
            "kinds":[],
            "name":"num.tests",
            "promptWhenRun":false,
            "defaultValue":"9",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Number of positions per bin",
            "choices":[],
            "kinds":[],
            "name":"num.positions.bin",
            "promptWhenRun":false,
            "defaultValue":"6",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"The size of the plotted chromosome diagram",
            "choices":[],
            "kinds":[],
            "name":"resolution",
            "promptWhenRun":false,
            "defaultValue":"250000",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Comma delimited list of chromosomes to analyze",
            "choices":[],
            "kinds":[],
            "name":"chromosomes",
            "promptWhenRun":false,
            "defaultValue":"chr22",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Saves images to the specified directory",
            "choices":[],
            "kinds":[],
            "name":"save.images",
            "promptWhenRun":false,
            "defaultValue":"./",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"The value at which a region is called significant",
            "choices":[],
            "kinds":[],
            "name":"significance.level",
            "promptWhenRun":false,
            "defaultValue":".05",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"The name of the job",
            "choices":[],
            "kinds":[],
            "name":"run.name",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"",
            "choices":["true=arms", "false=chromosomes"],
            "kinds":[],
            "name":"analyze.by",
            "promptWhenRun":false,
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Cytoband file to use",
            "choices":[],
            "kinds":[],
            "name":"cytoband.filename",
            "promptWhenRun":false,
            "defaultValue":"<libdir>CytoBands.txt",
            "required":true,
            "type":"java.io.File"
        }
    ],
    "name":"SNPMultipleSampleAnalysis",
    "outputs":[],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00106:1"
}, "91":{
    "inputs":[
        {
            "description":"snp file to sort",
            "choices":[],
            "kinds":["snp"],
            "name":"snp.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"output file name",
            "choices":[],
            "kinds":["snp"],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"<snp.filename_basename>.sorted.snp",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"SNPFileSorter",
    "outputs":["snp"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00096:1"
}, "90":{
    "inputs":[
        {
            "description":"Specify the chip type.",
            "choices":["Mapping50K_Hind240.cdf=50K Hind", "Mapping50K_Xba240.CDF=50K Xba", "Mapping250K_Sty.cdf=250K Sty", "Mapping250K_Nsp.cdf=250K NSP"],
            "kinds":["cdf"],
            "name":"chip.type",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Networked directory name where the CEL ( and optionally TXT) files reside.",
            "choices":[],
            "kinds":[],
            "name":"network.directory.name",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"A zip file containing CEL and optionally TXT files.",
            "choices":[],
            "kinds":["zip"],
            "name":"zip.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"The normalization method to apply.",
            "choices":["1=Quantile Normalization(dChip)", "2=Invariant Set Normalization(dChip)"],
            "kinds":[],
            "name":"normalization.method",
            "promptWhenRun":false,
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Reference method to use in normalization",
            "choices":["median=Median", "reference=Reference Supplied"],
            "kinds":[],
            "name":"reference.method",
            "promptWhenRun":false,
            "defaultValue":"median",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Reference file to use. Leave blank if reference method is median.",
            "choices":[],
            "kinds":[],
            "name":"reference.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"The summarization method to apply.",
            "choices":["1=Average Difference", "2=PM/MM Difference Model (dChip)", "3=Median Probe", "4=Trimmed Mean"],
            "kinds":[],
            "name":"model.method",
            "promptWhenRun":false,
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Create Allele Specific probe intensities",
            "choices":["yes=Allele-Specific", "no=Non Allele-Specific"],
            "kinds":[],
            "name":"allele.specific",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Sorts output file by Chromosome and location. Filters out probesets without location information",
            "choices":["yes=Sort", "no=Do no sort"],
            "kinds":[],
            "name":"sort.snp.file",
            "promptWhenRun":false,
            "defaultValue":"yes",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"The name of the output file.",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"SNPFileCreator",
    "outputs":["snp"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00086:1"
}, "180":{
    "inputs":[],
    "name":"copyOftestPreprocessThenHmv",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:53:1"
}, "10":{
    "inputs":[
        {
            "description":"Copy number file - .cn",
            "choices":[],
            "kinds":["cn"],
            "name":"input.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Number of permutations used for p-value computation",
            "choices":[],
            "kinds":[],
            "name":"permutations",
            "promptWhenRun":false,
            "defaultValue":"10000",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Significance levels for the test to accept change-points",
            "choices":[],
            "kinds":[],
            "name":"alpha",
            "promptWhenRun":false,
            "defaultValue":"0.01",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"The seed for the random number generator",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "promptWhenRun":false,
            "defaultValue":"12345678",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file.name",
            "promptWhenRun":false,
            "defaultValue":"<input.file_basename>.cbs.txt",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"CBS",
    "outputs":["cbs.txt"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00121:1"
}, "88":{
    "inputs":[
        {
            "description":"input file - .res, .gct, .snp, .cn, .loh, .odf, or .cls file from which the slice is extracted",
            "choices":[],
            "kinds":["gct", "res", "Dataset", "snp", "cn", "loh", "cls"],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"columns to select (e.g. 0-3, 5, 9). Either columns or a list file must be provided.",
            "choices":[],
            "kinds":[],
            "name":"columns",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"text file containing one identifier per line that specifies the columns to select. Either columns or a list file must be provided.",
            "choices":[],
            "kinds":[],
            "name":"list.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"output filename - .res, .gct, .snp, .cn, .loh, .odf, .cls",
            "choices":[],
            "kinds":[],
            "name":"output",
            "promptWhenRun":false,
            "defaultValue":"<input.filename_basename>.slice",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"SelectFeaturesColumns",
    "outputs":["gct", "res", "Dataset", "snp", "cn", "cls"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00021:4"
}, "89":{
    "inputs":[
        {
            "description":"input file - .res, .gct, .snp, .cn, .loh, or .odf file from which the slice is extracted",
            "choices":[],
            "kinds":["gct", "res", "Dataset", "snp", "cn", "loh"],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"text file containing one identifier per line that specifies the rows to select. ",
            "choices":[],
            "kinds":[],
            "name":"list.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"output filename - .res, .gct, .snp, .cn, .loh, .odf",
            "choices":[],
            "kinds":[],
            "name":"output",
            "promptWhenRun":false,
            "defaultValue":"<list.filename_basename>.slice",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"SelectFeaturesRows",
    "outputs":[],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00022:4"
}, "116":{
    "inputs":[
        {
            "description":"A BAM file",
            "choices":[],
            "kinds":["bam"],
            "name":"input.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"A label used to name the output file",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "promptWhenRun":false,
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"BamToSam",
    "outputs":["sam"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00252:1"
}, "117":{
    "inputs":[
        {
            "description":"Input file in EXPR format",
            "choices":[],
            "kinds":["expr"],
            "name":"input.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"A label that will be used to name the GCT output file.",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "promptWhenRun":false,
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"ExprToGct",
    "outputs":["gct"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00248:2"
}, "79":{
    "inputs":[
        {
            "description":"Zip file containing peak lists",
            "choices":[],
            "kinds":["zip"],
            "name":"peakList.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"CSV file with header: experiment, sample, class",
            "choices":[],
            "kinds":["csv"],
            "name":"sampleInfo.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Zip file containing the output from landmark matching.",
            "choices":[],
            "kinds":["zip"],
            "name":"LandmarkMatchOutput.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"m/z tolerance (ppm). Used if landmark match output is not supplied. Defaults to 10 ppm.",
            "choices":[],
            "kinds":[],
            "name":"MZ.tolerance",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"retention time tolerance (min). Used if landmark match is not supplied. Defaults to 2 min.",
            "choices":[],
            "kinds":[],
            "name":"RT.tolerance",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"File name prefix for the output files",
            "choices":[],
            "kinds":[],
            "name":"outputName",
            "promptWhenRun":false,
            "defaultValue":"PeakMatchOutput",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Number of processess when running in parallel. Defaults to 1 (sequential).",
            "choices":[],
            "kinds":[],
            "name":"numberProcesses",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Whether you are running on an LSF cluster version of GenePattern",
            "choices":["no", "yes"],
            "kinds":[],
            "name":"running.on.LSF",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"PeakMatch",
    "outputs":[],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00082:2"
}, "114":{
    "inputs":[
        {
            "description":"input filename - .res, .gct, .odf",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"PreprocessDataset1.input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        }
    ],
    "name":"jbkhjbkjbjk",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:15:2"
}, "78":{
    "inputs":[
        {
            "description":"pcl file to convert",
            "choices":[],
            "kinds":["pcl"],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"output gct file",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "promptWhenRun":false,
            "defaultValue":"<input.filename_basename>.gct",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"How to handle manually edited weights (weights not equal to 1) present in PCL file",
            "choices":["1=ignore weights", "2=multiply values by weights (altering biological data)", "3=print error if weights not equal to 1 present"],
            "kinds":[],
            "name":"weight.handling",
            "promptWhenRun":false,
            "defaultValue":"3",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"PclToGct",
    "outputs":["gct"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00151:1"
}, "115":{
    "inputs":[
        {
            "description":"input filename - .res, .gct, .odf",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"PreprocessDataset1.input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        }
    ],
    "name":"jbkhjbkjbjk",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:15:3"
}, "77":{
    "inputs":[
        {
            "description":"The dataset - .res, .gct",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"dataset.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"The s matrix - .odf",
            "choices":[],
            "kinds":["Matrix"],
            "name":"s.matrix.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"The t matrix - .odf",
            "choices":[],
            "kinds":["Matrix"],
            "name":"t.matrix.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"The u matrix - .odf",
            "choices":[],
            "kinds":["Matrix"],
            "name":"u.matrix.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"A cls or sample info file - .cls, .txt",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.or.sample.info.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"The name of the class column to use in the sample info file (required if sample info file provided)",
            "choices":[],
            "kinds":[],
            "name":"sample.info.class",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":""
        },
        {
            "description":"The feature set file - .gmt, .gmx, .grp",
            "choices":[],
            "kinds":["gmt", "gmx", "grp"],
            "name":"featureset.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        }
    ],
    "name":"PCAViewer",
    "outputs":[],
    "type":"visualizer",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00018:6"
}, "112":{
    "inputs":[],
    "name":"job102",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:13:1"
}, "113":{
    "inputs":[
        {
            "description":"input filename - .res, .gct, .odf",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"PreprocessDataset1.input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        }
    ],
    "name":"jbkhjbkjbjk",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:15:1"
}, "110":{
    "inputs":[
        {
            "description":"",
            "choices":[],
            "kinds":[],
            "name":"required",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"DIRECTORY"
        },
        {
            "description":"",
            "choices":[],
            "kinds":[],
            "name":"optional",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"DIRECTORY"
        }
    ],
    "name":"Test",
    "outputs":[],
    "type":"module",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:4:2"
}, "111":{
    "inputs":[],
    "name":"job91",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:12:2"
}, "118":{
    "inputs":[
        {
            "description":"Input file in FPKM_TRACKING format",
            "choices":[],
            "kinds":["fpkm_tracking"],
            "name":"input.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Select row labels to be written to GCT file",
            "choices":["tracking_id=Tracking ID", "nearest_ref_id=Nearest Reference Transcript ID", "gene_short_name=Gene Name", "tss_id=TSS ID", "locus=Locus"],
            "kinds":[],
            "name":"row.labels",
            "promptWhenRun":false,
            "defaultValue":"Tracking ID",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Select row descriptions to be written to GCT file",
            "choices":["locus=Locus", "tracking_id=Tracking ID", "nearest_ref_id=Nearest Reference Transcript ID", "gene_short_name=Gene Name", "tss_id=TSS ID", "class_code=Class Code"],
            "kinds":[],
            "name":"row.descriptions",
            "promptWhenRun":false,
            "defaultValue":"Locus",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Whether to filter rows with invalid row names (ie., \"-\")",
            "choices":["no=no", "yes=yes"],
            "kinds":[],
            "name":"filter.rows",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"A label that will be used to name the GCT output file.",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "promptWhenRun":false,
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"Fpkm_trackingToGct",
    "outputs":["gct", "fpkm_tracking"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00250:1"
}, "119":{
    "inputs":[
        {
            "description":"The input dataset - .res, .gct, .odf",
            "choices":[],
            "kinds":["gct", "res", "Dataset"],
            "name":"input.dataset",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"The output file name -.jpeg, .png, .tiff, .bmp, .eps",
            "choices":[],
            "kinds":[],
            "name":"output",
            "promptWhenRun":false,
            "defaultValue":"<input.dataset_basename>",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"The output file format",
            "choices":["jpeg", "png", "tiff", "bmp", "eps"],
            "kinds":[],
            "name":"output.format",
            "promptWhenRun":false,
            "defaultValue":"jpeg",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"The size in pixels of an element along the horizontal axis",
            "choices":[],
            "kinds":[],
            "name":"column.size",
            "promptWhenRun":false,
            "defaultValue":"8",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"The size in pixels of an element along the vertical axis",
            "choices":[],
            "kinds":[],
            "name":"row.size",
            "promptWhenRun":false,
            "defaultValue":"8",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Whether to show a grid between elements",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"show.grid",
            "promptWhenRun":false,
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"The grid color",
            "choices":["0:0:0=black", "128:128:128=grey", "255:255:255=white"],
            "kinds":[],
            "name":"grid.color",
            "promptWhenRun":false,
            "defaultValue":"black",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Whether to show row descriptions",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"show.row.descriptions",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Whether to show row names",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"show.row.names",
            "promptWhenRun":false,
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Rows to highlight in the heat map",
            "choices":[],
            "kinds":[],
            "name":"rows.to.highlight",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"The color to highlight the rows if a rows to highlight file is provided",
            "choices":["255:0:0=red", "255:255:0=yellow", "0:0:255=blue"],
            "kinds":[],
            "name":"row.highlight.color",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"The color scheme",
            "choices":["row normalized", "global"],
            "kinds":[],
            "name":"color.scheme",
            "promptWhenRun":false,
            "defaultValue":"row normalized",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Color palette consisting of one r:g:b triplet or one hex value per line",
            "choices":[],
            "kinds":[],
            "name":"color.palette",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Whether to use a linear color gradient or discrete colors",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"use.color.gradient",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        }
    ],
    "name":"HeatMapImage",
    "outputs":["jpeg", "png", "tiff", "bmp", "eps"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00032:6"
}, "82":{
    "inputs":[
        {
            "description":"Prediction results - .odf",
            "choices":[],
            "kinds":["Prediction Results"],
            "name":"prediction.results.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        }
    ],
    "name":"PredictionResultsViewer",
    "outputs":[],
    "type":"visualizer",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00019:4"
}, "83":{
    "inputs":[
        {
            "description":"input filename - .res, .gct, .odf",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Output file with preprocessed dataset",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"<input.filename_basename>.preprocessed",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"output file format",
            "choices":["0=gct", "1=res", "2=odf", "3=same as input"],
            "kinds":[],
            "name":"output.file.format",
            "promptWhenRun":false,
            "defaultValue":"3",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Variation filter and thresholding flag",
            "choices":["0=no filter", "1=filter"],
            "kinds":[],
            "name":"filter.flag",
            "promptWhenRun":false,
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Discretization or normalization flag",
            "choices":["1=discretize", "0=no disc or norm", "2=row normalization"],
            "kinds":[],
            "name":"preprocessing.flag",
            "promptWhenRun":false,
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Minimum fold change for filter",
            "choices":[],
            "kinds":[],
            "name":"minchange",
            "promptWhenRun":false,
            "defaultValue":"3",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Minimum delta for filter",
            "choices":[],
            "kinds":[],
            "name":"mindelta",
            "promptWhenRun":false,
            "defaultValue":"100",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Value for thresholding",
            "choices":[],
            "kinds":[],
            "name":"threshold",
            "promptWhenRun":false,
            "defaultValue":"20",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Value for ceiling",
            "choices":[],
            "kinds":[],
            "name":"ceiling",
            "promptWhenRun":false,
            "defaultValue":"20000",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Maximum sigma for binning",
            "choices":[],
            "kinds":[],
            "name":"max.sigma.binning",
            "promptWhenRun":false,
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Value for uniform probability threshold filter: 1 (default)",
            "choices":[],
            "kinds":[],
            "name":"prob.thres",
            "promptWhenRun":false,
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Number of experiments to exclude (max & min) before applying variation filter",
            "choices":[],
            "kinds":[],
            "name":"num.excl",
            "promptWhenRun":false,
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Whether to take the log base two after thresholding",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"log.base.two",
            "promptWhenRun":false,
            "defaultValue":"false",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Remove row if n columns not >= than given threshold",
            "choices":[],
            "kinds":[],
            "name":"number.of.columns.above.threshold",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Threshold for removing rows",
            "choices":[],
            "kinds":[],
            "name":"column.threshold",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float"
        }
    ],
    "name":"PreprocessDataset",
    "outputs":["res", "gct", "Dataset"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00020:3"
}, "80":{
    "inputs":[
        {
            "description":"spectrum data file - .csv",
            "choices":[],
            "kinds":["csv"],
            "name":"spectrum.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Minimum M/Z to include",
            "choices":[],
            "kinds":[],
            "name":"low.Da",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"Maximum M/Z to include",
            "choices":[],
            "kinds":[],
            "name":"high.Da",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"After applying filters, threshold above which peaks are located",
            "choices":[],
            "kinds":[],
            "name":"percentile",
            "promptWhenRun":false,
            "defaultValue":"0.65",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"Size of the smoothing filter",
            "choices":[],
            "kinds":[],
            "name":"smoothing.size",
            "promptWhenRun":false,
            "defaultValue":"21",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"Strength of the adaptive background correction filter",
            "choices":[],
            "kinds":[],
            "name":"adaptive.background.correction.strength",
            "promptWhenRun":false,
            "defaultValue":"0.75",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"Size of the adaptive background correction filter",
            "choices":[],
            "kinds":[],
            "name":"adaptive.background.correction.size",
            "promptWhenRun":false,
            "defaultValue":"21",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"Strength of the high pass filter",
            "choices":[],
            "kinds":[],
            "name":"high.pass.filter.strength",
            "promptWhenRun":false,
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"Filter factor for the high pass filter",
            "choices":[],
            "kinds":[],
            "name":"high.pass.filter.factor",
            "promptWhenRun":false,
            "defaultValue":"5",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"<spectrum.filename_basename>.peaks.odf",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"Peaks",
    "outputs":["Spectrum Peaks"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00050:2"
}, "81":{
    "inputs":[
        {
            "description":"The output from the Peaks module",
            "choices":[],
            "kinds":["Spectrum Peaks"],
            "name":"peaks.output.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"<peaks.output.filename_basename>.pdf",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"PlotPeaks",
    "outputs":["pdf"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00053:2"
}, "86":{
    "inputs":[
        {
            "description":"Input file (gct, res)",
            "choices":[],
            "kinds":["gct, res"],
            "name":"input.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Remove rows, columns, or both containing missing values",
            "choices":["1=rows", "2=cols", "3=both"],
            "kinds":[],
            "name":"remove.opt",
            "promptWhenRun":false,
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"output file",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "promptWhenRun":false,
            "defaultValue":"<input.file_basename>.na-rm.gct",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"RemoveMissingValues",
    "outputs":["gct"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00184:1"
}, "87":{
    "inputs":[
        {
            "description":"Expression data - .res, .gct, .odf",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"expression.data.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Class file - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"class.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Name of expression data output file",
            "choices":[],
            "kinds":[],
            "name":"expression.data.file.output.name",
            "promptWhenRun":false,
            "defaultValue":"<expression.data.filename_basename>_reordered",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Name of class output file",
            "choices":[],
            "kinds":[],
            "name":"class.file.output.name",
            "promptWhenRun":false,
            "defaultValue":"<class.filename>_reordered",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"ReorderByClass",
    "outputs":[],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00033:2"
}, "84":{
    "inputs":[
        {
            "description":"zip file of LC-MS runs in mzXML format.",
            "choices":[],
            "kinds":["zip"],
            "name":"input.zip.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"output filename",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"<input.zip.filename_basename>.prot",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"ProteoArray",
    "outputs":["gct"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00068:1"
}, "85":{
    "inputs":[
        {
            "description":"Zip file containing spectra data. Spectra data are stored as M/Z,Intensity",
            "choices":[],
            "kinds":["zip"],
            "name":"zip.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"The base name for output files",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"<zip.filename_basename>",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"discard spectra with quality < quality threshold",
            "choices":[],
            "kinds":[],
            "name":"quality.threshold",
            "promptWhenRun":false,
            "defaultValue":"0.45",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"whether to fill missing peaks",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"fill.na",
            "promptWhenRun":false,
            "defaultValue":"yes",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"normalization strategy",
            "choices":["tan", "tin", "01", "none"],
            "kinds":[],
            "name":"normalize",
            "promptWhenRun":false,
            "defaultValue":"tan",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"peak detection method",
            "choices":["detect", "input", "random"],
            "kinds":[],
            "name":"peak.detection.method",
            "promptWhenRun":false,
            "defaultValue":"detect",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"filter peaks based on peak intensity / noise ",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"filter.peaks",
            "promptWhenRun":false,
            "defaultValue":"yes",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"retains peaks if peak intensity >= filter.peaks.factor * stdev(noise)",
            "choices":[],
            "kinds":[],
            "name":"filter.peaks.factor",
            "promptWhenRun":false,
            "defaultValue":"10",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"file containing one M/Z per line when peaks=input",
            "choices":[],
            "kinds":[],
            "name":"peak.list.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"random seed when peaks=random",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"number of random M/Z's selected when peaks=random",
            "choices":[],
            "kinds":[],
            "name":"random.n.peaks",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Minimum M/Z to include",
            "choices":[],
            "kinds":[],
            "name":"low.Da",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"Maximum M/Z to include",
            "choices":[],
            "kinds":[],
            "name":"high.Da",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"After applying filters, threshold above which peaks are located",
            "choices":[],
            "kinds":[],
            "name":"percentile",
            "promptWhenRun":false,
            "defaultValue":"0.65",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"Size of the smoothing filter",
            "choices":[],
            "kinds":[],
            "name":"smoothing.size",
            "promptWhenRun":false,
            "defaultValue":"21",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"Strength of the adaptive background correction filter",
            "choices":[],
            "kinds":[],
            "name":"adaptive.background.correction.strength",
            "promptWhenRun":false,
            "defaultValue":"0.75",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"Size of the adaptive background correction filter",
            "choices":[],
            "kinds":[],
            "name":"adaptive.background.correction.size",
            "promptWhenRun":false,
            "defaultValue":"21",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"Strength of the high pass filter",
            "choices":[],
            "kinds":[],
            "name":"high.pass.filter.strength",
            "promptWhenRun":false,
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"Filter factor for the high pass filter",
            "choices":[],
            "kinds":[],
            "name":"high.pass.filter.factor",
            "promptWhenRun":false,
            "defaultValue":"5",
            "required":true,
            "type":"java.lang.Float"
        }
    ],
    "name":"ProteomicsAnalysis",
    "outputs":["gct", "EM Gaussian Mixtures", "Actual Peaks to EM-matched Peaks", "Actual Peaks", "Proteomics Analysis Statistics"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00048:2"
}, "125":{
    "inputs":[
        {
            "description":"Input file in TMAP format",
            "choices":[],
            "kinds":["tmap"],
            "name":"input.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Select row labels to be written to GCT file",
            "choices":["ref_gene_id=Reference gene name", "ref_id=Reference transcript ID", "cuff_gene_id=Cufflinks gene ID", "cuff_id=Cufflinks transcript ID", "major_iso_id=Major isoform ID"],
            "kinds":[],
            "name":"row.labels",
            "promptWhenRun":false,
            "defaultValue":"Cufflinks gene ID",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Select row descriptions to be written to GCT file",
            "choices":["ref_gene_id=Reference gene name", "ref_id=Reference transcript ID", "cuff_gene_id=Cufflinks gene ID", "cuff_id=Cufflinks transcript ID", "major_iso_id=Major isoform ID"],
            "kinds":[],
            "name":"row.descriptions",
            "promptWhenRun":false,
            "defaultValue":"Cufflinks transcript ID",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Filter rows with invalid row names (ie., \"-\") ",
            "choices":["no=no", "yes=yes"],
            "kinds":[],
            "name":"filter.rows",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"A label that will be used to name the GCT output file",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "promptWhenRun":false,
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"TmapToGct",
    "outputs":["gct"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00249:1"
}, "67":{
    "inputs":[
        {
            "description":"The dataset file - .res, .gct",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"input.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"A list of possible modulator genes to analyze - .txt",
            "choices":[],
            "kinds":["txt"],
            "name":"modulator.list",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"List of transcription factors in dataset - .txt",
            "choices":[],
            "kinds":["txt"],
            "name":"dpi.transcription.factor.list",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Transcription factor",
            "choices":[],
            "kinds":[],
            "name":"transcription.factor",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Percentage of samples to use in analysis (must be <=50)",
            "choices":[],
            "kinds":[],
            "name":"sample.percentage",
            "promptWhenRun":false,
            "defaultValue":"35.0",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"Conditional mutual information (MI) score threshold (number between 0 and 1)",
            "choices":[],
            "kinds":[],
            "name":"conditional.mi.threshold",
            "promptWhenRun":false,
            "defaultValue":"0.0",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"Conditional mutual info p-value threshold (ignored if conditonal MI threshold >0)",
            "choices":[],
            "kinds":[],
            "name":"conditional.mi.p.value",
            "promptWhenRun":false,
            "defaultValue":"1.0",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"The data processing inequality tolerance (number between 0 and 1)",
            "choices":[],
            "kinds":[],
            "name":"dpi.tolerance",
            "promptWhenRun":false,
            "defaultValue":"1.0",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"Unconditional mutual information (MI) score threshold (number between 0 and 1)",
            "choices":[],
            "kinds":[],
            "name":"unconditional.mi.threshold",
            "promptWhenRun":false,
            "defaultValue":"0.0",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"Unconditional mutual information p-value threshold (ignored if unconditonal MI threshold >0)",
            "choices":[],
            "kinds":[],
            "name":"unconditional.mi.p.value",
            "promptWhenRun":false,
            "defaultValue":"1.0",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"Output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"<input.file_basename>.mindy",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"MINDY",
    "outputs":["res", "gct"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00107:2"
}, "126":{
    "inputs":[
        {
            "description":"A prebuilt bowtie index. Either a prebuilt or a custom Bowtie index must be specified.",
            "choices":["none=", "a_thaliana=A. Thaliana", "b_taurus=B. Taurus", "e_coli=E. Coli", "c_elegans_ws200=C. Elegans, WormBase WS200", "hg19=H. sapiens, UCSC hg19", "hg18=H. sapiens, UCSC hg18", "mm9=M. musculus, UCSC mm9", "mm8=M. musculus, UCSC mm8", "m_musculus_ncbi37=M. musculus, NCBI 37", "s_cerevisiae= S. cerevisiae"],
            "kinds":[],
            "name":"prebuilt.bowtie.index",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"A ZIP archive containing Bowtie index files. Either a prebuilt or a custom Bowtie index must be specified.",
            "choices":[],
            "kinds":["zip"],
            "name":"custom.bowtie.index",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Unpaired reads file or first mate for paired reads. A file or zip of files containing reads in FASTA or FASTQ format.",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "zip"],
            "name":"reads.pair.1",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Second mate for paired reads. A file or zip of files in FASTA or FASTQ format.",
            "choices":[],
            "kinds":["fn", "fa", "fastq", "zip"],
            "name":"reads.pair.2",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"The expected mean inner distance between mate pairs. This parameter is required for paired-end runs and must be an integer.",
            "choices":[],
            "kinds":[],
            "name":"mate.inner.dist",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"The standard deviation for the distribution on inner distances between mate pairs.",
            "choices":[],
            "kinds":[],
            "name":"mate.std.dev",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Library type for strand specific reads.",
            "choices":["None=", "fr-unstranded=Standard Illumina (fr-unstranded)", "fr-firststrand=dUTP, NSR, NNSR (fr-firststrand)", "fr-secondstrand=Ligation, Standard SOLiD (fr-secondstrand)"],
            "kinds":[],
            "name":"library.type",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"A GTF file (v. 2.2 or higher) containing a list of gene model annotations. The exon records in this file will be used to build a set of known splice junctions for each gene and to attempt to align reads to these junctions even if they would not normally be covered by the initial mapping.",
            "choices":[],
            "kinds":["gtf"],
            "name":"GTF.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"A file containing raw junctions. Junctions are specified one per line, in a tab-delimited format.",
            "choices":[],
            "kinds":["juncs"],
            "name":"raw.junctions.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"If no, then only look for junctions indicated in the supplied GFF file. (Ignored when no GTF file is specified).",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"find.novel.junctions",
            "promptWhenRun":false,
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"The anchor length. This value must be at least 3.",
            "choices":[],
            "kinds":[],
            "name":"min.anchor.length",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"The maximum number of mismatches that may appear in the \"anchor\" region of a spliced alignment.",
            "choices":[],
            "kinds":[],
            "name":"splice.mismatches",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"The minimum intron length. TopHat will ignore donor/acceptor pairs closer than this many bases apart.",
            "choices":[],
            "kinds":[],
            "name":"min.intron.length",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"The maximum intron length. When searching for junctions ab initio, TopHat will ignore donor/acceptor pairs farther than this many bases apart, except when such a pair is supported by a split segment alignment of a long read.",
            "choices":[],
            "kinds":[],
            "name":"max.intron.length",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Use the Solexa scale for quality values in FASTQ files.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"use.solexa.scale",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"As of the Illumina GA pipeline version 1.3, quality scores are encoded in Phred-scaled base-64. Use this option for FASTQ files from pipeline 1.3 or later.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"use.solexa.1.3.scale",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Separate quality value files - colorspace read files (CSFASTA) come with separate qual files.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"separate.qual.files",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Quality values are space-delimited integer values, this becomes default when you specify color option.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"integer.quals",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Colorspace reads. Requires a color space bowtie index.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"colorspace.reads",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Filters out junctions supported by too few alignments. Suppose a junction spanning two exons, is supported by S reads. Let the average depth of coverage of exon A be D, and assume that it is higher than B. If S / D is less than the minimum isoform fraction, the junction is not reported. A value of zero disables the filter.",
            "choices":[],
            "kinds":[],
            "name":"min.isoform.fraction",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Allows up to the specified alignments to the reference for a given read, and suppresses all alignments for reads with more than this many alignments.",
            "choices":[],
            "kinds":[],
            "name":"max.multihits",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Enables or disables the mate pair closure-based search for junctions. Closure-based search should only be used when the expected inner distance between mates is small (<= 50bp).",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"closure.search",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Enables or disables the coverage based search for junctions. Use when coverage search is disabled by default (such as for reads 75bp or longer), for maximum sensitivity.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"coverage.search",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Attempts to find alignments incident to microexons. Works only for reads 50bp or longer.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"microexon.search",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Enables or disables a slower, but potentially more sensitive algorithm to find junctions in addition to its standard search. Consider using this if you expect that your experiment produced a lot of reads from pre-mRNA, that fall within the introns of your transcripts.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"butterfly.search",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Specify how many parallel search threads to launch. All threads find alignments in parallel, increasing alignment throughput by approximately a multiple of the number of threads.",
            "choices":[],
            "kinds":[],
            "name":"num.threads",
            "promptWhenRun":false,
            "defaultValue":"8",
            "required":false,
            "type":"java.lang.Integer"
        }
    ],
    "name":"TopHat",
    "outputs":["bam", "bed"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00230:3"
}, "66":{
    "inputs":[
        {
            "description":"The model .gct data file",
            "choices":[],
            "kinds":["gct"],
            "name":"model.gct.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"The model .cls data file",
            "choices":[],
            "kinds":["cls"],
            "name":"model.cls.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"The pre-processing parameters for the model dataset",
            "choices":[],
            "kinds":["txt"],
            "name":"model.preprocessing.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"The test .gct or zip of .gct data files",
            "choices":[],
            "kinds":["gct"],
            "name":"test.gct.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"The test .cls or zip of .cls data files",
            "choices":[],
            "kinds":["cls"],
            "name":"test.cls.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"The pre-processing parameters for the test dataset",
            "choices":[],
            "kinds":["txt"],
            "name":"test.preprocessing.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Number of characters to use to identify classes from the .cls files",
            "choices":[],
            "kinds":[],
            "name":"num.characters",
            "promptWhenRun":false,
            "defaultValue":"9",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Prefix to name output files",
            "choices":[],
            "kinds":[],
            "name":"identifier",
            "promptWhenRun":false,
            "defaultValue":"<model.gct.file_basename>.output",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Number of metagenes in projection",
            "choices":[],
            "kinds":[],
            "name":"k.projection",
            "promptWhenRun":false,
            "defaultValue":"3",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Algorithm for Metagene Projection",
            "choices":["NMF.div=NMF w/ divergence", "NMF=NMF", "NSNMF.div=NSNMF w/ divergence", "SNMF=SNMF", "PCA=PCA"],
            "kinds":[],
            "name":"algorithm",
            "promptWhenRun":false,
            "defaultValue":"NMF.div",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Number of algorithm iterations",
            "choices":[],
            "kinds":[],
            "name":"number.of.iterations",
            "promptWhenRun":false,
            "defaultValue":"2000",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Random seed to initialize metagene matrices (Note: results may only be reproducible on the same platform)",
            "choices":[],
            "kinds":[],
            "name":"seed",
            "promptWhenRun":false,
            "defaultValue":"1234",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"apply post-projection normalization",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"post.projection.normalization",
            "promptWhenRun":false,
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"row-normalize (standardize) the rows in the heat map",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"heatmap.row.norm",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"",
            "choices":["1=vintage pinkogram", "2=scale of grays", "4=high resolution pinkogram", "6=reddish color map"],
            "kinds":[],
            "name":"heatmap.color.scheme",
            "promptWhenRun":false,
            "defaultValue":"reddish color map",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Confidence threshold (Brier score) to separate call from no-calls",
            "choices":[],
            "kinds":[],
            "name":"confidence.threshold",
            "promptWhenRun":false,
            "defaultValue":"0.3",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"Plotting colors for phenotypes",
            "choices":[],
            "kinds":["txt"],
            "name":"phenotype.plotting.colors",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Plotting symbols for phenotypes",
            "choices":[],
            "kinds":["txt"],
            "name":"phenotype.plotting.symbols",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Graphical scaling for symbols in plots and plot legends",
            "choices":[],
            "kinds":[],
            "name":"symbol.scaling",
            "promptWhenRun":false,
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Kernel function for SVM",
            "choices":["radial=radial", "linear=linear"],
            "kinds":[],
            "name":"kernel",
            "promptWhenRun":false,
            "defaultValue":"radial",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"cost function for SVM",
            "choices":[],
            "kinds":[],
            "name":"cost",
            "promptWhenRun":false,
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Gamma coefficient for radial base function kernel",
            "choices":[],
            "kinds":[],
            "name":"gamma",
            "promptWhenRun":false,
            "defaultValue":"0.05",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Smoothing parameter only used for the NSNMF.div algorithm",
            "choices":[],
            "kinds":[],
            "name":"theta",
            "promptWhenRun":false,
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Sparse parameter used only for the SNMF algorithm",
            "choices":[],
            "kinds":[],
            "name":"lambda",
            "promptWhenRun":false,
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"perform model set refinement",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"model.set.refinement",
            "promptWhenRun":false,
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String"
        }
    ],
    "name":"MetageneProjection",
    "outputs":[],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00092:1"
}, "127":{
    "inputs":[],
    "name":"outter",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:17:2"
}, "69":{
    "inputs":[
        {
            "description":"File created by MultiplotPreprocess (.zip)",
            "choices":[],
            "kinds":["zip"],
            "name":"input.file.name",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Smaller one plot visualizer or bigger two plot",
            "choices":["1=one plot", "2=two plots"],
            "kinds":[],
            "name":"number.of.plots",
            "promptWhenRun":false,
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Path to GO Table for Gene Ontology highlighting",
            "choices":[],
            "kinds":["txt"],
            "name":"path.to.gotable",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"File with settings from a saved multiplot session",
            "choices":[],
            "kinds":[],
            "name":"plot.settings",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        }
    ],
    "name":"Multiplot",
    "outputs":[],
    "type":"visualizer",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00099:1"
}, "128":{
    "inputs":[],
    "name":"inner",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:16:1"
}, "68":{
    "inputs":[
        {
            "description":"The dataset file - .res, .gct",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"dataset.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Output from MINDY- .mindy",
            "choices":[],
            "kinds":["mindy"],
            "name":"mindy.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        }
    ],
    "name":"MINDYViewer",
    "outputs":["mindy"],
    "type":"visualizer",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00110:1"
}, "121":{
    "inputs":[
        {
            "description":"Alignment file in SAM or BAM format, sorted by start position",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"alignment.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Index file for alignment file, in SAI or BAI format. The index file must have the same root name as the alignment file. (Example: foo.sam and foo.sam.sai OR foo.sai) ",
            "choices":[],
            "kinds":["sai", "bai"],
            "name":"alignment.index.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"File containing sizes of chromosomes",
            "choices":[],
            "kinds":["txt", "rtf"],
            "name":"chromosome.size.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Selected chromosome, e.g., chr19",
            "choices":[],
            "kinds":[],
            "name":"chromosome",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Chromosome sequence in FASTA format",
            "choices":[],
            "kinds":["fa", "fasta"],
            "name":"chromosome.sequence.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"A label that will be used to name output files",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "promptWhenRun":false,
            "defaultValue":"<alignment.file_basename>",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"Scripture",
    "outputs":["enrichment.gct", "rpkm.gct", "readsperbase.gct", "totalreads.gct", "introns.bed", "bed", "segments", "dot"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00232:1"
}, "122":{
    "inputs":[
        {
            "description":"A prebuilt bowtie index. Either a prebuilt or a custom Bowtie index must be specified.",
            "choices":["none=", "a_thaliana=A. Thaliana", "b_taurus=B. Taurus", "e_coli=E. Coli", "c_elegans_ws200=C. Elegans, WormBase WS200", "hg19=H. sapiens, UCSC hg19", "hg18=H. sapiens, UCSC hg18", "mm9=M. musculus, UCSC mm9", "mm8=M. musculus, UCSC mm8", "m_musculus_ncbi37=M. musculus, NCBI 37", "s_cerevisiae= S. cerevisiae"],
            "kinds":[],
            "name":"TopHat1.prebuilt.bowtie.index",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"A ZIP archive containing Bowtie index files. Either a prebuilt or a custom Bowtie index must be specified.",
            "choices":[],
            "kinds":["zip"],
            "name":"TopHat1.custom.bowtie.index",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Unpaired reads file or first mate for paired reads. A file or zip of files containing reads in FASTA or FASTQ format.",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "zip"],
            "name":"TopHat1.reads.pair.1",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Second mate for paired reads. A file or zip of files in FASTA or FASTQ format.",
            "choices":[],
            "kinds":["fn", "fa", "fastq", "zip"],
            "name":"TopHat1.reads.pair.2",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"The expected mean inner distance between mate pairs. This parameter is required for paired-end runs and must be an integer.",
            "choices":[],
            "kinds":[],
            "name":"TopHat1.mate.inner.dist",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"The standard deviation for the distribution on inner distances between mate pairs.",
            "choices":[],
            "kinds":[],
            "name":"TopHat1.mate.std.dev",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Library type for strand specific reads.",
            "choices":["None=", "fr-unstranded=Standard Illumina (fr-unstranded)", "fr-firststrand=dUTP, NSR, NNSR (fr-firststrand)", "fr-secondstrand=Ligation, Standard SOLiD (fr-secondstrand)"],
            "kinds":[],
            "name":"TopHat1.library.type",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Quality values are space-delimited integer values, this becomes default when you specify color option.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"TopHat1.integer.quals",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"File containing sizes of chromosomes",
            "choices":[],
            "kinds":["txt", "rtf"],
            "name":"Scripture3.chromosome.size.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Selected chromosome, e.g., chr19",
            "choices":[],
            "kinds":[],
            "name":"Scripture3.chromosome",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Chromosome sequence in FA format",
            "choices":[],
            "kinds":["fa"],
            "name":"Scripture3.chromosome.sequence.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"A label that will be used to name output files",
            "choices":[],
            "kinds":[],
            "name":"Scripture3.output.prefix",
            "promptWhenRun":false,
            "defaultValue":"<alignment.file_basename>",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"ScripturePipeline",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.pipeline:00012:1"
}, "123":{
    "inputs":[
        {
            "description":"Input file in SAM or BAM format",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"SortSam1.input.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"File containing sizes of chromosomes",
            "choices":[],
            "kinds":["txt", "rtf"],
            "name":"Scripture2.chromosome.size.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Selected chromosome, e.g., chr19",
            "choices":[],
            "kinds":[],
            "name":"Scripture2.chromosome",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Chromosome sequence in FA format",
            "choices":[],
            "kinds":["fa"],
            "name":"Scripture2.chromosome.sequence.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"A label that will be used to name output files",
            "choices":[],
            "kinds":[],
            "name":"Scripture2.output.prefix",
            "promptWhenRun":false,
            "defaultValue":"<alignment.file_basename>",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"ScripturePrealigned",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.pipeline:00013:1"
}, "124":{
    "inputs":[
        {
            "description":"Input file in SAM or BAM format",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"input.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Sort order.",
            "choices":["coordinate=coordinate", "queryname=queryname", "unsorted=unsorted"],
            "kinds":[],
            "name":"sort.order",
            "promptWhenRun":false,
            "defaultValue":"coordinate",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Name of output SAM or BAM file",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "promptWhenRun":false,
            "defaultValue":"<input.file_basename>.sorted.<input.file_extension>",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"SortSam",
    "outputs":["sam", "bam", "bai"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00245:2"
}, "129":{
    "inputs":[
        {
            "description":"A bed file",
            "choices":[],
            "kinds":["bed"],
            "name":"bed.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Whether to output a gff file or exon only gtf file. The bed file must contain at least 12 columns in order to generate a gtf file.",
            "choices":["gff", "gtf"],
            "kinds":[],
            "name":"output.format",
            "promptWhenRun":false,
            "defaultValue":"gtf",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"The prefix for the output file",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "promptWhenRun":false,
            "defaultValue":"<bed.file_basename>",
            "required":true,
            "type":"java.land.String"
        }
    ],
    "name":"BedToGtf",
    "outputs":["gtf", "gff"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00251:1"
}, "70":{
    "inputs":[
        {
            "description":"File created by MultiplotPreprocess (.zip)",
            "choices":[],
            "kinds":["zip"],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        }
    ],
    "name":"MultiplotExtractor",
    "outputs":[],
    "type":"visualizer",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00100:1"
}, "120":{
    "inputs":[
        {
            "description":"A SAM file",
            "choices":[],
            "kinds":["sam"],
            "name":"input.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"A label used to name the output file",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "promptWhenRun":false,
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"SamToBam",
    "outputs":["bam"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00234:1"
}, "71":{
    "inputs":[
        {
            "description":"File with data to prepare for plotting (gct)",
            "choices":[],
            "kinds":["gct", "res"],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Class file for this data (cls)",
            "choices":[],
            "kinds":["cls"],
            "name":"class.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Name of file to create for use in Multiplot visualizer",
            "choices":[],
            "kinds":["zip"],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"<input.filename_basename>.zip",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Whether to compute fold changes between each replicate (turning this on can slow your work).",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"replicateFC",
            "promptWhenRun":false,
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Whether to create random expression data (and fold changes, etc for this data). Turning this on can slow your work",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"randomData",
            "promptWhenRun":false,
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Remove outlier replicate values of genes from processing (see \"Help\" for details)",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"outlierElimination",
            "promptWhenRun":false,
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Perform t-test, Hochberg p-value adjustment, and significance comparison to randomized data",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"doStats",
            "promptWhenRun":false,
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"MultiplotPreprocess",
    "outputs":["zip"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00098:1"
}, "72":{
    "inputs":[
        {
            "description":"input filename - .mzXML",
            "choices":[],
            "kinds":["mzXML"],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"output file containing zip of csv files",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"<input.filename_basename>.zip",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"mzXMLToCsv",
    "outputs":["zip"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00069:1"
}, "73":{
    "inputs":[
        {
            "description":"Gene expression data set (.gct)",
            "choices":[],
            "kinds":[],
            "name":"input.exp.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"List of marker genes (.txt): Probe ID, Gene name, Class (1,2,...), Weight (optional)",
            "choices":[],
            "kinds":[],
            "name":"input.features.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Name for output files",
            "choices":[],
            "kinds":[],
            "name":"output.name",
            "promptWhenRun":false,
            "defaultValue":"NTP",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Distance metric",
            "choices":["cosine=cosine", "correlation=correlation"],
            "kinds":[],
            "name":"distance.selection",
            "promptWhenRun":false,
            "defaultValue":"cosine",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Weight genes? (by statistic, fold change, etc. only for 2 classes)",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"weight.genes",
            "promptWhenRun":false,
            "defaultValue":"T",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"# resampling to generate null distribution for distance metric",
            "choices":[],
            "kinds":[],
            "name":"num.resamplings",
            "promptWhenRun":false,
            "defaultValue":"1000",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Create .gct and .cls files for GenePattern",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"GenePattern.output",
            "promptWhenRun":false,
            "defaultValue":"F",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Random seed",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "promptWhenRun":false,
            "defaultValue":"7392854",
            "required":true,
            "type":"java.lang.Integer"
        }
    ],
    "name":"NearestTemplatePrediction",
    "outputs":["gct", "png", "txt"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00166:1"
}, "74":{
    "inputs":[
        {
            "description":"Input file in GCT format with input data (V matrix) (GCT format only). e.g. ALL_vs_AML.gct",
            "choices":[],
            "kinds":["gct"],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Output log file. e.g. NMF.log",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"<input.filename_basename>.log",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Number of NMF factors. e.g. 2, 4, 10",
            "choices":[],
            "kinds":[],
            "name":"nfact",
            "promptWhenRun":false,
            "defaultValue":"4",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Number of NMF iterations. e.g. 100, 250, 500",
            "choices":[],
            "kinds":[],
            "name":"niter",
            "promptWhenRun":false,
            "defaultValue":"100",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Print matrices in output for debug",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"print.dump",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Column normalization flag",
            "choices":["0=no normalization", "1=normalization"],
            "kinds":[],
            "name":"cnorm.flag",
            "promptWhenRun":false,
            "defaultValue":"no normalization",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Row normalization flag",
            "choices":["0=no normalization", "1=normalization"],
            "kinds":[],
            "name":"rnorm.flag",
            "promptWhenRun":false,
            "defaultValue":"no normalization",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Global additive shift after normalization. e.g. 1, 4",
            "choices":[],
            "kinds":[],
            "name":"gshift",
            "promptWhenRun":false,
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Type of normalization",
            "choices":["0=standardize", "1=rescale: min=0, max=1"],
            "kinds":[],
            "name":"norm.type",
            "promptWhenRun":false,
            "defaultValue":"standardize",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Random seed used to initialize W and H matrices by the randon number generator. e.g. 4585, 4567, 5980",
            "choices":[],
            "kinds":[],
            "name":"seed",
            "promptWhenRun":false,
            "defaultValue":"12345",
            "required":false,
            "type":"java.lang.Integer"
        }
    ],
    "name":"NMF",
    "outputs":[],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00016:2"
}, "75":{
    "inputs":[
        {
            "description":"Input dataset (gct or res)",
            "choices":[],
            "kinds":[],
            "name":"dataset.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Initial value of K",
            "choices":[],
            "kinds":[],
            "name":"k.initial",
            "promptWhenRun":false,
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Final value of K",
            "choices":[],
            "kinds":[],
            "name":"k.final",
            "promptWhenRun":false,
            "defaultValue":"5",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Number of clusterings per value of K",
            "choices":[],
            "kinds":[],
            "name":"num.clusterings",
            "promptWhenRun":false,
            "defaultValue":"20",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Maximum number of NMF iterations per clustering",
            "choices":[],
            "kinds":[],
            "name":"max.num.iterations",
            "promptWhenRun":false,
            "defaultValue":"2000",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Error function",
            "choices":["divergence", "euclidean"],
            "kinds":[],
            "name":"error.function",
            "promptWhenRun":false,
            "defaultValue":"divergence",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Seed for random number generator",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "promptWhenRun":false,
            "defaultValue":"123456789",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Prefix to append to all output files",
            "choices":[],
            "kinds":[],
            "name":"output.file.prefix",
            "promptWhenRun":false,
            "defaultValue":"<dataset.filename_basename>",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"How many \"no change\" checks are needed to stop NMF iterations before max iterations is reached(convergence)",
            "choices":[],
            "kinds":[],
            "name":"stop.convergence",
            "promptWhenRun":false,
            "defaultValue":"40",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Frequency (NMF iterations) of \"no change\" checks",
            "choices":[],
            "kinds":[],
            "name":"stop.frequency",
            "promptWhenRun":false,
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Integer"
        }
    ],
    "name":"NMFConsensus",
    "outputs":[],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00057:4"
}, "76":{
    "inputs":[
        {
            "description":"input file - .gct, .res, .odf",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Cluster by rows or columns",
            "choices":["1=rows", "3=columns"],
            "kinds":[],
            "name":"cluster.by",
            "promptWhenRun":false,
            "defaultValue":"3",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"stub name of the output files",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"<input.filename_basename>",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"PCA",
    "outputs":["matrix"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00017:3"
}, "134":{
    "inputs":[
        {
            "description":"A prebuilt bowtie index. Either a prebuilt or a custom Bowtie index must be specified.",
            "choices":["none=", "a_thaliana=A. Thaliana", "b_taurus=B. Taurus", "e_coli=E. Coli", "c_elegans_ws200=C. Elegans, WormBase WS200", "hg19=H. sapiens, UCSC hg19", "hg18=H. sapiens, UCSC hg18", "mm9=M. musculus, UCSC mm9", "mm8=M. musculus, UCSC mm8", "m_musculus_ncbi37=M. musculus, NCBI 37", "s_cerevisiae= S. cerevisiae"],
            "kinds":[],
            "name":"TopHat1.prebuilt.bowtie.index",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"A ZIP archive containing Bowtie index files. Either a prebuilt or a custom Bowtie index must be specified.",
            "choices":[],
            "kinds":["zip"],
            "name":"TopHat1.custom.bowtie.index",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Unpaired reads file or first mate for paired reads. A file or zip of files containing reads in FASTA or FASTQ format.",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "zip"],
            "name":"TopHat1.reads.pair.1",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Second mate for paired reads. A file or zip of files in FASTA or FASTQ format.",
            "choices":[],
            "kinds":["fn", "fa", "fastq", "zip"],
            "name":"TopHat1.reads.pair.2",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"The expected mean inner distance between mate pairs. This parameter is required for paired-end runs and must be an integer.",
            "choices":[],
            "kinds":[],
            "name":"TopHat1.mate.inner.dist",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"The standard deviation for the distribution on inner distances between mate pairs.",
            "choices":[],
            "kinds":[],
            "name":"TopHat1.mate.std.dev",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"Library type for strand specific reads.",
            "choices":["None=", "fr-unstranded=Standard Illumina (fr-unstranded)", "fr-firststrand=dUTP, NSR, NNSR (fr-firststrand)", "fr-secondstrand=Ligation, Standard SOLiD (fr-secondstrand)"],
            "kinds":[],
            "name":"TopHat1.library.type",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Quality values are space-delimited integer values, this becomes default when you specify color option.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"TopHat1.integer.quals",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"File containing sizes of chromosomes",
            "choices":[],
            "kinds":["txt", "rtf"],
            "name":"Scripture3.chromosome.size.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Selected chromosome, e.g., chr19",
            "choices":[],
            "kinds":[],
            "name":"Scripture3.chromosome",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Chromosome sequence in FASTA format",
            "choices":[],
            "kinds":["fa", "fasta"],
            "name":"Scripture3.chromosome.sequence.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"A label that will be used to name output files",
            "choices":[],
            "kinds":[],
            "name":"Scripture3.output.prefix",
            "promptWhenRun":false,
            "defaultValue":"<alignment.file_basename>",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"ScripturePipeline",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.pipeline:00012:2"
}, "135":{
    "inputs":[
        {
            "description":"Input file in SAM or BAM format",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"SortSam1.input.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"File containing sizes of chromosomes",
            "choices":[],
            "kinds":["txt", "rtf"],
            "name":"Scripture2.chromosome.size.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Selected chromosome, e.g., chr19",
            "choices":[],
            "kinds":[],
            "name":"Scripture2.chromosome",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Chromosome sequence in FASTA format",
            "choices":[],
            "kinds":["fa", "fasta"],
            "name":"Scripture2.chromosome.sequence.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"A label that will be used to name output files",
            "choices":[],
            "kinds":[],
            "name":"Scripture2.output.prefix",
            "promptWhenRun":false,
            "defaultValue":"<alignment.file_basename>",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"ScripturePrealigned",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.pipeline:00013:2"
}, "132":{
    "inputs":[
        {
            "description":"Dataset file - .res, .gct",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"expression.dataset",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Gene sets database from GSEA website.",
            "choices":["c1.all.v3.0.symbols.gmt=c1.all.v3.0.symbols.gmt [Positional]", "c1.all.v3.0.entrez.gmt=c1.all.v3.0.entrez.gmt [Positional]", "c2.all.v3.0.symbols.gmt=c2.all.v3.0.symbols.gmt [Curated]", "c2.all.v3.0.entrez.gmt=c2.all.v3.0.entrez.gmt [Curated]", "c2.cgp.v3.0.symbols.gmt=c2.cgp.v3.0.symbols.gmt [Curated]", "c2.cgp.v3.0.entrez.gmt=c2.cgp.v3.0.entrez.gmt [Curated]", "c2.cp.v3.0.symbols.gmt=c2.cp.v3.0.symbols.gmt [Curated]", "c2.cp.v3.0.entrez.gmt=c2.cp.v3.0.entrez.gmt [Curated]", "c2.cp.biocarta.v3.0.symbols.gmt=c2.cp.biocarta.v3.0.symbols.gmt [Curated]", "c2.cp.biocarta.v3.0.entrez.gmt=c2.cp.biocarta.v3.0.entrez.gmt [Curated]", "c2.cp.kegg.v3.0.symbols.gmt=c2.cp.kegg.v3.0.symbols.gmt [Curated]", "c2.cp.kegg.v3.0.entrez.gmt=c2.cp.kegg.v3.0.entrez.gmt [Curated]", "c2.cp.reactome.v3.0.symbols.gmt=c2.cp.reactome.v3.0.symbols.gmt [Curated]", "c2.cp.reactome.v3.0.entrez.gmt=c2.cp.reactome.v3.0.entrez.gmt [Curated]", "c3.all.v3.0.symbols.gmt=c3.all.v3.0.symbols.gmt [Motif]", "c3.all.v3.0.entrez.gmt=c3.all.v3.0.entrez.gmt [Motif]", "c3.mir.v3.0.symbols.gmt=c3.mir.v3.0.symbols.gmt [Motif]", "c3.mir.v3.0.entrez.gmt=c3.mir.v3.0.entrez.gmt [Motif]", "c3.tft.v3.0.symbols.gmt=c3.tft.v3.0.symbols.gmt [Motif]", "c3.tft.v3.0.entrez.gmt=c3.tft.v3.0.entrez.gmt [Motif]", "c4.all.v3.0.symbols.gmt=c4.all.v3.0.symbols.gmt [Computational]", "c4.all.v3.0.entrez.gmt=c4.all.v3.0.entrez.gmt [Computational]", "c4.cgn.v3.0.symbols.gmt=c4.cgn.v3.0.symbols.gmt [Computational]", "c4.cgn.v3.0.entrez.gmt=c4.cgn.v3.0.entrez.gmt [Computational]", "c4.cm.v3.0.symbols.gmt=c4.cm.v3.0.symbols.gmt [Computational]", "c4.cm.v3.0.entrez.gmt=c4.cm.v3.0.entrez.gmt [Computational]", "c5.all.v3.0.symbols.gmt=c5.all.v3.0.symbols.gmt [Gene Ontology]", "c5.all.v3.0.entrez.gmt=c5.all.v3.0.entrez.gmt [Gene Ontology]", "c5.bp.v3.0.symbols.gmt=c5.bp.v3.0.symbols.gmt [Gene Ontology]", "c5.bp.v3.0.entrez.gmt=c5.bp.v3.0.entrez.gmt [Gene Ontology]", "c5.cc.v3.0.symbols.gmt=c5.cc.v3.0.symbols.gmt [Gene Ontology]", "c5.cc.v3.0.entrez.gmt=c5.cc.v3.0.entrez.gmt [Gene Ontology]", "c5.mf.v3.0.symbols.gmt=c5.mf.v3.0.symbols.gmt [Gene Ontology]", "c5.mf.v3.0.entrez.gmt=c5.mf.v3.0.entrez.gmt [Gene Ontology]"],
            "kinds":[],
            "name":"gene.sets.database",
            "promptWhenRun":false,
            "defaultValue":"c1.all.v3.0.symbols.gmt [Positional]",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Gene sets database - .gmt, .gmx, .grp. Upload a gene set if your gene set is not listed as a choice for the gene sets database parameter.",
            "choices":[],
            "kinds":["gmt", "gmx", "grp"],
            "name":"gene.sets.database.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Number of permutations to perform",
            "choices":[],
            "kinds":[],
            "name":"number.of.permutations",
            "promptWhenRun":false,
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Cls file - .cls, must be binary",
            "choices":[],
            "kinds":["cls"],
            "name":"phenotype.labels",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Select true to have GSEA collapse each probe set in the expression dataset into a single vector for the gene, which gets identified by its gene symbol.",
            "choices":["false", "true"],
            "kinds":[],
            "name":"collapse.dataset",
            "promptWhenRun":false,
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Type of permutations to perform",
            "choices":["phenotype", "gene_set"],
            "kinds":[],
            "name":"permutation.type",
            "promptWhenRun":false,
            "defaultValue":"phenotype",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Chip file from GSEA website.",
            "choices":["ftp.broadinstitute.org://pub/gsea/annotations/GENE_SYMBOL.chip=GENE_SYMBOL.chip", "ftp.broadinstitute.org://pub/gsea/annotations/SEQ_ACCESSION.chip=SEQ_ACCESSION.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubA.chip=Hu35KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubB.chip=Hu35KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubC.chip=Hu35KsubC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubD.chip=Hu35KsubD.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu6800.chip=Hu6800.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_Focus.chip=HG_Focus.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133A.chip=HG_U133A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133AAOFAV2.chip=HG_U133AAOFAV2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133A_2.chip=HG_U133A_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133B.chip=HG_U133B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133_Plus_2.chip=HG_U133_Plus_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95Av2.chip=HG_U95Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95B.chip=HG_U95B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95C.chip=HG_U95C.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95D.chip=HG_U95D.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95E.chip=HG_U95E.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AFFYMETRIX.chip=AFFYMETRIX.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AG.chip=AG.chip", "ftp.broadinstitute.org://pub/gsea/annotations/APPLERA_ABI1700.chip=APPLERA_ABI1700.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ATH1_121501.chip=ATH1_121501.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1A.chip=Agilent_Human1A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1Av2.chip=Agilent_Human1Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1B.chip=Agilent_Human1B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1_cDNA.chip=Agilent_Human1_cDNA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_HumanGenome.chip=Agilent_HumanGenome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseDev.chip=Agilent_MouseDev.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseGenome.chip=Agilent_MouseGenome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseOligo.chip=Agilent_MouseOligo.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Mouse_cDNA.chip=Agilent_Mouse_cDNA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_RatGenome_G4131A.chip=Agilent_RatGenome_G4131A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_RatOligo.chip=Agilent_RatOligo.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AtlasMouse1.2.chip=AtlasMouse1.2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AtlasRat1.2.chip=AtlasRat1.2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/BIAO.chip=BIAO.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Bovine.chip=Bovine.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CNMCMuscleChip.chip=CNMCMuscleChip.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Caltech16KMouse.chip=Caltech16KMouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Caltech16KOligoMouse.chip=Caltech16KOligoMouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Canine_2.chip=Canine_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Clontech_Atlas_13K.chip=Clontech_Atlas_13K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Clontech_BD_Atlas.chip=Clontech_BD_Atlas.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_Human_Whole_Genome.chip=CodeLink_Human_Whole_Genome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_20K_I_Bioarray.chip=CodeLink_UniSet_Human_20K_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_II_Bioarray.chip=CodeLink_UniSet_Human_II_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_I_Bioarray.chip=CodeLink_UniSet_Human_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Rat_I_Bioarray.chip=CodeLink_UniSet_Rat_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/DrosGenome1.chip=DrosGenome1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Drosophila_2.chip=Drosophila_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/G4110A.chip=G4110A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/G4110Av2.chip=G4110Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/GenosysCytokineV2.chip=GenosysCytokineV2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HC_G110.chip=HC_G110.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HPCGGCompugenAnnotations.chip=HPCGGCompugenAnnotations.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HT_HG_U133A.chip=HT_HG_U133A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HT_HG_U133A_EA.chip=HT_HG_U133A_EA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HU6800.chip=HU6800.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illimina_Mus6_v1_1.chip=Illimina_Mus6_v1_1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illimuna_Mus6_v1.chip=Illimuna_Mus6_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Hum6_v1.chip=Illumina_Hum6_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Hum6_v2.chip=Illumina_Hum6_v2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_HumRef8_v1.chip=Illumina_HumRef8_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_HumRef8_v2.chip=Illumina_HumRef8_v2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Human.chip=Illumina_Human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_MusRef8_v1.chip=Illumina_MusRef8_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_MusRef8_v1_1.chip=Illumina_MusRef8_v1_1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_RatRef12_v1.chip=Illumina_RatRef12_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Av2.chip=MG_U74Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Bv2.chip=MG_U74Bv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Cv2.chip=MG_U74Cv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MOE430A.chip=MOE430A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MOE430B.chip=MOE430B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MWG_Human_30K_A.chip=MWG_Human_30K_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MWG_Human_30K_B.chip=MWG_Human_30K_B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mouse430A_2.chip=Mouse430A_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mouse430_2.chip=Mouse430_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu11KsubA.chip=Mu11KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu11KsubB.chip=Mu11KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubA.chip=Mu19KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubB.chip=Mu19KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubC.chip=Mu19KsubC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/NIA15k.chip=NIA15k.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Netherland_cancer_institute_operon_human_35k.chip=Netherland_cancer_institute_operon_human_35k.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Netherland_cancer_institute_operon_mouse_FOOk.chip=Netherland_cancer_institute_operon_mouse_FOOk.chip", "ftp.broadinstitute.org://pub/gsea/annotations/OPERON_HUMANv2.chip=OPERON_HUMANv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/OPERON_HUMANv3.chip=OPERON_HUMANv3.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RAE230A.chip=RAE230A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RAE230B.chip=RAE230B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34A.chip=RG_U34A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34B.chip=RG_U34B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34C.chip=RG_U34C.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RN_U34.chip=RN_U34.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RT_U34.chip=RT_U34.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_Ensembl1.1.chip=RZPD_Human_Ensembl1.1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_ORF_Clones_Gateway.chip=RZPD_Human_ORF_Clones_Gateway.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_Unigene3.1.chip=RZPD_Human_Unigene3.1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rat230_2.chip=Rat230_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Human.chip=RefSeq_NP_Human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Mouse.chip=RefSeq_NP_Mouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Rat.chip=RefSeq_NP_Rat.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_human.chip=RefSeq_human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Research_Genetics.chip=Research_Genetics.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rosetta.chip=Rosetta.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rosetta50K.chip=Rosetta50K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Stanford.chip=Stanford.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Stanford_Source_Accessions.chip=Stanford_Source_Accessions.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TIGR_31K_Human_Set.chip=TIGR_31K_Human_Set.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TIGR_40K_Human_Set.chip=TIGR_40K_Human_Set.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC.chip=TRC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC_DB.chip=TRC_DB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC_DB_v1.chip=TRC_DB_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/U133_X3P.chip=U133_X3P.chip", "ftp.broadinstitute.org://pub/gsea/annotations/UCLA_NIH_33K.chip=UCLA_NIH_33K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Zebrafish.chip=Zebrafish.chip", "ftp.broadinstitute.org://pub/gsea/annotations/labonweb_human.chip=labonweb_human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/lymphochip.chip=lymphochip.chip"],
            "kinds":[],
            "name":"chip.platform",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Chip to use. Upload a chip file if your chip is not listed as a choice for the chip platform parameter.",
            "choices":[],
            "kinds":[],
            "name":"chip.platform.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"The statistic used to score hits (gene set members) and misses (non-members)",
            "choices":["classic", "weighted", "weighted_p2", "weighted_p1.5"],
            "kinds":[],
            "name":"scoring.scheme",
            "promptWhenRun":false,
            "defaultValue":"weighted",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Class separation metric - gene markers are ranked using this metric to produce the gene list",
            "choices":["Cosine", "Euclidean", "Manhattan", "Pearson", "FeatureVariation", "tTest", "Signal2Noise", "None", "RegressionSlope", "Bhattacharyya", "Norm.Pearson", "Diff_of_Means", "Diff_of_Medians", "Ratio_of_Means", "Ratio_of_Medians", "log2_ratio_of_means", "Feature_stddev_by_mean"],
            "kinds":[],
            "name":"metric.for.ranking.genes",
            "promptWhenRun":false,
            "defaultValue":"Signal2Noise",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Direction in which the gene list should be ordered",
            "choices":["ascending", "descending"],
            "kinds":[],
            "name":"gene.list.ordering.mode",
            "promptWhenRun":false,
            "defaultValue":"descending",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Mode in which scores from the gene list should be considered",
            "choices":["real", "abs"],
            "kinds":[],
            "name":"gene.list.sorting.mode",
            "promptWhenRun":false,
            "defaultValue":"real",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Gene sets larger than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"max.gene.set.size",
            "promptWhenRun":false,
            "defaultValue":"500",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Gene sets smaller than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"min.gene.set.size",
            "promptWhenRun":false,
            "defaultValue":"15",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Collapsing mode",
            "choices":["Max_probe", "Median_of_probes"],
            "kinds":[],
            "name":"collapsing.mode.for.probe.sets.with.more.than.one.match",
            "promptWhenRun":false,
            "defaultValue":"Max_probe",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Normalization mode",
            "choices":["meandiv", "None"],
            "kinds":[],
            "name":"normalization.mode",
            "promptWhenRun":false,
            "defaultValue":"meandiv",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Type of phenotype randomization (does not apply to gene set permutations)",
            "choices":["equalize_and_balance", "no_balance"],
            "kinds":[],
            "name":"randomization.mode",
            "promptWhenRun":false,
            "defaultValue":"no_balance",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"If there is no known gene symbol match for a probe set, omit it from the collapsed dataset",
            "choices":["false", "true"],
            "kinds":[],
            "name":"omit.features.with.no.symbol.match",
            "promptWhenRun":false,
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Create detailed gene set report (heat map, mountain plot, etc.) for every enriched gene set",
            "choices":["false", "true"],
            "kinds":[],
            "name":"make.detailed.gene.set.report",
            "promptWhenRun":false,
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Use the median of each class instead of the mean for the class separation metrics",
            "choices":["true", "false"],
            "kinds":[],
            "name":"median.for.class.metrics",
            "promptWhenRun":false,
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Number of markers",
            "choices":[],
            "kinds":[],
            "name":"number.of.markers",
            "promptWhenRun":false,
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Plot GSEA mountain and related plots for the top sets of each phenotype",
            "choices":[],
            "kinds":[],
            "name":"plot.graphs.for.the.top.sets.of.each.phenotype",
            "promptWhenRun":false,
            "defaultValue":"20",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Seed to use for randomization",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "promptWhenRun":false,
            "defaultValue":"timestamp",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Whether to save random ranked lists",
            "choices":["false", "true"],
            "kinds":[],
            "name":"save.random.ranked.lists",
            "promptWhenRun":false,
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.file.name",
            "promptWhenRun":false,
            "defaultValue":"<expression.dataset_basename>.zip",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"GSEA",
    "outputs":[],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00072:12"
}, "133":{
    "inputs":[
        {
            "description":"The SAM or BAM file",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"input.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Whether to output a fastq file per read group",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"per.read.group",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Whether to re-reverse bases and qualities of reads with negative strand flag set",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"re-reverse.bases",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Whether to include non-PF reads",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"include.non.pf.reads",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Attribute that stores the position at which the SAM record should be clipped",
            "choices":[],
            "kinds":[],
            "name":"clipping.attribute",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Action to take with clipped reads when a clipping attribute is specified",
            "choices":["none=", "X=trim reads and qualities", "N=change bases to Ns", "change=change base quality values"],
            "kinds":[],
            "name":"clipping.action",
            "promptWhenRun":false,
            "defaultValue":"none",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Value to set base qualities to when clipping action is \"change base quality values\"",
            "choices":[],
            "kinds":[],
            "name":"clipping.action.quality.value",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"The fastq output file name for single-end fastq or first end of a paired fastq. Only specify when \"per read group\" is \"no\".",
            "choices":[],
            "kinds":[],
            "name":"fastq.output.prefix.1",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"The second end of a paired fastq. Only specify when \"per read group\" is \"no\".",
            "choices":[],
            "kinds":[],
            "name":"fastq.output.prefix.2",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        }
    ],
    "name":"SamToFastq",
    "outputs":["fastq"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00240:1"
}, "59":{
    "inputs":[
        {
            "description":"A .snp file that contains genotypes",
            "choices":[],
            "kinds":["snp"],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"A sample info file with the paired information",
            "choices":[],
            "kinds":["txt"],
            "name":"sample.info.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Output file",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"<input.filename_basename>.loh",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"LOHPaired",
    "outputs":["loh"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00094:3"
}, "138":{
    "inputs":[],
    "name":"job182",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:18:2"
}, "58":{
    "inputs":[
        {
            "description":"input clinical data (.txt file)",
            "choices":[],
            "kinds":[],
            "name":"input.clin.data.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"input class information (.cls file)",
            "choices":[],
            "kinds":[],
            "name":"input.cls.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"LogisticRegression_result",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"",
            "choices":[],
            "kinds":[],
            "name":"response.variable",
            "promptWhenRun":false,
            "defaultValue":"NA",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"variable.continuous",
            "choices":[],
            "kinds":[],
            "name":"variable.continuous",
            "promptWhenRun":false,
            "defaultValue":"NA",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"(e.g. sex,cls,grade,...)",
            "choices":[],
            "kinds":[],
            "name":"variable.category",
            "promptWhenRun":false,
            "defaultValue":"NA",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"(e.g. sex:cls,sex:grade,...)",
            "choices":[],
            "kinds":[],
            "name":"variable.interaction.terms",
            "promptWhenRun":false,
            "defaultValue":"NA",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"(e.g. cls:2) *only one subgroup can be specified",
            "choices":[],
            "kinds":[],
            "name":"input.subgroup",
            "promptWhenRun":false,
            "defaultValue":"NA",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"",
            "choices":["none=no", "both=Stepwise selection", "forward=Forward selection", "backward=Backward selection"],
            "kinds":[],
            "name":"variable.selection",
            "promptWhenRun":false,
            "defaultValue":"none",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"LogisticRegression",
    "outputs":["txt"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00165:1"
}, "139":{
    "inputs":[],
    "name":"job185",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:19:1"
}, "57":{
    "inputs":[
        {
            "description":"The output from the Peaks module",
            "choices":[],
            "kinds":["Spectrum Peaks"],
            "name":"peaks.output.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"<peaks.output.filename_basename>.locate.odf",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"max-location of maximum filtered value, area-center of area of the peak",
            "choices":["max", "area"],
            "kinds":[],
            "name":"locate.peaks.as",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"LocatePeaks",
    "outputs":["Spectrum Peaks Locate"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00051:2"
}, "136":{
    "inputs":[
        {
            "description":"Input file in SAM or BAM format",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"input.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Sort order",
            "choices":["coordinate=coordinate", "queryname=queryname", "unsorted=unsorted"],
            "kinds":[],
            "name":"sort.order",
            "promptWhenRun":false,
            "defaultValue":"coordinate",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Whether the file output format should be SAM or BAM",
            "choices":["sam=SAM", "bam=BAM"],
            "kinds":[],
            "name":"output.format",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"prefix for the name of output file",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "promptWhenRun":false,
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"SortSam",
    "outputs":["sam", "bam", "bai"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00245:3"
}, "56":{
    "inputs":[
        {
            "description":"Zip file containing peak lists",
            "choices":[],
            "kinds":[],
            "name":"peakList.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Zip file containing retention time (in this case from mapquant)",
            "choices":[],
            "kinds":[],
            "name":"retentionTime.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"CSV file with header: experiment, sample, class",
            "choices":[],
            "kinds":[],
            "name":"sampleInfo.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Global list of identified peptides",
            "choices":[],
            "kinds":[],
            "name":"globalID.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"OPTIONAL: Specify the accurate mass table",
            "choices":[],
            "kinds":["txt"],
            "name":"accurateMass.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"OPTIONAL: Specify the prefit coefficients in a file",
            "choices":[],
            "kinds":["txt"],
            "name":"prefitCoef.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Use bootstrapping to calculate landmark match statistics",
            "choices":["0=No", "1=Yes"],
            "kinds":[],
            "name":"Bootstrap",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Whether you are running on an LSF cluster version of GenePattern",
            "choices":["no", "yes"],
            "kinds":[],
            "name":"running.on.LSF",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"LandmarkMatch",
    "outputs":["zip"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00083:2"
}, "137":{
    "inputs":[],
    "name":"job182",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:18:1"
}, "55":{
    "inputs":[
        {
            "description":"query gene set file containing one identifier per line",
            "choices":[],
            "kinds":[],
            "name":"query.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"file containing an ordered list of genes (.pol format)",
            "choices":[],
            "kinds":[],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"output file name (a .pol extension will be appended)",
            "choices":[],
            "kinds":[],
            "name":"output",
            "promptWhenRun":false,
            "defaultValue":"<query.filename_basename>",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"KSscore",
    "outputs":[],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00014:1"
}, "64":{
    "inputs":[
        {
            "description":"first file to merge",
            "choices":[],
            "kinds":["gct", "res", "Dataset", "snp", "cn", "loh"],
            "name":"input.filename1",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"second file to merge",
            "choices":[],
            "kinds":["gct", "res", "Dataset", "snp", "cn", "loh"],
            "name":"input.filename2",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"zip file containing files to merge. Either a zip file or the input files above must be provided.",
            "choices":[],
            "kinds":["zip"],
            "name":"zip.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"name of the merged file",
            "choices":[],
            "kinds":[],
            "name":"output",
            "promptWhenRun":false,
            "defaultValue":"<input.filename1_basename><zip.filename_basename>.merged",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"MergeColumns",
    "outputs":["gct", "res", "Dataset", "snp", "cn", "loh"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00070:1"
}, "65":{
    "inputs":[
        {
            "description":"first file to merge",
            "choices":[],
            "kinds":["gct", "res", "Dataset", "snp", "cn", "loh"],
            "name":"input.filename1",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"second file to merge",
            "choices":[],
            "kinds":["gct", "res", "Dataset", "snp", "cn", "loh"],
            "name":"input.filename2",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"zip file containing files to merge. Either a zip file or the input files above must be provided.",
            "choices":[],
            "kinds":["zip"],
            "name":"zip.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"name of the merged file",
            "choices":[],
            "kinds":[],
            "name":"output",
            "promptWhenRun":false,
            "defaultValue":"<input.filename1_basename><zip.filename_basename>.merged",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"MergeRows",
    "outputs":["gct", "res", "Dataset", "snp", "cn", "loh"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00064:1"
}, "62":{
    "inputs":[
        {
            "description":"A zip file containing MAGE-TAB files (sdrf, idf, adf, txt)  - .zip",
            "choices":[],
            "kinds":["zip"],
            "name":"input.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        }
    ],
    "name":"MAGETABImportViewer",
    "outputs":[],
    "type":"visualizer",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00173:1"
}, "63":{
    "inputs":[
        {
            "description":"Input filename - .res",
            "choices":[],
            "kinds":[],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Name of the look up table file with the feature mapping",
            "choices":[],
            "kinds":[],
            "name":"lookup.table.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Table format",
            "choices":["0=2 column", "1=4-column"],
            "kinds":[],
            "name":"table.format",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Direction of look up",
            "choices":["1=direct", "0=reverse"],
            "kinds":[],
            "name":"direction",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"MapChipFeaturesGeneral",
    "outputs":[],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00015:1"
}, "131":{
    "inputs":[
        {
            "description":"Input file to be annotated (res, gct, or odf format, or text file containing one probe per line). Annotations will be retrieved based on affymetrix probe ids.",
            "choices":[],
            "kinds":["res", "gct", "Dataset", "txt"],
            "name":"Input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Name of the output file containing the annotations (same format as input) that will be created.",
            "choices":[],
            "kinds":[],
            "name":"Output.file.name",
            "promptWhenRun":false,
            "defaultValue":"<Input.filename_basename>.annot",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Where to write the annotations in the output file",
            "choices":["0=Append to probe id", "1=Append to description", "2=Replace description", "3=Write to annotation file"],
            "kinds":[],
            "name":"Annotation.Column",
            "promptWhenRun":false,
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"",
            "choices":["=", "Affymetrix Description=include"],
            "kinds":[],
            "name":"Affymetrix.Description",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"",
            "choices":["=", "LocusLink Locus ID=include"],
            "kinds":[],
            "name":"LocusLink.ID",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"",
            "choices":["=", "LocusLink Description=include"],
            "kinds":[],
            "name":"LocusLink.Gene.Name",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"",
            "choices":["=", "LocusLink Symbol=include"],
            "kinds":[],
            "name":"LocusLink.Symbol",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"",
            "choices":["=", "LocusLink Location=include"],
            "kinds":[],
            "name":"LocusLink.Location",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"",
            "choices":["=", "Unigene Human Cluster=include"],
            "kinds":[],
            "name":"UniGene.HS.Cluster.ID",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"",
            "choices":["=", "Unigene Human Description=include"],
            "kinds":[],
            "name":"UniGene.HS.Description",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"",
            "choices":["=", "Unigene Mouse Cluster=include"],
            "kinds":[],
            "name":"UniGene.MM.Cluster.ID",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"",
            "choices":["=", "Unigene Mouse Description=include"],
            "kinds":[],
            "name":"UniGene.MM.Description",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        }
    ],
    "name":"GeneCruiser",
    "outputs":["res", "gct", "Dataset"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00037:7"
}, "60":{
    "inputs":[],
    "name":"Lu.Getz.Miska.Nature.June.2005.mouse.lung.pipeline",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.pipeline:00004:1"
}, "130":{
    "inputs":[
        {
            "description":"Input fastq file (optionally gzipped) for single end data, or first read in paired end data",
            "choices":[],
            "kinds":["fastq"],
            "name":"fastq.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"The fastq file (optionally gzipped) for second read in paired end data",
            "choices":[],
            "kinds":["fastq"],
            "name":"fastq.file.2",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"A value describing how the quality values are encoded in the fastq",
            "choices":["Solexa", "Illumina", "Standard"],
            "kinds":[],
            "name":"quality.format",
            "promptWhenRun":false,
            "defaultValue":"Standard",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Read group name",
            "choices":[],
            "kinds":[],
            "name":"read.group.name",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Sample name to insert into the read group header",
            "choices":[],
            "kinds":[],
            "name":"sample.name",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"The library name to insert into the LB attribute in the read group header",
            "choices":[],
            "kinds":[],
            "name":"library.name",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"The platform unit (often run_barcode.lane) to insert into the read group header",
            "choices":[],
            "kinds":[],
            "name":"platform.unit",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"The platform type (e.g., Illumina, SOLiD) to insert into the read group header",
            "choices":[],
            "kinds":[],
            "name":"platform",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"",
            "choices":["unsorted", "queryname", "coordinate"],
            "kinds":[],
            "name":"sort.order",
            "promptWhenRun":false,
            "defaultValue":"coordinate",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Whether the file output format should be SAM or BAM",
            "choices":["sam=SAM", "bam=BAM"],
            "kinds":[],
            "name":"output.format",
            "promptWhenRun":false,
            "defaultValue":"bam",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"The prefix to use for the output file name",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "promptWhenRun":false,
            "defaultValue":"<fastq.file_basename>",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"FastqToSam",
    "outputs":["bam", "sam"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00241:1"
}, "61":{
    "inputs":[
        {
            "description":"The archive file containing the MAGE-ML files - .tar, .tgz, .tar.gz, .zip, .gz",
            "choices":[],
            "kinds":["zip", "tar", "tar.gz", "tgz", "gz"],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        }
    ],
    "name":"MAGEMLImportViewer",
    "outputs":[],
    "type":"visualizer",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00055:2"
}, "143":{
    "inputs":[],
    "name":"job188",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:22:1"
}, "49":{
    "inputs":[
        {
            "description":"Zip of Illumina idat files",
            "choices":[],
            "kinds":[],
            "name":"idat.zip",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Illumina manifest file in tab-delimited (TXT) format. A manifest file is required; either selected from this list or specified in custom manifest below.",
            "choices":["=Select a manifest file", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/HumanHT-12_V3_0_R2_11283641_A.txt=HumanHT-12_V3_0_R2_11283641_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/HumanHT-12_V4_0_R2_15002873_B.txt=HumanHT-12_V4_0_R2_15002873_B.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/HumanHT-12_V3_0_R3_11283641_A.txt=HumanHT-12_V3_0_R3_11283641_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/HumanHT-12_V4_0_R1_15002873_B.txt=HumanHT-12_V4_0_R1_15002873_B.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/HumanMI_V1_R2_XS0000122-MAP.txt=HumanMI_V1_R2_XS0000122-MAP.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/HumanMI_V2_R0_XS0000124-MAP.txt=HumanMI_V2_R0_XS0000124-MAP.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/HumanRef-8_V2_0_R4_11223162_A.txt=HumanRef-8_V2_0_R4_11223162_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/HumanRef-8_V3_0_R1_11282963_A_WGDASL.txt=HumanRef-8_V3_0_R1_11282963_A_WGDASL.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/HumanRef-8_V3_0_R2_11282963_A.txt=HumanRef-8_V3_0_R2_11282963_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/HumanRef-8_V3_0_R3_11282963_A.txt=HumanRef-8_V3_0_R3_11282963_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/HumanWG-6_V2_0_R4_11223189_A.txt=HumanWG-6_V2_0_R4_11223189_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/HumanWG-6_V3_0_R2_11282955_A.txt=HumanWG-6_V3_0_R2_11282955_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/HumanWG-6_V3_0_R3_11282955_A.txt=HumanWG-6_V3_0_R3_11282955_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/MouseMI_V1_R2_XS0000127-MAP.txt=MouseMI_V1_R2_XS0000127-MAP.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/MouseMI_V2_R0_XS0000129-MAP.txt=MouseMI_V2_R0_XS0000129-MAP.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/MouseRef-8_V1_1_R4_11234312_A.txt=MouseRef-8_V1_1_R4_11234312_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/MouseRef-8_V2_0_R2_11278551_A.txt=MouseRef-8_V2_0_R2_11278551_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/MouseRef-8_V2_0_R3_11278551_A.txt=MouseRef-8_V2_0_R3_11278551_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/MouseWG-6_V1_1_R4_11234304_A.txt=MouseWG-6_V1_1_R4_11234304_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/MouseWG-6_V2_0_R2_11278593_A.txt=MouseWG-6_V2_0_R2_11278593_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/MouseWG-6_V2_0_R3_11278593_A.txt=MouseWG-6_V2_0_R3_11278593_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/RatRef-12_V1_0_R5_11222119_A.txt=RatRef-12_V1_0_R5_11222119_A.txt"],
            "kinds":[],
            "name":"manifest",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Other Illumina manifest file in tab-delimited (TXT) format. A manifest file is required; either selected from the list above or specified here.",
            "choices":[],
            "kinds":[],
            "name":"custom.manifest",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"<idat.zip_basename>.gct",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Perform background subtraction.",
            "choices":["false", "true"],
            "kinds":[],
            "name":"background.subtraction.mode",
            "promptWhenRun":false,
            "defaultValue":"false",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Collapse probes to genes based on the manifest or CHIP file (if provided).",
            "choices":["none", "max", "median"],
            "kinds":[],
            "name":"collapse.mode",
            "promptWhenRun":false,
            "defaultValue":"none",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"CHIP file to map probes to genes.",
            "choices":["=Select a chip file", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/chip/ilmn_HumanHT_12_V3_0_R3_11283641_A.chip=ilmn_HumanHT_12_V3_0_R3_11283641_A.chip", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/chip/ilmn_HumanHT_12_V4_0_R1_15002873_B.chip=ilmn_HumanHT_12_V4_0_R1_15002873_B.chip", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/chip/ilmn_HumanRef_8_V2_0_R4_11223162_A.chip=ilmn_HumanRef_8_V2_0_R4_11223162_A.chip", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/chip/ilmn_HumanReF_8_V3_0_R1_11282963_A_WGDASL.chip=ilmn_HumanReF_8_V3_0_R1_11282963_A_WGDASL.chip", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/chip/ilmn_HumanRef_8_V3_0_R3_11282963_A.chip=ilmn_HumanRef_8_V3_0_R3_11282963_A.chip", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/chip/ilmn_HumanWG_6_V2_0_R4_11223189_A.chip=ilmn_HumanWG_6_V2_0_R4_11223189_A.chip", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/chip/ilmn_HumanWG_6_V3_0_R3_11282955_A.chip=ilmn_HumanWG_6_V3_0_R3_11282955_A.chip", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/chip/ilmn_MouseRef_8_V1_1_R4_11234312_A.chip=ilmn_MouseRef_8_V1_1_R4_11234312_A.chip", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/chip/ilmn_MouseRef_8_V2_0_R3_11278551_A.chip=ilmn_MouseRef_8_V2_0_R3_11278551_A.chip", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/chip/ilmn_MouseWG_6_V1_1_R4_11234304_A.chip=ilmn_MouseWG_6_V1_1_R4_11234304_A.chip", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/chip/ilmn_MouseWG_6_V2_0_R3_11278593_A.chip=ilmn_MouseWG_6_V2_0_R3_11278593_A.chip", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/chip/ilmn_RatRef_12_V1_0_R5_11222119_A.chip=ilmn_RatRef_12_V1_0_R5_11222119_A.chip"],
            "kinds":[],
            "name":"chip",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Other CHIP file to map probes to genes.",
            "choices":[],
            "kinds":[],
            "name":"custom.chip",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"CLM file to map file names to sample names.",
            "choices":[],
            "kinds":[],
            "name":"clm",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        }
    ],
    "name":"IlluminaExpressionFileCreator",
    "outputs":["gct"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00189:1"
}, "144":{
    "inputs":[],
    "name":"job188",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:23:1"
}, "48":{
    "inputs":[
        {
            "description":"Dataset to be viewed in IGV or IGV session file",
            "choices":[],
            "kinds":["bed", "cbs.txt", "clm", "cls", "cn", "Comparative Marker Selection", "csv", "Dataset", "FASTA", "gct", "glad", "igv", "loh", "maf", "Matrix", "res", "SAM", "seg", "snp", "txt", "xcn", "xls", "xml", "zip"],
            "name":"input.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Choose the genome for your data. IGV will launch with hg19 or the last viewed genome by default.",
            "choices":["=Select a genome", "hg19=Human hg19", "hg18=Human hg18", "hg17=Human hg17", "hg16=Human hg16", "mm9=Mouse mm9", "mm8= Mouse mm8", "mm7=Mouse mm7", "1kg_ref=Human (1kg reference, b36)", "b37=Human (b37)", "rn4=Rat (rn4)", "canFam2=Dog (canFam2)", "btaurus_3.0=Cow (b. taurus UMD 3.0)", "susScrofa=Sus Scrofa (9.56)", "galGal3=Chicken (galGal3)", "cavPor3=Guinea Pig (cavPor3)", "monDom5=Opossum (monDom5)", "xenTro2=X. tropicalis (xenTro2)", "zebrafish=Zebrafish (Zv7/danRer5)", "danRer6=Zebrafish (Zv8/danRer6)", "gasAcul=Stickleback (gasAcu1)", "Aplysia=Aplysia", "Plasmodium_3D7_v2.1=Plasmodium (3D7 v2.1)", "Plasmodium_3D7_v5.5=Plasmodium (3D7 v5.5)", "Plasmodium_6.1=Plasmodium (6.1)", "PlasmoDB_7.0=Plasmodium (3D7 V7.0)", "sacCer1=S. cerevisiae (sacCer1)", "sacCer2=S. cerevisiae (sacCer2)", "sk1=S. cerevisiae (sk1)", "sp=S. pombe (7/09)", "spombe_1.55=S. pombe (EF 1.55)", "candida=C. albicans", "mg8=M. oryzae (mg8)", "spur_2.1=S.purpuratus (2.1+)", "spur_2.5=S. purpuratus (2.5)", "ce6=C. elegans (ce6)", "ce4=C. elegans (ce4)", "dm3=D. melanogaster (dm3)", "dm2=D. melanogaster (dm2)", "dmel_5.9=D. melanogaster (5.9)", "dmel_r5.22=D. melanogaster (r5.22)", "tcas_2.0=T. castaneum (2.0)", "tcas_3.0=T. castaneum (3.0)", "ncrassa_v3=Neurospora crassa (v3)", "Glamblia_2.0=G. lamblia (2.0)", "me49=T. gondii (ME49)", "tb927=T. brucei (927)", "tbgambi=T. brucei gambiense", "lmjr=L. major (Friedlin)", "U00096.2=E. coli K-12 MG1655 (U00096.2)", "NC_000913.2=E. coli K-12 MG1655 (NC_000913.2)", "tair8=A. thaliana (TAIR 8)", "tair9=A. thaliana (TAIR 9)", "tair10=A. thaliana (TAIR 10)", "O_Sativa_r6=O. Sativa (release 6)", "osativa_r6.1=O. Sativa (release 6.1)", "B73=Maize (B73 4a.53)", "ppatens_1.2=P. patens  (V 1.2)", "D.discoideum=D. discoideum (05-13-2009)"],
            "kinds":[],
            "name":"genomeId",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Provide a locus or gene of interest for your data. IGV will launch on chr1 or the last viewed chromosome by default. (e.g. chr1:2000-3000 or egfr)",
            "choices":[],
            "kinds":[],
            "name":"locus",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        }
    ],
    "name":"IGV",
    "outputs":[],
    "type":"visualizer",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00170:1"
}, "145":{
    "inputs":[],
    "name":"job188",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:24:1"
}, "146":{
    "inputs":[],
    "name":"job188",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:25:1"
}, "147":{
    "inputs":[],
    "name":"job190",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:26:1"
}, "45":{
    "inputs":[
        {
            "description":"Clustered data table, contains the original data, but reordered",
            "choices":[],
            "kinds":["cdt"],
            "name":"cdt",
            "promptWhenRun":false,
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Gene Tree file, records the order in which genes (rows) were joined (at least one of gtr and atr files are required)",
            "choices":[],
            "kinds":["gtr"],
            "name":"gtr",
            "promptWhenRun":false,
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Array Tree file, records the order in which samples (columns) were joined (at least one of gtr and atr files are required)",
            "choices":[],
            "kinds":["atr"],
            "name":"atr",
            "promptWhenRun":false,
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"The output file name - .bmp, .jpeg, .png, .tiff",
            "choices":[],
            "kinds":[],
            "name":"output",
            "promptWhenRun":false,
            "defaultValue":"<cdt_basename>",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"The output file format",
            "choices":["bmp", "jpeg", "png", "tiff"],
            "kinds":[],
            "name":"output.format",
            "promptWhenRun":false,
            "defaultValue":"jpeg",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"The size in pixels of an element along the horizontal axis",
            "choices":[],
            "kinds":[],
            "name":"column.size",
            "promptWhenRun":false,
            "defaultValue":"8",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"The size in pixels of an element along the vertical axis",
            "choices":[],
            "kinds":[],
            "name":"row.size",
            "promptWhenRun":false,
            "defaultValue":"8",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Whether to show a grid between elements",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"show.grid",
            "promptWhenRun":false,
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"The grid color",
            "choices":["0:0:0=black", "128:128:128=grey", "255:255:255=white"],
            "kinds":[],
            "name":"grid.color",
            "promptWhenRun":false,
            "defaultValue":"black",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Whether to show row descriptions",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"show.row.descriptions",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Whether to show row names",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"show.row.names",
            "promptWhenRun":false,
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Rows to highlight in the heat map",
            "choices":[],
            "kinds":[],
            "name":"rows.to.highlight",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"The color to highlight the rows if a rows to highlight file is provided",
            "choices":["255:0:0=red", "255:255:0=yellow", "0:0:255=blue"],
            "kinds":[],
            "name":"row.highlight.color",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"The color scheme",
            "choices":["row normalized", "global"],
            "kinds":[],
            "name":"color.scheme",
            "promptWhenRun":false,
            "defaultValue":"row normalized",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"Color palette consisting of one r:g:b triplet or one hex value per line",
            "choices":[],
            "kinds":[],
            "name":"color.palette",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Whether to use a linear color gradient or discrete colors",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"use.color.gradient",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        }
    ],
    "name":"HierarchicalClusteringImage",
    "outputs":["jpeg", "png", "tiff", "bmp", "eps"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00071:2"
}, "148":{
    "inputs":[],
    "name":"job190",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:26:2"
}, "44":{
    "inputs":[
        {
            "description":"input data file name - .gct, .res, .odf type = Dataset",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"distance measure for column (sample) clustering",
            "choices":["0=No column clustering", "1=Uncentered correlation", "2=Pearson correlation", "3=Uncentered correlation, absolute value", "4=Pearson correlation, absolute value", "5=Spearman's rank correlation", "6=Kendall's tau", "7=Euclidean distance", "8=City-block distance"],
            "kinds":[],
            "name":"column.distance.measure",
            "promptWhenRun":false,
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"distance measure for row (gene) clustering  NOTE: Filtering beforehand is recommended since row clustering is computationally intensive.",
            "choices":["0=No row clustering", "1=Uncentered correlation", "2=Pearson correlation", "3=Uncentered correlation, absolute value", "4=Pearson correlation, absolute value", "5=Spearman's rank correlation", "6=Kendall's tau", "7=Euclidean distance", "8=City-block distance"],
            "kinds":[],
            "name":"row.distance.measure",
            "promptWhenRun":false,
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"hierarchical clustering method to use",
            "choices":["m=Pairwise complete-linkage", "s=Pairwise single-linkage", "c=Pairwise centroid-linkage", "a=Pairwise average-linkage"],
            "kinds":[],
            "name":"clustering.method",
            "promptWhenRun":false,
            "defaultValue":"m",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"log-transform the data before clustering",
            "choices":["=no", "-l=yes"],
            "kinds":[],
            "name":"log.transform",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"whether to center each row (gene) in the data",
            "choices":["=no", "mean.row=Subtract the mean of each row", "median.row=Subtract the median of each row"],
            "kinds":[],
            "name":"row.center",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"whether to normalize each row (gene) in the data",
            "choices":["=no", "-ng=yes"],
            "kinds":[],
            "name":"row.normalize",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"whether to center each column (sample) in the data",
            "choices":["=no", "mean.column=Subtract the mean of each column", "median.column=Subtract the median of each column"],
            "kinds":[],
            "name":"column.center",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"whether to normalize each column (sample) in the data",
            "choices":["=no", "-na=yes"],
            "kinds":[],
            "name":"column.normalize",
            "promptWhenRun":false,
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"base name for output files",
            "choices":[],
            "kinds":[],
            "name":"output.base.name",
            "promptWhenRun":false,
            "defaultValue":"<input.filename_basename>",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"HierarchicalClustering",
    "outputs":["gtr", "atr", "cdt"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00009:5"
}, "149":{
    "inputs":[],
    "name":"job191",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:27:1"
}, "47":{
    "inputs":[
        {
            "description":"the .pol, .tag or .grp file to be converted",
            "choices":[],
            "kinds":[],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"name of the output file (same format as input file)",
            "choices":[],
            "kinds":[],
            "name":"output",
            "promptWhenRun":false,
            "defaultValue":"<input.filename_basename>.U95",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"Hu68kHu35kAtoU95",
    "outputs":[],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00011:1"
}, "46":{
    "inputs":[
        {
            "description":"Clustered data table, contains the original data, but reordered",
            "choices":[],
            "kinds":["cdt"],
            "name":"cdt.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Gene tree file, records the order in which genes (rows) were joined (at least one of gtr file and atr file is required)",
            "choices":[],
            "kinds":["gtr"],
            "name":"gtr.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Array tree file, records the order in which samples (columns) were joined (at least one of gtr file and atr file is required)",
            "choices":[],
            "kinds":["atr"],
            "name":"atr.file",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        }
    ],
    "name":"HierarchicalClusteringViewer",
    "outputs":[],
    "type":"visualizer",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00031:9"
}, "51":{
    "inputs":[
        {
            "description":"Clustered data table, contains the original data, but reordered",
            "choices":[],
            "kinds":["cdt"],
            "name":"cdt.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Gene Tree file, records the order in which genes (rows) were joined (at least one of gtr filename and atr filename is required)",
            "choices":[],
            "kinds":["gtr"],
            "name":"gtr.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"Array Tree file, records the order in which samples (columns) were joined (at least one of gtr filename and atr filename is required)",
            "choices":[],
            "kinds":["atr"],
            "name":"atr.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        }
    ],
    "name":"JavaTreeView",
    "outputs":[],
    "type":"visualizer",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00063:2"
}, "52":{
    "inputs":[
        {
            "description":"File containing data to cluster - .res, .gct, .odf",
            "choices":[],
            "kinds":["gct", "res", "odf"],
            "name":"input.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"The base output file name - .gct",
            "choices":[],
            "kinds":[],
            "name":"output.base.name",
            "promptWhenRun":false,
            "defaultValue":"<input.filename_basename>_KMcluster_output",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"Number of centroids (clusters)",
            "choices":[],
            "kinds":[],
            "name":"number.of.clusters",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Seed value for random number generator",
            "choices":[],
            "kinds":[],
            "name":"seed.value",
            "promptWhenRun":false,
            "defaultValue":"12345",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"Whether to cluster by rows or columns",
            "choices":["0=rows", "1=columns"],
            "kinds":[],
            "name":"cluster.by",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"How to compute distance between points",
            "choices":["0=Euclidean", "1="],
            "kinds":[],
            "name":"distance.metric",
            "promptWhenRun":false,
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"KMeansClustering",
    "outputs":["gct"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00081:2"
}, "53":{
    "inputs":[
        {
            "description":"training data file name - .gct, .res, .odf type = Dataset, ignored if a saved model (saved.model.filename) is used",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"train.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"class file for training data - .cls, ignored if a saved model (saved.model.filename) is used",
            "choices":[],
            "kinds":["cls"],
            "name":"train.class.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"input KNN model file - .odf type = KNN Prediction Model",
            "choices":[],
            "kinds":["KNN Prediction Model"],
            "name":"saved.model.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"name of output KNN model file  - .odf type = KNN Prediction Model",
            "choices":[],
            "kinds":[],
            "name":"model.file",
            "promptWhenRun":false,
            "defaultValue":"<train.filename_basename>.model",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"test data file name - .gct, .res, .odf type = Dataset",
            "choices":[],
            "kinds":["gct", "res", "Dataset"],
            "name":"test.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"class file for test data - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"test.class.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"number of selected features if feature list filename is not specified",
            "choices":[],
            "kinds":[],
            "name":"num.features",
            "promptWhenRun":false,
            "defaultValue":"10",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"statistic to use to perform feature selection",
            "choices":["0=SNR", "1=T-Test", "2=SNR (median)", "3=T-Test (median)", "4=SNR (min std)", "5=T-Test (min std)", "6=SNR (median, min std)", "7=T-Test (median, min std)"],
            "kinds":[],
            "name":"feature.selection.statistic",
            "promptWhenRun":false,
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"minimum standard deviation if feature selection statistic includes min std option",
            "choices":[],
            "kinds":[],
            "name":"min.std",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"features to use for prediction",
            "choices":[],
            "kinds":[],
            "name":"feature.list.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.io.File"
        },
        {
            "description":"number of neighbors for KNN",
            "choices":[],
            "kinds":[],
            "name":"num.neighbors",
            "promptWhenRun":false,
            "defaultValue":"3",
            "required":false,
            "type":"java.lang.Integer"
        },
        {
            "description":"weighting type for neighbors",
            "choices":["1=none", "2=One-over-k", "3=distance"],
            "kinds":[],
            "name":"weighting.type",
            "promptWhenRun":false,
            "defaultValue":"distance",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"distance measure",
            "choices":["2=Cosine Distance", "1=Euclidean Distance"],
            "kinds":[],
            "name":"distance.measure",
            "promptWhenRun":false,
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.String"
        },
        {
            "description":"name of output file for prediction results - .odf",
            "choices":[],
            "kinds":[],
            "name":"pred.results.file",
            "promptWhenRun":false,
            "defaultValue":"<test.filename_basename>.pred.odf",
            "required":false,
            "type":"java.lang.String"
        }
    ],
    "name":"KNN",
    "outputs":["Prediction Results", "KNN Prediction Model"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00012:4"
}, "54":{
    "inputs":[
        {
            "description":"data file - .gct, .res, .odf type = Dataset",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"data.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"class file - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"class.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"number of selected features",
            "choices":[],
            "kinds":[],
            "name":"num.features",
            "promptWhenRun":false,
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"statistic to use to perform feature selection",
            "choices":["0=SNR", "1=T-Test", "2=SNR (median)", "3=T-Test (median)", "4=SNR (min std)", "5=T-Test (min std)", "6=SNR (median, min std)", "7=T-Test (median, min std)"],
            "kinds":[],
            "name":"feature.selection.statistic",
            "promptWhenRun":false,
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"minimum standard deviation if feature selection statistic includes min std option",
            "choices":[],
            "kinds":[],
            "name":"min.std",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float"
        },
        {
            "description":"number of neighbors for KNN",
            "choices":[],
            "kinds":[],
            "name":"num.neighbors",
            "promptWhenRun":false,
            "defaultValue":"3",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"weighting type for neighbors",
            "choices":["1=none", "2=One-over-k", "3=distance"],
            "kinds":[],
            "name":"weighting.type",
            "promptWhenRun":false,
            "defaultValue":"distance",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"distance measure",
            "choices":["2=Cosine Distance", "1=Euclidean Distance"],
            "kinds":[],
            "name":"distance.measure",
            "promptWhenRun":false,
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"prediction results output file name .odf type = Prediction Results",
            "choices":[],
            "kinds":[],
            "name":"pred.results.file",
            "promptWhenRun":false,
            "defaultValue":"<data.filename_basename>.pred.odf",
            "required":true,
            "type":"java.lang.String"
        },
        {
            "description":"feature summary output file name - .odf type = Prediction Features",
            "choices":[],
            "kinds":[],
            "name":"feature.summary.file",
            "promptWhenRun":false,
            "defaultValue":"<data.filename_basename>.feat.odf",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"KNNXValidation",
    "outputs":["Prediction Results", "Prediction Features"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00013:6"
}, "140":{
    "inputs":[],
    "name":"job185",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:19:2"
}, "142":{
    "inputs":[],
    "name":"job188",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:21:1"
}, "141":{
    "inputs":[],
    "name":"job188",
    "outputs":[],
    "type":"pipeline",
    "lsid":"urn:lsid:8080.tabor.bm4e9-098.broadinstitute.org:genepatternmodules:20:1"
}, "50":{
    "inputs":[
        {
            "description":"Data file (missing values are stored as NA) - .gct",
            "choices":[],
            "kinds":["gct"],
            "name":"data.filename",
            "promptWhenRun":false,
            "defaultValue":"",
            "required":true,
            "type":"java.io.File"
        },
        {
            "description":"Number of neighbors to be used in the imputation",
            "choices":[],
            "kinds":[],
            "name":"k",
            "promptWhenRun":false,
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Integer"
        },
        {
            "description":"The maximum percent missing data allowed in any row",
            "choices":[],
            "kinds":[],
            "name":"rowmax",
            "promptWhenRun":false,
            "defaultValue":"0.5",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"The maximum percent missing data allowed in any column",
            "choices":[],
            "kinds":[],
            "name":"colmax",
            "promptWhenRun":false,
            "defaultValue":"0.8",
            "required":true,
            "type":"java.lang.Float"
        },
        {
            "description":"The name of the output file - .gct",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "promptWhenRun":false,
            "defaultValue":"<data.filename_basename>.imputed.gct",
            "required":true,
            "type":"java.lang.String"
        }
    ],
    "name":"ImputeMissingValues.KNN",
    "outputs":["gct"],
    "type":"module",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00054:13"
}}
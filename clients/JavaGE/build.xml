<?xml version="1.0" encoding="UTF-8"?>

<project basedir="src" default="targets" name="Graphical Environment for GenePattern">

	<target description="Echos all the targets" name="targets">
		<antstructure output="../gpge.dtd" />
		<echo append="true">
			<![CDATA[This should be a complete build file needed to compile and make GenePattern Graphical Environment as a jar file.

Targets:

package
creates a jar file that can be run with the current lib directory.

clean
removes all class files

compile
compiles modified java files

build
cleans then compiles all java files

run
runs the program without first creating the jar file.  Note that it does not build nor compile first.

To build the project from scratch:
ant build

To create a test jar file:
ant package
]]>
		</echo>
	</target>

	<target name="setCvsTag" unless="cvsTag">
		<property name="cvsTag" value="This build was not tagged in CVS" />
	</target>

	<target name="init" depends="setCvsTag">
		<echo message="gpge basedir: ${basedir}" />
		<!-- Create the time stamp -->
		<tstamp />
		<property name="appfile" value="../gpge.jar" description="The name of the application file (.jar)" />
		<property name="version_file" value="org/genepattern/gpge/resources/build.properties" description="Set this to the location of the version property file." />
		<property name="manifest" value="../gp.mf" description="The manifest file" />
		<property name="initials" value="gpge" description="The initials for the version properties" />
		<property name="gpge_dist_dir" value="../../gpge_distibution" description="The path to the ditribution dir for GenePattern Graphical Environment" />

		<property name="root_dir" value="../../.." description="The path to the library" />
		<path id="library.classpath" description="defines the classpath based on the value of &apos;libpath&apos;.">
			<fileset dir="${root_dir}/lib" id="jar.dir.1">
				<include name="*.jar" />
				<include name="*.zip" />
			</fileset>
			<fileset dir="${root_dir}/website/WEB-INF/lib" id="jar.dir.2">
				<include name="*.jar" />
				<include name="*.zip" />
			</fileset>
			<fileset dir="${root_dir}/build" id="jar.dir.3" includes="gpwebservice.jar broad-cg.jar ui_support.jar, runMain.jar" />

		</path>

	</target>



	<target name="package" depends="compile" description="Compiles and creates the jar file">
		<jar destfile="${appfile}" manifest="${manifest}">
			<fileset dir="build" includes="**" />
			<fileset dir="." includes="org/genepattern/gpge/resources/**" />
		</jar>
	</target>



	<target name="clean" description="Removes all the .class files">
		<delete>
			<fileset dir="build" includes="**/*.class" />
		</delete>
	</target>

	<target name="compile" depends="init" description="Compiles the .java files that have been modified or that don&apos;t have .class files">
		<mkdir dir="build" />
		<javac debug="true" defaultexcludes="true" deprecation="false" destdir="build" includes="**" optimize="false" proceed="false" srcdir=".">
			<classpath refid="library.classpath" />
		</javac>
	</target>


	<target depends="clean,compile" description="Cleans the source then compiles all" name="build" />

	<target depends="init" description="Run the program" name="run">
		<java classname="org.genepattern.gpge.GenePattern" fork="true">
			<classpath>
				<pathelement location="../gpge.jar" />
				<fileset refid="jar.dir.1" />
				<fileset refid="jar.dir.2" />
				<fileset refid="jar.dir.3" />
			</classpath>
		</java>
	</target>



	<target depends="init, package" name="create_dist">

		<delete dir="${gpge_dist_dir}" />
		<mkdir dir="${gpge_dist_dir}" />
		<copy file="../gpge.jar" todir="${gpge_dist_dir}" />
		<copy todir="${gpge_dist_dir}/lib/">
			<fileset dir="../lib" />
		</copy>

		<copy todir="${gpge_dist_dir}/languages">
			<fileset dir="../languages" />
		</copy>
	</target>



</project>

/*
 * ObjectTextField.java
 *
 * Created on March 24, 2003, 2:39 PM
 */

package org.genepattern.gpge.ui.graphics.draggable;
 
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.io.BufferedReader;
import java.io.File;
import java.util.List;

import javax.swing.border.EtchedBorder;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import org.genepattern.gpge.ui.graphics.draggable.TransferableTreePath;
/**
 *
 * @author  kohm
 */
public class ObjectTextField extends javax.swing.JTextField {

    /** Creates new form ObjectTextField */
    public ObjectTextField() {
        this(null, 10);
    }
    /** Creates new form ObjectTextField */
    public ObjectTextField(final String text, final int cols) {
        super(text, cols);
        initComponents();
        setEditable(false);
        // Also, make this a drop target
        DropTarget dropTarget = new DropTarget(this, new ObjectDropTargetListener());
        dropTarget.setDefaultActions(DnDConstants.ACTION_COPY_OR_MOVE);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents

        setToolTipText("Drag and Drop objects onto this");
        setEditable(false);
        setBorder(new javax.swing.border.EtchedBorder(java.awt.Color.darkGray, java.awt.Color.orange));
    }//GEN-END:initComponents
    /** sets the object and it's text representation */
    public void setObject(final Object object) {
        this.object = object;
		  this.setText(object.toString());  
		  if(object instanceof java.net.URL) {
			  java.net.URL url = (java.net.URL) object;
			  if("file".equals(url.getProtocol())) {
				  java.io.File file = new java.io.File(url.getFile());
				  this.object = file;
			  } 
		  } 
        indicateGoodDrop();
    }
    /** gets the object */
    public Object getObject() {
        return this.object;
    }
    /** sets the String representation of the type that this Component accepts as a Drop */
    public void setDropType(final String type) {
        this.type = type;
    }

    // helpers that cause visual change depending on if the drop target is ok or not
    /** indicates normal */
    protected void indicateNormal() {
        setBorder(normal_border);
    }
    /** indicates bad drop target */
    protected void indicateBadDrop() {
        if( bad_border == null )
            bad_border = new EtchedBorder(java.awt.Color.darkGray, java.awt.Color.red);
        setBorder(bad_border);
    }
    /** indicates good drop */
    protected void indicateGoodDrop() {
        if( good_border == null )
            good_border = new EtchedBorder(java.awt.Color.darkGray, java.awt.Color.green);
        setBorder(good_border);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    /** the object that is displayed */
    private Object object;
    /** the String representation of the type that this Component accepts as a Drop */
    private String type;
    /** normal border    */
    private EtchedBorder normal_border = new EtchedBorder(java.awt.Color.darkGray, java.awt.Color.orange);
    /** good drop border */
    private EtchedBorder good_border;
    /** bad drop border  */
    private EtchedBorder bad_border;
   // I N N E R  C L A S S E S

   class ObjectDropTargetListener implements java.awt.dnd.DropTargetListener {


        public final void dragEnter(final DropTargetDragEvent e) {
        	System.out.println("OBJ dragEnter" + isDragAcceptable(e));

            if (!isDragAcceptable(e)) {
                e.rejectDrag();
                indicateBadDrop();
            } else {
                e.acceptDrag(e.getDropAction());
                System.out.println("Accepted drop from source: "+e.getSource());
                indicateGoodDrop();
            }
        }

        public final void dragExit(final DropTargetEvent e) {
            indicateNormal();
        }

        /**
         * This is where the ghost image is drawn
         */
        public final void dragOver(final DropTargetDragEvent e) {


        }

        public final void dropActionChanged(final DropTargetDragEvent e) {
            if (!isDragAcceptable(e))
                e.rejectDrag();
            else
                e.acceptDrag(e.getDropAction());
        }

        public final void drop(final DropTargetDropEvent e) {
            //_timerHover.stop();	// Prevent hover timer from doing an unwanted expandPath or collapsePath
            if ( !isDropAcceptable(e) ) {
                e.rejectDrop();
                return;
            }

            e.acceptDrop(e.getDropAction());

            final Transferable transferable = e.getTransferable();

            DataFlavor[] flavors = transferable.getTransferDataFlavors();
            final int limit = flavors.length;
            System.out.println("In drop "+limit+" flavors...");
            boolean dropComplete = false;

            for (int i = 0; i < limit; i++ ) {
                final DataFlavor flavor = flavors[i];
                System.out.println("__" + flavor);
                try {
                    if( flavor.isMimeTypeEqual(DataFlavor.javaJVMLocalObjectMimeType) ) {
                        final TreePath pathSource = (TreePath) transferable.getTransferData(flavor);
                        final Object last = pathSource.getLastPathComponent();
               
                        if( last instanceof DefaultMutableTreeNode) {
                            final DefaultMutableTreeNode node = (DefaultMutableTreeNode)last;
                            setObject(node);
                            dropComplete = true;
                            break;
                        } else if( last instanceof org.genepattern.gpge.ui.treetable.FileNode ) {
                            final org.genepattern.gpge.ui.treetable.FileNode node = (org.genepattern.gpge.ui.treetable.FileNode)last;
                            setObject(node.getFile());
							dropComplete = true;
                            break;
                        } else {
                            System.out.println("Note couldn't handle class "+last);
                        }
                    } else if( flavor.isMimeTypeEqual(DataFlavor.javaFileListFlavor.getMimeType()) ) {
                        final List files = (List)transferable.getTransferData(flavor);
                        final File file = (File)files.get(0);
                        setObject(file);
						dropComplete = true;
                        break;
                    } else if( flavor.isMimeTypeEqual(DataFlavor.stringFlavor.getMimeType()) ){
                        String text = ((String)transferable.getTransferData(flavor)).trim();
								text = new java.util.StringTokenizer(text, System.getProperty("line.separator")).nextToken(); // XXX jgould hack for netscape 7.1 on windows
                        try {
                            setObject(new java.net.URL(text));
							dropComplete = true;
                            break;
                        } catch (java.net.MalformedURLException ex) {
                            System.err.println("Original text='"+text+"'");
                            System.err.println("not a URL "+ex.getMessage());
                        }
                    } else if (flavor.isMimeTypeEqual(textFlavor.getMimeType())) {
                        BufferedReader br = new BufferedReader(flavor.getReaderForText(transferable));

                        String text = br.readLine().trim();
                        br.close();
                        try {
                            setObject(new java.net.URL(text));
							dropComplete = true;
                            break;
                        } catch (java.net.MalformedURLException ex) {
                            System.err.println("Original text='"+text+"'");
                            System.err.println("not a URL "+ex.getMessage());
                        }
                    }
                } catch (UnsupportedFlavorException ufe) {
                        System.out.println(ufe);
                   }
                    catch (java.io.IOException ioe) {
                        System.out.println(ioe);
                    }
            }

            e.dropComplete(dropComplete);
        }



        // Helpers...
        public final boolean isDragAcceptable(final DropTargetDragEvent e) {
            boolean accept = false;
            // Only accept COPY or MOVE gestures (ie LINK is not supported)
          //  if ((e.getDropAction() & DnDConstants.ACTION_COPY_OR_MOVE) == 0)
           //     return false;

            // Only accept particular flavors
            if (!isDataFlavorSupported(e))
                return false;
            return true;
        }

        public final boolean isDropAcceptable(final DropTargetDropEvent e) {
            System.out.println("DropTargetDropEvent="+e);

            // Only accept COPY or MOVE gestures (ie LINK is not supported)
          //  System.out.println("checking for Copy or Move "+e.getDropAction());
          //  if ((e.getDropAction() & DnDConstants.ACTION_COPY_OR_MOVE) == 0)
            //    return false;

            // Only accept particular flavors
            final boolean is_acceptable = isDataFlavorSupported(e);
            System.out.println("Is this flavor acceptable "+is_acceptable);
            if( !is_acceptable ) {
                System.out.println("Available flavors of the drop are:");
                //edu.mit.genome.debug.FieldDumper.printArray(e.getCurrentDataFlavors(), System.out, "\n");
                return false;
            }
           return true;
        }
        /** determines if the DropTargetDropEvent will support one of the flavors */
        protected final boolean isDataFlavorSupported(final DropTargetDropEvent e) {
            final int limit = getOkFlavors().length;
            for(int i = 0; i < limit; i++) {
                if ( e.isDataFlavorSupported(getOkFlavors()[i]) )
                    return true;
            }

			if ( e.isDataFlavorSupported(DataFlavor.stringFlavor)
				|| e.isDataFlavorSupported(textFlavor) ) {
				return true;
			}
			if(e.isDataFlavorSupported(java.awt.datatransfer.DataFlavor.javaFileListFlavor)) {
				//Transferable transferable = e.getTransferable();
				//try {
				//	List files = (List)transferable.getTransferData(java.awt.datatransfer.DataFlavor.javaFileListFlavor);
				//	File file = (File)files.get(0);
			//		return !file.isDirectory();
			//	} catch(Exception ex) {
			//		ex.printStackTrace();
			//	}
				return true;
			}

            return false;
        }
        /** determines if the DropTargetDragEvent will support one of the flavors */
        protected final boolean isDataFlavorSupported(final DropTargetDragEvent e) {
            final int limit = getOkFlavors().length;
            for(int i = 0; i < limit; i++) {
                if ( e.isDataFlavorSupported(getOkFlavors()[i]) )
                    return true;
            }
            if( e.isDataFlavorSupported(DataFlavor.stringFlavor) ) {
                return true;
            }
				return e.isDataFlavorSupported(java.awt.datatransfer.DataFlavor.javaFileListFlavor);
        }
        // fields
        /** all the supported data flavors  note String Flavor is supported differently since it is assumes that
         * it actually is a URL
         */
        protected DataFlavor[] getOkFlavors(){
        	if (ok_flavors == null){
        		try {
        			textFlavor = new DataFlavor("text/plain; class=java.io.InputStream");
					ok_flavors = new DataFlavor[] {
							TransferableTreePath.TREEPATH_FLAVOR
						};
        		} catch (ClassNotFoundException e){e.printStackTrace();}
        	}
        	return ok_flavors;
        }

        protected  DataFlavor[] ok_flavors = null;
        protected  DataFlavor textFlavor = null;
   } // end DropTargetListener inner class

}

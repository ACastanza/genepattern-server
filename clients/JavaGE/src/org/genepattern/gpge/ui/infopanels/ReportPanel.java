/*
 * ReportPanel.java
 *
 * Created on April 28, 2003, 11:53 AM
 */

package org.genepattern.gpge.ui.infopanels;

import java.awt.GraphicsEnvironment;
import java.awt.GraphicsConfiguration;
import java.awt.Dimension;
import java.net.URL;
import java.util.Properties;

import javax.mail.Session;
import javax.mail.internet.InternetAddress;
import javax.mail.Transport;
import javax.mail.Message;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;

import org.genepattern.gpge.GenePattern;
import org.genepattern.gpge.util.BuildProperties;
import org.genepattern.util.GPpropertiesManager;



/**
 *
 * @author  kohm
 */
public class ReportPanel extends javax.swing.JPanel {
    
    /** Creates new form ReportPanel */
    public ReportPanel() {
        initComponents();
    }
    
    /** Creates a new ReportPanel populated with the text */
    public ReportPanel(final URL preamble, final StringBuffer buffer) throws java.io.IOException{
        this();
        preamble_editorPane.setPage (preamble);
        this.buffer = buffer;
        textArea.setText(buffer.toString());
        bugreport_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBugReport(evt);
            }
        });
        // conditionaly set the preferred size
        //        final GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        //        final GraphicsConfiguration gc = ge.getScreenDevices()[0].getConfigurations()[0];
        //        final Dimension dim = gc.getBounds().getSize();
        //        final Dimension pref_size = getPreferredSize();
        //        if( dim != null && pref_size != null) {
        //            final int h = Math.min(pref_size.height, dim.height);
        //            final int w = Math.min(pref_size.width, dim.width);
        //            if( h != pref_size.height || w != pref_size.width)
        //                setPreferredSize(new Dimension(w, h));
        //        }
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        editors_ScrollPane = new javax.swing.JScrollPane();
        preamble_editorPane = new javax.swing.JEditorPane();
        faq_button = new javax.swing.JButton();
        text_scrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        copy_button = new javax.swing.JButton();
        clear_button = new javax.swing.JButton();
        bugreport_button = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        editors_ScrollPane.setPreferredSize(new java.awt.Dimension(450, 100));
        preamble_editorPane.setEditable(false);
        editors_ScrollPane.setViewportView(preamble_editorPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.33;
        add(editors_ScrollPane, gridBagConstraints);

        faq_button.setText("View FAQ");
        faq_button.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        //add(faq_button, gridBagConstraints);

        text_scrollPane.setPreferredSize(new java.awt.Dimension(450, 150));
        textArea.setEditable(false);
        textArea.setColumns(80);
        textArea.setRows(10);
        text_scrollPane.setViewportView(textArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.66;
        add(text_scrollPane, gridBagConstraints);

        copy_button.setText("Copy");
        copy_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copy(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 0.3;
        add(copy_button, gridBagConstraints);

        clear_button.setText("Clear");
        clear_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.weightx = 0.3;
        add(clear_button, gridBagConstraints);

        bugreport_button.setText("Create Bug Report");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.weightx = 1.0;
        add(bugreport_button, gridBagConstraints);

    }//GEN-END:initComponents
    /** clears all text from the textArea is equivalent to select all,
     * then cut operations*/
    private void clear(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear
        textArea.setEditable(true);
        textArea.selectAll();
        textArea.cut();
        buffer.setLength(0);
        textArea.setEditable(false);
    }//GEN-LAST:event_clear
    /** copies all text in the textArea to the clipboard */
    private void copy(java.awt.event.ActionEvent evt) {
        // Add your handling code here:
        textArea.selectAll();
        textArea.copy();
    }
    
	/** copies all text in the textArea to the clipboard */
	 private void createBugReport(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copy
		 		 		
		java.net.URL url = ClassLoader.getSystemResource ("edu/mit/genome/gp/resources/Error_preamble.html"); 
	
		SendMailPanel mail_panel = new SendMailPanel();
		
		Object[] options = { "Send", "Cancel" };
		int result = JOptionPane.showOptionDialog(GenePattern.getDialogParent(), mail_panel, "Bug Report",JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
		if(result!=JOptionPane.OK_OPTION) {
			return;
		} 
		String description = mail_panel.getDescriptionText();
		
		java.util.TreeMap tmProps = new java.util.TreeMap(System.getProperties());
		StringBuffer propsBuffer = new StringBuffer();
		for (java.util.Iterator iProps = tmProps.keySet().iterator(); iProps.hasNext(); ) {
           String propName = (String)iProps.next();
           String propValue = (String)tmProps.get(propName);
           propsBuffer.append(propName);
			  propsBuffer.append("=");
			  propsBuffer.append(propValue);
			  propsBuffer.append("\n");
		}   
		String info = BuildProperties.PROGRAM_NAME+" "+BuildProperties.FULL_VERSION+"  Build: "+BuildProperties.BUILD;
      String messageText = "\n" + info + "\n" + description + "\n\n" + textArea.getText() + "\n\n" + propsBuffer;
		
		
		String returnAddress = mail_panel.getEmailAddress();
		if( returnAddress == null || returnAddress.trim().length() == 0 ) {
			returnAddress = DEFAULT_MAIL_RETURN_ADDRESS;
		}
		boolean sent = false;

		try {
			String host = GPpropertiesManager.getProperty("gp.mail.host");
			if( host == null || host.trim().length() == 0 ) {
				host = DEFAULT_MAIL_HOST;
			}
			String address = GPpropertiesManager.getProperty("gp.mail.helpAddress");
			if( address == null || address.trim().length() == 0 ) {
				address = DEFAULT_MAIL_HELP_ADDRESS;
			}
			
			Properties p = new Properties();
			p.put("mail.host", host);
			Session mailSession = Session.getDefaultInstance(p, null);
			mailSession.setDebug(true);
			MimeMessage msg = new MimeMessage(mailSession);
		   // Put data from request into message
		    msg.setSubject("Error sent from GenePattern");
			msg.setText(messageText);
			msg.setFrom(new InternetAddress(returnAddress));
			
		    msg.addRecipient(Message.RecipientType.TO,  new InternetAddress(address));       
			Transport.send(msg);	
			sent = true;
						   
		} catch (Exception e){
			e.printStackTrace();
			sent = false;
		}
		if (sent){
			javax.swing.JOptionPane.showMessageDialog(GenePattern.getDialogParent(),"The message and error traces\nhave been sent to gp-help");
	 	} else {
			javax.swing.JOptionPane.showMessageDialog(GenePattern.getDialogParent(),"The message and error traces\ncould not be sent.  Please email from another program\n to gp-help", "Error sending mail", JOptionPane.ERROR_MESSAGE);		
		}
	 }//GEN-LAST:event_copy
     
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bugreport_button;
    private javax.swing.JButton clear_button;
    private javax.swing.JButton copy_button;
    private javax.swing.JScrollPane editors_ScrollPane;
    private javax.swing.JButton faq_button;
    private javax.swing.JEditorPane preamble_editorPane;
    private javax.swing.JTextArea textArea;
    private javax.swing.JScrollPane text_scrollPane;
    // End of variables declaration//GEN-END:variables
    /** the buffer where the messages are kept */
    private StringBuffer buffer;
    
	private static String DEFAULT_MAIL_HOST = "imap.broad.mit.edu";
	private static String DEFAULT_MAIL_HELP_ADDRESS ="gp-help@broad.mit.edu";
	private static String DEFAULT_MAIL_RETURN_ADDRESS ="anonymous@genepatternusers.org";
}

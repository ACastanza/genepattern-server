{"338":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The set of CSV files with clustering results (of a single data file). May be a .zip file, a directory, or a text file listing all input file paths (one file per line).",
            "choices":[],
            "kinds":[],
            "name":"Input.CSV.files",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Calculate and output the number of cells in each sub-population?",
            "choices":["TRUE=Yes, default", "FALSE=No"],
            "kinds":[],
            "name":"Calculate.number.of.cells",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Calculate and output the percentage (proportion) of cells in each sub-population?",
            "choices":["TRUE=Yes, default", "FALSE=No"],
            "kinds":[],
            "name":"Calculate.percentage.of.cells",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Calculate mean parameter values (e.g. Mean Fluorescence Intensities) for all parameters of each sub-population?",
            "choices":["TRUE=Yes, default", "FALSE=No"],
            "kinds":[],
            "name":"Calculate.means",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The name of the output CSV file.",
            "choices":[],
            "kinds":[],
            "name":"Output.CSV.file.name",
            "numValues":"0-1",
            "defaultValue":"features.csv",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FCMFeatureExtraction",
    "write":false,
    "tags":["csv"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00201:1"
}, "339":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The set of input FCS files to be tested.",
            "choices":[],
            "kinds":[],
            "name":"Input.FCS.data.files",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Run the cell number control test.",
            "choices":["TRUE=Yes, default", "FALSE=No, skip this."],
            "kinds":[],
            "name":"Perform.cell.number.test",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Run the boundary events test.",
            "choices":["TRUE=Yes, default", "FALSE=No, skip this."],
            "kinds":[],
            "name":"Perform.boundary.events.test",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Run the timeflow test, i.e., check whether the flow rate was steady and uninterrupted.",
            "choices":["TRUE=Yes, default", "FALSE=No, skip this."],
            "kinds":[],
            "name":"Perform.timeflow.test",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Run the timeline test, i.e., detect unexpected non-random acquisition of fluorescence intensities.",
            "choices":["TRUE=Yes, default", "FALSE=No, skip this."],
            "kinds":[],
            "name":"Perform.timeline.test",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Zip the resulting report together?",
            "choices":["TRUE=Yes, default", "FALSE=No"],
            "kinds":[],
            "name":"Zip.output",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"FCMSinglePanelQC",
    "write":false,
    "tags":["HTML"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00203:1"
}, "332":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"An FCS data file to be de-identified.",
            "choices":[],
            "kinds":["fcs"],
            "name":"Input.FCS.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Comma-separated list of keyword names (escape comma by '\\' if part of a keyword name) or regular expression to match keywords to be removed.",
            "choices":[],
            "kinds":[],
            "name":"Remove.keywords",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Is a regular expression used in the list of keywords to remove? If not (default) a simple comma-separated list of keyword names is expected. In this list, comma may be escaped by '\\' if part of a keyword name, e.g., this \\, is in the keyword.",
            "choices":["Yes=Yes", "No=No, default"],
            "kinds":[],
            "name":"Is.regular.expression.used",
            "numValues":"0-1",
            "defaultValue":"No",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Output FCS file name.",
            "choices":[],
            "kinds":[],
            "name":"Output.FCS.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.FCS.data.file_basename>.deidentified.<Input.FCS.data.file_extension>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"DeIdentifyFCS",
    "write":false,
    "tags":["fcs"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00268:1"
}, "333":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input FCS data file; one or more data sets will be extracted from this file.",
            "choices":[],
            "kinds":["fcs"],
            "name":"Input.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The name for the output file. Uses the input data file name (for example, name.fcs) as the default, and adds _datasetIndex to the name (e.g., name_datasetIndex.fcs).",
            "choices":[],
            "kinds":[],
            "name":"Output.file.name",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A list of data set indexes to be extracted from the data file (e.g., 1-3, 5, 8). The first data set has the index 1, the second the index 2, etc. All data sets will be extracted if no indexes are provided.",
            "choices":[],
            "kinds":[],
            "name":"Dataset.indexes",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ExtractFCSDataset",
    "write":false,
    "tags":["fcs"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00182:2"
}, "159":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Copy number file - .cn",
            "choices":[],
            "kinds":["cn"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Number of permutations used for p-value computation",
            "choices":[],
            "kinds":[],
            "name":"permutations",
            "numValues":"0-1",
            "defaultValue":"10000",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Significance levels for the test to accept change-points",
            "choices":[],
            "kinds":[],
            "name":"alpha",
            "numValues":"0-1",
            "defaultValue":"0.01",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The seed for the random number generator",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"12345678",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file.name",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>.cbs.txt",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"CBS",
    "write":false,
    "tags":["cbs.txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00121:1"
}, "330":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"An input FCS data file to be described.",
            "choices":[],
            "kinds":["fcs"],
            "name":"Input.FCS.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Output file format, either HTML or XML, default HTML.",
            "choices":["HTML=HTML, default", "XML=XML"],
            "kinds":[],
            "name":"Output.file.format",
            "numValues":"0-1",
            "defaultValue":"HTML",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The output file name (optional).",
            "choices":[],
            "kinds":[],
            "name":"Output.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.FCS.data.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"PreviewFCS",
    "write":false,
    "tags":["html", "xml"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00185:2"
}, "158":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Clustered data table, contains the original data, but reordered",
            "choices":[],
            "kinds":["cdt"],
            "name":"cdt.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Gene tree file, records the order in which genes (rows) were joined (at least one of gtr file and atr file is required)",
            "choices":[],
            "kinds":["gtr"],
            "name":"gtr.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Array tree file, records the order in which samples (columns) were joined (at least one of gtr file and atr file is required)",
            "choices":[],
            "kinds":["atr"],
            "name":"atr.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"HierarchicalClusteringViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"9",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00031:9"
}, "331":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input FCS data file from which the module will extract keyword/value pairs.",
            "choices":[],
            "kinds":["fcs"],
            "name":"Input.FCS.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The file format to be used to store the extracted keywords/value pairs.",
            "choices":["CSV=CSV file, default", "FCS=Text file with FCS text segment chunk "],
            "kinds":[],
            "name":"Keywords.output.mode",
            "numValues":"0-1",
            "defaultValue":"CSV",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The name for the file in which the keyword/value pairs are stored.",
            "choices":[],
            "kinds":[],
            "name":"Keywords.output.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.FCS.data.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ExtractFCSKeywords",
    "write":false,
    "tags":["csv", "txt"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00181:2"
}, "157":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The dataset to display - .gct, .res, odf type=Dataset",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"dataset",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"HeatMapViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"9",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00010:9"
}, "336":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"An FCS data file to be gated.",
            "choices":[],
            "kinds":["fcs"],
            "name":"Input.FCS.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A Gating-ML file specifying the gates.",
            "choices":[],
            "kinds":[".xml"],
            "name":"Input.Gating-ML.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Base for output file names",
            "choices":[],
            "kinds":[],
            "name":"Output.base.name",
            "numValues":"0-1",
            "defaultValue":"<Input.FCS.data.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Also output figures of the gates",
            "choices":["none=None, default", "png=PNG"],
            "kinds":[],
            "name":"Output.figures",
            "numValues":"0-1",
            "defaultValue":"none",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"ApplyGatingML",
    "write":false,
    "tags":["csv", "xml", "png", "txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00197:1"
}, "156":{
    "category":"Annotation",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file to be annotated (res, gct, or odf format, or text file containing one probe per line). Annotations will be retrieved based on affymetrix probe ids.",
            "choices":[],
            "kinds":["res", "gct", "Dataset", "txt"],
            "name":"Input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Name of the output file containing the annotations (same format as input) that will be created.",
            "choices":[],
            "kinds":[],
            "name":"Output.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.filename_basename>.annot",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Where to write the annotations in the output file",
            "choices":["0=Append to probe id", "1=Append to description", "2=Replace description", "3=Write to annotation file"],
            "kinds":[],
            "name":"Annotation.Column",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "Affymetrix Description=include"],
            "kinds":[],
            "name":"Affymetrix.Description",
            "numValues":"0-1",
            "defaultValue":"Affymetrix Description",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "LocusLink Locus ID=include"],
            "kinds":[],
            "name":"LocusLink.ID",
            "numValues":"0-1",
            "defaultValue":"LocusLink Locus ID",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "LocusLink Description=include"],
            "kinds":[],
            "name":"LocusLink.Gene.Name",
            "numValues":"0-1",
            "defaultValue":"LocusLink Description",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "LocusLink Symbol=include"],
            "kinds":[],
            "name":"LocusLink.Symbol",
            "numValues":"0-1",
            "defaultValue":"LocusLink Symbol",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "LocusLink Location=include"],
            "kinds":[],
            "name":"LocusLink.Location",
            "numValues":"0-1",
            "defaultValue":"LocusLink Location",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "Unigene Human Cluster=include"],
            "kinds":[],
            "name":"UniGene.HS.Cluster.ID",
            "numValues":"0-1",
            "defaultValue":"Unigene Human Cluster",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "Unigene Human Description=include"],
            "kinds":[],
            "name":"UniGene.HS.Description",
            "numValues":"0-1",
            "defaultValue":"Unigene Human Description",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "Unigene Mouse Cluster=include"],
            "kinds":[],
            "name":"UniGene.MM.Cluster.ID",
            "numValues":"0-1",
            "defaultValue":"Unigene Mouse Cluster",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "Unigene Mouse Description=include"],
            "kinds":[],
            "name":"UniGene.MM.Description",
            "numValues":"0-1",
            "defaultValue":"Unigene Mouse Description",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"GeneCruiser",
    "write":false,
    "tags":["res", "gct", "Dataset"],
    "type":"module",
    "version":"6",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00037:6"
}, "337":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A FCS data file to be compensated",
            "choices":[],
            "kinds":["fcs"],
            "name":"FCS.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A text file with spillover matrix. Use this parameter if there is no spillover matrix in the input FCS file or to use a spillover matrix different from the matrix in the input FCS file. The value from the FCS data file will be used if this parameter is not specified.",
            "choices":[],
            "kinds":["txt"],
            "name":"Spillover.matrix.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The name of the output file. The extension will match the file format specified in Output file format.",
            "choices":[],
            "kinds":[],
            "name":"Output.file.name",
            "numValues":"0-1",
            "defaultValue":"<FCS.data.file_basename>.compensated",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The file format in which to save the compensated data.",
            "choices":["FCS=FCS, default", "CSV=CSV", "RData=RData"],
            "kinds":[],
            "name":"Output.file.format",
            "numValues":"0-1",
            "defaultValue":"FCS",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"CompensateFCS",
    "write":false,
    "tags":[".RData (R Data)", "csv", "fcs"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00191:1"
}, "155":{
    "category":"caBIG",
    "description":"description goes here",
     "inputs":[
        {
            "description":"URL for caArray server.",
            "choices":[],
            "kinds":[],
            "name":"url",
            "numValues":"0-1",
            "defaultValue":"http://array.nci.nih.gov:8080",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Title or identifier of the caArray experiment to import data from.",
            "choices":[],
            "kinds":[],
            "name":"experiment",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Type of bioassay data to be retrieved.",
            "choices":["RAW", "DERIVED"],
            "kinds":[],
            "name":"type",
            "numValues":"0-1",
            "defaultValue":"RAW",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Data file extension to be retrieved.",
            "choices":[],
            "kinds":[],
            "name":"extension",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Name of the zip file to be created.",
            "choices":[],
            "kinds":[],
            "name":"zipFileName",
            "numValues":"0-1",
            "defaultValue":"<experiment>.zip",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Username for caArray server",
            "choices":[],
            "kinds":[],
            "name":"username",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Password for caArray server",
            "choices":[],
            "kinds":[],
            "name":"password",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"PASSWORD",
            "fileChoice":false
        }
    ],
    "name":"CaArray2.3.0Importer",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00171:3"
}, "334":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input FCS data file from which to extract parameters.",
            "choices":[],
            "kinds":["fcs"],
            "name":"Input.FCS.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A list of parameters to extract; parameters may be specified by their indexes (e.g., 1-3, 5, 8) or by their short names (e.g., FSC-H, SSC-H, FL1-A, FL3-H).",
            "choices":[],
            "kinds":[],
            "name":"Parameters.to.extract",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The output file name. The default uses the input file name as the base.",
            "choices":[],
            "kinds":[],
            "name":"Output.file.name",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"ExtractFCSParameters",
    "write":false,
    "tags":["fcs"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00180:2"
}, "154":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input file - .res, .gct, .odf type=Dataset",
            "choices":[],
            "kinds":["Dataset", "gct", "res"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The class file - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The class file containing the confounding variable.",
            "choices":[],
            "kinds":["cls"],
            "name":"confounding.variable.cls.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The test to perform",
            "choices":["0=Class 0", "1=Class 1", "2=2 Sided"],
            "kinds":[],
            "name":"test.direction",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The statistic to use",
            "choices":["1=SNR", "0=T-Test", "3=SNR (median)", "2=T-Test (median)", "4=T-Test (min std)", "5=SNR (min std)", "6=SNR (median, min std)", "7=T-Test (median, min std)", "8=Paired T-Test"],
            "kinds":[],
            "name":"test.statistic",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"The minimum standard deviation if test statistic includes min std option",
            "choices":[],
            "kinds":[],
            "name":"min.std",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The number of permutations to perform (use 0 to calculate asymptotic p-values using the standard independent two-sample t-test)",
            "choices":[],
            "kinds":[],
            "name":"number.of.permutations",
            "numValues":"0-1",
            "defaultValue":"1000",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to perform all possible permutations",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"complete",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to perform balanced permutations",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"balanced",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The seed of the random number generator used to produce permutations",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"779948241",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Whether to smooth p-values",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"smooth.p.values",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Tests to perform when cls file has more than two classes (Note: not fully corrected for multiple hypothesis testing)",
            "choices":["one versus all", "all pairs"],
            "kinds":[],
            "name":"phenotype.test",
            "numValues":"0-1",
            "defaultValue":"one versus all",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>.comp.marker.odf",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ComparativeMarkerSelection",
    "write":false,
    "tags":["Comparative Marker Selection"],
    "type":"module",
    "version":"6",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00044:6"
}, "335":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"An FCS data file to remove saturated events from.",
            "choices":[],
            "kinds":["fcs"],
            "name":"Input.FCS.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The output FCS file name.",
            "choices":[],
            "kinds":[],
            "name":"Output.FCS.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.FCS.data.file_basename>.without_saturated.fcs",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"RemoveSaturatedFCSEvents",
    "write":false,
    "tags":["fcs"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00210:1"
}, "152":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A .zip file containing preprocessed flow sample files in tab-delimited .txt format.",
            "choices":[],
            "kinds":["zip"],
            "name":"preprocessed.data",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"An integer; minimal number of clusters to be fit for each sample.",
            "choices":[],
            "kinds":[],
            "name":"g.min",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"An integer; maximal number of clusters to be fit for each sample. g max should be greater or equal to g min.",
            "choices":[],
            "kinds":[],
            "name":"g.max",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Density distribution to be used for clustering",
            "choices":["normal", "t", "skewn=skew normal", "skewt=skew t"],
            "kinds":[],
            "name":"density",
            "numValues":"0-1",
            "defaultValue":"skewt",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A comma-separated list of either channel numbers (e.g., 1, 2, 3, 7) or channel names (e.g., CD4, CD45RA, ZAP70); these denote which antibodies in the (preprocessed) data sample to be used for clustering.",
            "choices":[],
            "kinds":[],
            "name":"channels.to.cluster",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Used only for skew distributions. Whether to estimate the mode for each cluster. Must be the same value used in FLAMEMixtureModel.",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"estimate.mode",
            "numValues":"0-1",
            "defaultValue":"F",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Used only for skew distributions and when estimate mode is set to yes. The smaller the increment, the more accurate the estimation, but the slower the estimation step. Must be the same value used in FLAMEMixtureModel.",
            "choices":[],
            "kinds":[],
            "name":"estimation.increment",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"An integer; the seed fixes random computational processes during computation. This does not need to be changed under most circumstances.",
            "choices":[],
            "kinds":[],
            "name":"seed",
            "numValues":"0-1",
            "defaultValue":"123456",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"A prefix for output files.",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<preprocessed.data_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEMixtureModel",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00160:4"
}, "153":{
    "category":"Proteomics",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input file with pre-processed MRM data in csv format",
            "choices":[],
            "kinds":["csv"],
            "name":"data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"p-value threshold above which transition is quantification-worthy. Must be a value between 0 and 1 inclusive.",
            "choices":[],
            "kinds":[],
            "name":"pvalue.threshold",
            "numValues":"0-1",
            "defaultValue":"0.00005",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"threshold for coefficient of variation below which transition is quantification-worthy",
            "choices":[],
            "kinds":[],
            "name":"cv.threshold",
            "numValues":"0-1",
            "defaultValue":"0.2",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"calculate all possible pairs of relative ratios for a transition",
            "choices":["FALSE=no", "TRUE=yes"],
            "kinds":[],
            "name":"all.pairs",
            "numValues":"0-1",
            "defaultValue":"FALSE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"create files with intermediate results",
            "choices":["FALSE=no", "TRUE=yes"],
            "kinds":[],
            "name":"output.intermediate.results",
            "numValues":"0-1",
            "defaultValue":"FALSE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"file name prefix used for output file(s)",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<data.file_basename>-results",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"AuDIT",
    "write":false,
    "tags":["csv"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00172:1"
}, "150":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A .zip file containing mixture modeling results from the FLAMEMixtureModel module",
            "choices":[],
            "kinds":["zip"],
            "name":"mixture.model",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Criterion used for determining optimal number of clusters",
            "choices":["AIC=Akaike Information Criterion (AIC)", "BIC=Bayesian Information Criterion (BIC)", "SWR=Scale-free Weighted Ratio (SWR)", "distance.ratio=distance ratio", "intercluster.distance=intercluster distance"],
            "kinds":[],
            "name":"method",
            "numValues":"0-1",
            "defaultValue":"SWR",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"An integer; the seed fixes random computational processes during computation. This does not need to be changed under most circumstances.",
            "choices":[],
            "kinds":[],
            "name":"seed",
            "numValues":"0-1",
            "defaultValue":"123456",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"A prefix for output files",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<mixture.model_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEChooseOptimalClusterNumber",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00161:4"
}, "151":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A .zip file containing flow files in .txt or .fcs format. (The files should be all .txt or all .fcs, but not both.)",
            "choices":[],
            "kinds":["zip"],
            "name":"dataset",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"File type of input sample data.",
            "choices":["fcs", "txt"],
            "kinds":[],
            "name":"file.type",
            "numValues":"0-1",
            "defaultValue":"fcs",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The original data scale. 18-bit (default) or 4-decade.",
            "choices":["262144=18-bit", "10000=4-decade"],
            "kinds":[],
            "name":"data.scale",
            "numValues":"0-1",
            "defaultValue":"262144",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Whether to attempt removing dead cells from the samples.",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"remove.dead",
            "numValues":"0-1",
            "defaultValue":"F",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A comma-separated list of channel numbers indicating which columns (antibodies) to keep (e.g., 1, 2, 3, 7).",
            "choices":[],
            "kinds":[],
            "name":"channels",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A comma-separated list of channel/antibody names that corresponds to the channel numbers (e.g., FSC, SSC, CD4, CD45RA).",
            "choices":[],
            "kinds":[],
            "name":"channel.names",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A comma-separated list of scatter channel numbers (e.g., 1, 2, 3).",
            "choices":[],
            "kinds":[],
            "name":"scatter.channels",
            "numValues":"0-1",
            "defaultValue":"1,2",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The transformation to apply",
            "choices":["none", "logicle", "arsinh"],
            "kinds":[],
            "name":"transformation",
            "numValues":"0-1",
            "defaultValue":"logicle",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"A cofactor that tunes the logicle transformation. The cofactor is usually greater than 0 and less than 10.",
            "choices":[],
            "kinds":[],
            "name":"logicle.cofactor",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"A cofactor that tunes the arsinh transformation. The cofactor is 0 usually between 0 exclusively and a few thousand.",
            "choices":[],
            "kinds":[],
            "name":"arsinh.cofactor",
            "numValues":"0-1",
            "defaultValue":"250",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"A prefix for output files",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<dataset_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEPreprocess",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00159:4"
}, "202":{
    "category":"Data Format Conversion",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A SAM file",
            "choices":[],
            "kinds":["sam"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A label used to name the output file",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"SamToBam",
    "write":false,
    "tags":["bam"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00234:1"
}, "349":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The FCS file",
            "choices":[],
            "kinds":["fcs"],
            "name":"Input.FCS.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The channels to search for populations, separated by commas. Leave blank to search in all channels. E.g. FSC Lin, SS Lin, CD4 Log",
            "choices":[],
            "kinds":[],
            "name":"Dimensions",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"By default, we try between 1 and 30 populations and report the most likely number in the file. As this is a time consuming procedure, you can specify a more limited range. e.g. 1,12",
            "choices":[],
            "kinds":[],
            "name":"Range",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"SuggestNumberOfPopulationsFCS",
    "write":false,
    "tags":["txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00195:1"
}, "203":{
    "category":"Data Format Conversion",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file in EXPR format",
            "choices":[],
            "kinds":["expr"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A label that will be used to name the GCT output file.",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ExprToGct",
    "write":false,
    "tags":["gct"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00248:1"
}, "204":{
    "category":"Data Format Conversion",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A bed file",
            "choices":[],
            "kinds":["bed"],
            "name":"bed.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to output a gff file or exon only gtf file. The bed file must contain at least 12 columns in order to generate a gtf file.",
            "choices":["gff", "gtf"],
            "kinds":[],
            "name":"output.format",
            "numValues":"0-1",
            "defaultValue":"gtf",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The prefix for the output file",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<bed.file_basename>",
            "required":true,
            "type":"java.land.String",
            "fileChoice":false
        }
    ],
    "name":"BedToGtf",
    "write":false,
    "tags":["gtf", "gff"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00251:1"
}, "205":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input file (any non-binary file format)",
            "choices":[],
            "kinds":[],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The output file",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>.cvt.<input.filename_extension>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ConvertLineEndings",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00002:2"
}, "200":{
    "category":"Data Format Conversion",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A BAM file",
            "choices":[],
            "kinds":["bam"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A label used to name the output file",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"BamToSam",
    "write":false,
    "tags":["sam"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00252:1"
}, "201":{
    "category":"Missing Value Imputation",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file (gct, res)",
            "choices":[],
            "kinds":["gct, res"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Remove rows, columns, or both containing missing values",
            "choices":["1=rows", "2=cols", "3=both"],
            "kinds":[],
            "name":"remove.opt",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"output file",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>.na-rm.gct",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"RemoveMissingValues",
    "write":false,
    "tags":["gct"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00184:1"
}, "341":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The FCS file to be clustered.",
            "choices":[],
            "kinds":["fcs"],
            "name":"Input.FCS.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The number of populations that the algorithm shall be looking for. If you do not know the K value, you can use the SuggestNumberOfPopulations module to estimate it.",
            "choices":[],
            "kinds":[],
            "name":"K",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The base file name to split the results into CSV files, each containing a single population.",
            "choices":[],
            "kinds":[],
            "name":"CSV.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.FCS.data.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The name of the CLS output file, which will store the population number for each event.",
            "choices":[],
            "kinds":[],
            "name":"CLS.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.FCS.data.file_basename>.cls",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Outlier quantile. Events outside the specified quantile region will be classified as outliers and be assigned to class 0.",
            "choices":[],
            "kinds":[],
            "name":"Quantile",
            "numValues":"0-1",
            "defaultValue":"0.9",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"A comma-separated list of parameter short names ($PnN values) that shall be used to classify the populations. All parameters will be used by default, i.e., if no value for the Channels parameter is provided. The Time parameter is excluded automatically.",
            "choices":[],
            "kinds":[],
            "name":"Channels",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FlowClustClassifyFCS",
    "write":false,
    "tags":["cls", "csv"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00194:1"
}, "169":{
    "category":"Pathway Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The dataset file - .res, .gct",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A list of possible modulator genes to analyze - .txt",
            "choices":[],
            "kinds":["txt"],
            "name":"modulator.list",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"List of transcription factors in dataset - .txt",
            "choices":[],
            "kinds":["txt"],
            "name":"dpi.transcription.factor.list",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Transcription factor",
            "choices":[],
            "kinds":[],
            "name":"transcription.factor",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Percentage of samples to use in analysis (must be <=50)",
            "choices":[],
            "kinds":[],
            "name":"sample.percentage",
            "numValues":"0-1",
            "defaultValue":"35.0",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Conditional mutual information (MI) score threshold (number between 0 and 1)",
            "choices":[],
            "kinds":[],
            "name":"conditional.mi.threshold",
            "numValues":"0-1",
            "defaultValue":"0.0",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Conditional mutual info p-value threshold (ignored if conditonal MI threshold >0)",
            "choices":[],
            "kinds":[],
            "name":"conditional.mi.p.value",
            "numValues":"0-1",
            "defaultValue":"1.0",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"The data processing inequality tolerance (number between 0 and 1)",
            "choices":[],
            "kinds":[],
            "name":"dpi.tolerance",
            "numValues":"0-1",
            "defaultValue":"1.0",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Unconditional mutual information (MI) score threshold (number between 0 and 1)",
            "choices":[],
            "kinds":[],
            "name":"unconditional.mi.threshold",
            "numValues":"0-1",
            "defaultValue":"0.0",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Unconditional mutual information p-value threshold (ignored if unconditonal MI threshold >0)",
            "choices":[],
            "kinds":[],
            "name":"unconditional.mi.p.value",
            "numValues":"0-1",
            "defaultValue":"1.0",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>.mindy",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"MINDY",
    "write":false,
    "tags":["res", "gct"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00107:2"
}, "342":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The FCS file(s) to be fingerprinted.",
            "choices":[],
            "kinds":[],
            "name":"Input.FCS.data.files",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Training data (FCS file) for the underlying model. If none, the input FCS data is used for creating a default model.",
            "choices":[],
            "kinds":["fcs"],
            "name":"Model.FCS.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A comma-separated list of dimensions/parameters/channels that shall be used for the underlying model. Use either parameter names or indexes. All dimensions except for Time will be used if this parameter is not provided.",
            "choices":[],
            "kinds":[],
            "name":"Model.parameters",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Number of times the FCS training data will be subdivided.",
            "choices":[],
            "kinds":[],
            "name":"Model.number.of.recursions",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Option to make all events in the training set unique.",
            "choices":["0=YES, default", "1=NO"],
            "kinds":[],
            "name":"Model.dequantize",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Used to specify the per flowFrame sample size of the data to use in model generation. If NULL, all of the data in x is used. Setting this to a smaller number will speed up processing, at the cost of accuracy.",
            "choices":[],
            "kinds":[],
            "name":"Model.sample.size",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Graphical output in form of \"stack\" plot.",
            "choices":["0=YES, default", "1=NO"],
            "kinds":[],
            "name":"Output.QC.screening.fingerprint.stack",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Graphical output in form of \"qc\" plot.",
            "choices":["0=YES, default", "1=NO"],
            "kinds":[],
            "name":"Output.QC.screening.gate.consistency",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Graphical output in form of \"plate\" plot.",
            "choices":["1=NO, default", "0=YES"],
            "kinds":[],
            "name":"Output.QC.screening.plate",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Name for output CSV file.",
            "choices":[],
            "kinds":["csv"],
            "name":"Output.csv.file",
            "numValues":"0-1",
            "defaultValue":"fingerprints.csv",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Transformation used on data for CSV output file. \"raw\" is the number of events in each bin, \"normalized\" is the ratio of the number of events divided by the expected number (the expected number of events is calculated by dividing the total number of events in the instance used to make the fingerprint by the number of features in the fingerprint). \"log2norm\" is the log2 of the normalized values.",
            "choices":["0=raw, default", "1=normalized", "2=log2norm"],
            "kinds":[],
            "name":"Output.file.transformation",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A CSV file containing parameters if module is used in pipeline.",
            "choices":[],
            "kinds":["csv"],
            "name":"Workflow.parameter.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"FlowFingerprinting",
    "write":false,
    "tags":["FCS", "png", "csv"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00202:1"
}, "343":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The FCS file to be clustered.",
            "choices":[],
            "kinds":["fcs"],
            "name":"Input.FCS.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A comma-separated list of dimensions (parameters/channels) that shall be used for clustering. Use either parameter names or indexes. All dimensions except for Time will be used if this parameter is not provided.",
            "choices":[],
            "kinds":[],
            "name":"Dimensions",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Which transformation to apply on the data prior clustering. Fluorescence channels are usually better visualized and clustered using a transformation; the ASinH transformation produces good results on most data.",
            "choices":["ASinH=ASinH (Hyperbolic Arcus Sine), default", "Log=Logarithmic transformation", "Logicle=Logicle transformation", "No=No transformation"],
            "kinds":[],
            "name":"Transformation",
            "numValues":"0-1",
            "defaultValue":"ASinH",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A comma-separated list of dimensions (parameters/channels) that shall transformed as specified by previous parameter. This will be ignored if no transformation is specified above. If this parameter is not provided and transformation is specified above, the algorithm will use heuristics to identify parameters that shall be transformed. These heuristics are based on how parameters are stored in the FCS file, their resolution and their name. Again, you can use either parameter names or parameter indexes to specify dimensions to transform.",
            "choices":[],
            "kinds":[],
            "name":"Dimensions.to.transform",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Maximum number of clusters that FlowMeans will try. This value will be estimated automatically if the value of this parameter is not provided.",
            "choices":[],
            "kinds":[],
            "name":"Maximum.number.of.clusters",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Number of clusters that FlowMeans shall search for. This parameter cannot be combined with the \"Maximum number of clusters\". Also, the number of clusters will be estimated automatically if this parameter is not provided.",
            "choices":[],
            "kinds":[],
            "name":"Number.of.clusters",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The maximum number of iterations allowed within the K-means component of the clustering.",
            "choices":[],
            "kinds":[],
            "name":"Maximum.number.of.iterations",
            "numValues":"0-1",
            "defaultValue":"50",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The number of random sets used for initialization.",
            "choices":[],
            "kinds":[],
            "name":"Number.of.initialization.sets",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The distance being used within the FlowMeans algorithm.",
            "choices":["TRUE=Mahalanobis distance, default", "FALSE=Euclidean distance"],
            "kinds":[],
            "name":"Distance.used",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Should each data dimension be standardized (i.e, transformed to a [0,1] interval) before clustering. This usually does not harm and is important if data in dimensions used for clustering covers significantly different ranges for different dimensions. ",
            "choices":["TRUE=Yes, standardize data before clustering, default.", "FALSE=No, keep data as is."],
            "kinds":[],
            "name":"Standardize.data",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"How to update the distance matrix at each merging iteration. Note that updating using Mahalanobis distance is not possible if Euclidean distance is set in the \"Distance used\" above. ",
            "choices":["Mahalanobis=Update using Mahalanobis distance, default.", "Mean=Update using averaging.", "None=Do not update at all."],
            "kinds":[],
            "name":"Distance.matrix.update",
            "numValues":"0-1",
            "defaultValue":"Mahalanobis",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Indicate whether or not to transform residuals to orthogonal distance. ",
            "choices":["TRUE=Yes, transform residuals to orthogonal distance.", "FALSE=No, do not transform residuals, default."],
            "kinds":[],
            "name":"Transform.residuals",
            "numValues":"0-1",
            "defaultValue":"FALSE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The maximum number of data points (events) used for calculating the covariance. All data points will be used if this value is not provided.",
            "choices":[],
            "kinds":[],
            "name":"Max.points.for.covariance",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The maximum number of data points (events) used for counting the modes using kernel density estimation. All data points will be used if this value is not provided.",
            "choices":[],
            "kinds":[],
            "name":"Max.points.for.kernel.density",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Should a little bit of uniform noise be added to the data to prevent singularity issues?",
            "choices":["TRUE=Yes, add a bit of noise, default.", "FALSE=No, do not add any noise."],
            "kinds":[],
            "name":"Add.noise",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Should plots of clustered data be created for quick visual inspection of the results?",
            "choices":["TRUE=Yes, include plots, default", "FALSE=No, omit the plots."],
            "kinds":[],
            "name":"Draw.plots",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Seed value for the random generator; provide any consistent value to obtain reproducible results.",
            "choices":[],
            "kinds":[],
            "name":"Seed",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Should additional debugging information be provided (e.g., this may be useful to debug cases where clustering does not work properly for certain data files).",
            "choices":["TRUE=Yes, include debug info", "FALSE=No, omit debug info (default)."],
            "kinds":[],
            "name":"Print.debug.info",
            "numValues":"0-1",
            "defaultValue":"FALSE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"FlowMeansCluster",
    "write":false,
    "tags":["cls", "csv", "png"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00199:1"
}, "344":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The FCS file to be clustered.",
            "choices":[],
            "kinds":["fcs"],
            "name":"Input.FCS.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A comma-separated list of dimensions (parameters/channels) that shall be used for clustering. Use either parameter names or indexes. All dimensions except for Time will be used if this parameter is not provided.",
            "choices":[],
            "kinds":[],
            "name":"Dimensions",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Which transformation to apply on the data prior clustering. Fluorescence channels are usually better visualized and clustered using a transformation; the ASinH transformation produces good results on most data.",
            "choices":["ASinH=ASinH (Hyperbolic Arcus Sine), default", "Log=Logarithmic transformation", "Logicle=Logicle transformation", "No=No transformation"],
            "kinds":[],
            "name":"Transformation",
            "numValues":"0-1",
            "defaultValue":"ASinH",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A comma-separated list of dimensions (parameters/channels) that shall transformed as specified by previous parameter. This will be ignored if no transformation is specified above. If this parameter is not provided and transformation is specified above, the algorithm will use heuristics to identify parameters that shall be transformed. These heuristics are based on how parameters are stored in the FCS file, their resolution and their name. Again, you can use either parameter names or parameter indexes to specify dimensions to transform.",
            "choices":[],
            "kinds":[],
            "name":"Dimensions.to.transform",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The range for the number of subpopulations (clusters) that FlowMerge shall search for. FlowMerge will try to pick the best number of clusters from the specified range, which shall be provided in the min-max format, where both, mix and max are integers and min is smaller than max, e.g., 1-10.",
            "choices":[],
            "kinds":[],
            "name":"Range.for.number.of.clusters",
            "numValues":"0-1",
            "defaultValue":"1-10",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"An indication whether to estimate the degrees of freedom used for the t distribution when modelling data.",
            "choices":["0=No estimation, use value provided below (default)", "1=Estimate (ignore Degrees of freedom provided below)", "2=Estimate separately for each cluster (ignore Degrees of freedom provided below)"],
            "kinds":[],
            "name":"Estimate.degrees.of.freedom",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The degrees of freedom used for the t distribution when modelling data. Provided value will be ignored if estimation is requested by the Estimate degrees of freedom parameter. Gaussian distribution will be used if Degrees of freedom are not provided and estimation is not requested.",
            "choices":[],
            "kinds":[],
            "name":"Degrees.of.freedom",
            "numValues":"0-1",
            "defaultValue":"4",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"How many nodes (e.g., processors, cores) to use if you wish to run the analysis in a parallel mode? Enter '1' if you wish do NOT want to use the parallel mode. Enter a number higher than 1 if your server/cluster has multiple computers/processors/cores and you want to utilize several of these for FlowMerge clustering.",
            "choices":["1=1 (no paralelism, default)", "2=2 computing nodes", "3=3 computing nodes", "4=4 computing nodes", "5=5 computing nodes", "6=6 computing nodes", "7=7 computing nodes", "8=8 computing nodes"],
            "kinds":[],
            "name":"Number.of.computing.nodes",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"FlowMergeCluster",
    "write":false,
    "tags":["cls", "csv", "png", "pdf"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00204:1"
}, "166":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"",
            "choices":[],
            "kinds":["tgz"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"untar",
    "write":false,
    "tags":["cls", "gct", "txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:7070.genepatt.genepatterntest.broadinstitute.org:genepatternmodules:273:1"
}, "206":{
    "category":"Annotation",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file to be annotated (res, gct, or odf format, or text file containing one probe per line). Annotations will be retrieved based on affymetrix probe ids.",
            "choices":[],
            "kinds":["res", "gct", "Dataset", "txt"],
            "name":"Input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Name of the output file containing the annotations (same format as input) that will be created.",
            "choices":[],
            "kinds":[],
            "name":"Output.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.filename_basename>.annot",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Where to write the annotations in the output file",
            "choices":["0=Append to probe id", "1=Append to description", "2=Replace description", "3=Write to annotation file"],
            "kinds":[],
            "name":"Annotation.Column",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "Affymetrix Description=include"],
            "kinds":[],
            "name":"Affymetrix.Description",
            "numValues":"0-1",
            "defaultValue":"Affymetrix Description",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "LocusLink Locus ID=include"],
            "kinds":[],
            "name":"LocusLink.ID",
            "numValues":"0-1",
            "defaultValue":"LocusLink Locus ID",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "LocusLink Description=include"],
            "kinds":[],
            "name":"LocusLink.Gene.Name",
            "numValues":"0-1",
            "defaultValue":"LocusLink Description",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "LocusLink Symbol=include"],
            "kinds":[],
            "name":"LocusLink.Symbol",
            "numValues":"0-1",
            "defaultValue":"LocusLink Symbol",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "LocusLink Location=include"],
            "kinds":[],
            "name":"LocusLink.Location",
            "numValues":"0-1",
            "defaultValue":"LocusLink Location",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "Unigene Human Cluster=include"],
            "kinds":[],
            "name":"UniGene.HS.Cluster.ID",
            "numValues":"0-1",
            "defaultValue":"Unigene Human Cluster",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "Unigene Human Description=include"],
            "kinds":[],
            "name":"UniGene.HS.Description",
            "numValues":"0-1",
            "defaultValue":"Unigene Human Description",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "Unigene Mouse Cluster=include"],
            "kinds":[],
            "name":"UniGene.MM.Cluster.ID",
            "numValues":"0-1",
            "defaultValue":"Unigene Mouse Cluster",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "Unigene Mouse Description=include"],
            "kinds":[],
            "name":"UniGene.MM.Description",
            "numValues":"0-1",
            "defaultValue":"Unigene Mouse Description",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"GeneCruiser",
    "write":false,
    "tags":["res", "gct", "Dataset"],
    "type":"module",
    "version":"7",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00037:7"
}, "345":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The FCS file",
            "choices":[],
            "kinds":["fcs"],
            "name":"Input.FCS.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The number of populations you are looking for.",
            "choices":[],
            "kinds":[],
            "name":"K",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The base filename to split the results into csv files, each containing one population",
            "choices":[],
            "kinds":[],
            "name":"CSV.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.FCS.data.file_basename>",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A .CLS filename to store the population number for each data point",
            "choices":[],
            "kinds":[],
            "name":"CLS.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.FCS.data.file_basename>",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The channels to search for populations, separated by commas. Leave blank to search in all channels. E.g. FSC Lin, SS Lin, CD4 Log",
            "choices":[],
            "kinds":[],
            "name":"Dimensions",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"KMeansClassifyFCS",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00193:1"
}, "165":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The URL to retrieve the file from",
            "choices":[],
            "kinds":[],
            "name":"DownloadURL1.URL",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"GetDatasetInSilico",
    "write":false,
    "tags":[],
    "type":"pipeline",
    "version":"1",
    "lsid":"urn:lsid:7070.genepatt.genepatterntest.broadinstitute.org:genepatternmodules:275:1"
}, "207":{
    "category":"Prediction",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Gene expression data set (.gct)",
            "choices":[],
            "kinds":["gct"],
            "name":"input.exp.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"List of marker genes (.txt): Probe ID, Gene name, Class (1,2,...), Weight (optional)",
            "choices":[],
            "kinds":["txt"],
            "name":"input.features.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Name for output files",
            "choices":[],
            "kinds":[],
            "name":"output.name",
            "numValues":"0-1",
            "defaultValue":"NTP",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Distance metric",
            "choices":["cosine=cosine", "correlation=correlation"],
            "kinds":[],
            "name":"distance.selection",
            "numValues":"0-1",
            "defaultValue":"cosine",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Weight genes? (by statistic, fold change, etc. only for 2 classes)",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"weight.genes",
            "numValues":"0-1",
            "defaultValue":"T",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"# resampling to generate null distribution for distance metric",
            "choices":[],
            "kinds":[],
            "name":"num.resamplings",
            "numValues":"0-1",
            "defaultValue":"1000",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Create .gct and .cls files for GenePattern",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"GenePattern.output",
            "numValues":"0-1",
            "defaultValue":"F",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Random seed",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"7392854",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        }
    ],
    "name":"NearestTemplatePrediction",
    "write":false,
    "tags":["gct", "png", "txt"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00166:2"
}, "346":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input clustering results (of multiple data files) in CSV files with each clustered population stored in a separate CSV file. All these CSV files shall have the same columns (dimensions/channels) or at least, they all shall include columns specified by the dimensions parameter.",
            "choices":[],
            "kinds":[],
            "name":"Input.clustering.results",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The range of distinct labels (populations, components) to calculate BIC for. Provide the range in the min-max format, where both, mix and max are integers and min is smaller than max.",
            "choices":[],
            "kinds":[],
            "name":"Range",
            "numValues":"0-1",
            "defaultValue":"1-10",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A comma-separated list of dimensions (parameters/channels) that shall be used for meta clustering (clustering of means of clusters). All specified dimensions shall be included in all the input clustering results CSV files. All dimensions (but Time) will be used if this parameter is not provided.",
            "choices":[],
            "kinds":[],
            "name":"Dimensions",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Include the EII model (spherical, equal volume) when calculating BIC.",
            "choices":["TRUE=Yes, default", "FALSE=No"],
            "kinds":[],
            "name":"EII",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Include the VII model (spherical, unequal volume) when calculating BIC.",
            "choices":["TRUE=Yes, default", "FALSE=No"],
            "kinds":[],
            "name":"VII",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Include the EEI model (diagonal, equal volume and shape) when calculating BIC.",
            "choices":["TRUE=Yes", "FALSE=No, default"],
            "kinds":[],
            "name":"EEI",
            "numValues":"0-1",
            "defaultValue":"FALSE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Include the VEI model (diagonal, varying volume, equal shape) when calculating BIC.",
            "choices":["TRUE=Yes", "FALSE=No, default"],
            "kinds":[],
            "name":"VEI",
            "numValues":"0-1",
            "defaultValue":"FALSE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Include the EVI model (diagonal, equal volume, varying shape) when calculating BIC.",
            "choices":["TRUE=Yes", "FALSE=No, default"],
            "kinds":[],
            "name":"EVI",
            "numValues":"0-1",
            "defaultValue":"FALSE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Include the VVI model (diagonal, varying volume and shape) when calculating BIC.",
            "choices":["TRUE=Yes", "FALSE=No, default"],
            "kinds":[],
            "name":"VVI",
            "numValues":"0-1",
            "defaultValue":"FALSE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Include the EEE model (ellipsoidal, equal volume, shape, and orientation) when calculating BIC.",
            "choices":["TRUE=Yes", "FALSE=No, default"],
            "kinds":[],
            "name":"EEE",
            "numValues":"0-1",
            "defaultValue":"FALSE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Include the EEV model (ellipsoidal, equal volume and equal shape) when calculating BIC.",
            "choices":["TRUE=Yes", "FALSE=No, default"],
            "kinds":[],
            "name":"EEV",
            "numValues":"0-1",
            "defaultValue":"FALSE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Include the VEV model (ellipsoidal, equal shape) when calculating BIC.",
            "choices":["TRUE=Yes", "FALSE=No, default"],
            "kinds":[],
            "name":"VEV",
            "numValues":"0-1",
            "defaultValue":"FALSE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Include the VVV model (ellipsoidal, varying volume, shape, and orientation) when calculating BIC.",
            "choices":["TRUE=Yes", "FALSE=No, default"],
            "kinds":[],
            "name":"VVV",
            "numValues":"0-1",
            "defaultValue":"FALSE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"MClustClusterLabelBIC",
    "write":false,
    "tags":["png", "csv", "txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00207:1"
}, "168":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A .zip file containing the optimal mixture modeling result of each sample from the output of the FLAMEChooseOptimalClusterNumber module.",
            "choices":[],
            "kinds":["zip"],
            "name":"optimal.g.mixture.model",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"",
            "choices":[],
            "kinds":["txt"],
            "name":"sample.class",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Used only for skew distributions. Whether to estimate the mode for each cluster. Must be the same value used in FLAMEMixtureModel.",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"estimate.mode",
            "numValues":"0-1",
            "defaultValue":"F",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Used only for skew distributions and when estimate mode is set to yes. The smaller the increment, the more accurate the estimation, but the slower the estimation step. Must be the same value used in FLAMEMixtureModel.",
            "choices":[],
            "kinds":[],
            "name":"estimation.increment",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Choose whether to output the intermediate metaclustering results, such as within-class matching results.",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"output.intermediate.results",
            "numValues":"0-1",
            "defaultValue":"F",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A prefix for output files.",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<optimal.g.mixture.model_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEMetacluster",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"5",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00162:5"
}, "208":{
    "category":"Data Format Conversion",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file in EXPR format",
            "choices":[],
            "kinds":["expr"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A label that will be used to name the GCT output file.",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ExprToGct",
    "write":false,
    "tags":["gct"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00248:2"
}, "347":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"FCS files from a single plate.",
            "choices":[],
            "kinds":[],
            "name":"Input.FCS.files",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Count cells in each file?",
            "choices":["1=Yes, default", "0=No"],
            "kinds":[],
            "name":"Check.cell.counts",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Report the median measured values?",
            "choices":["1=Yes, default", "0=No"],
            "kinds":[],
            "name":"Check.medians",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Check the Probability Density Functions (PDF)?",
            "choices":["1=Yes, default", "0=No"],
            "kinds":[],
            "name":"Check.PDF",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Check the Empirical Cumulative Distribution Functions (ECDF)?",
            "choices":["1=Yes, default", "0=No"],
            "kinds":[],
            "name":"Check.ECDF",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Detect unexpected data distributions (unusual upper/lower quantiles)?",
            "choices":["1=Yes, default", "0=No"],
            "kinds":[],
            "name":"Check.boxplots",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Check for unusual patterns in the acquisition of fluorescence and light scatter measurements over time?",
            "choices":["1=Yes, default", "0=No"],
            "kinds":[],
            "name":"Check.timeline",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Check for disturbances in the flow of cells over time?",
            "choices":["1=Yes, default", "0=No"],
            "kinds":[],
            "name":"Check.timeflow",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"The name of the forward scatter parameter (short name, value of the $PnN keyword).",
            "choices":[],
            "kinds":[],
            "name":"FSC.channel",
            "numValues":"0-1",
            "defaultValue":"FSC-H",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The name of the side scatter parameter (short name, value of the $PnN keyword).",
            "choices":[],
            "kinds":[],
            "name":"SSC.channel",
            "numValues":"0-1",
            "defaultValue":"SSC-H",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Zip the resulting report together?",
            "choices":["TRUE=Yes, default", "FALSE=No"],
            "kinds":[],
            "name":"Zip.output",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"PlateQAFCS",
    "write":false,
    "tags":["HTML"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00196:1"
}, "167":{
    "category":"Proteomics",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input file with pre-processed MRM data in csv format",
            "choices":[],
            "kinds":["csv"],
            "name":"data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"p-value threshold above which transition is quantification-worthy. Must be a value between 0 and 1 inclusive.",
            "choices":[],
            "kinds":[],
            "name":"pvalue.threshold",
            "numValues":"0-1",
            "defaultValue":"0.00005",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"threshold for coefficient of variation below which transition is quantification-worthy",
            "choices":[],
            "kinds":[],
            "name":"cv.threshold",
            "numValues":"0-1",
            "defaultValue":"0.2",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"calculate all possible pairs of relative ratios for a transition",
            "choices":["FALSE=no", "TRUE=yes"],
            "kinds":[],
            "name":"all.pairs",
            "numValues":"0-1",
            "defaultValue":"FALSE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"create files with intermediate results",
            "choices":["FALSE=no", "TRUE=yes"],
            "kinds":[],
            "name":"output.intermediate.results",
            "numValues":"0-1",
            "defaultValue":"FALSE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"file name prefix used for output file(s)",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<data.file_basename>-results",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"AuDIT",
    "write":false,
    "tags":["csv"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00172:2"
}, "209":{
    "category":"Data Format Conversion",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file in FPKM_TRACKING format",
            "choices":[],
            "kinds":["fpkm_tracking"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Select row labels to be written to GCT file",
            "choices":["tracking_id=Tracking ID", "nearest_ref_id=Nearest Reference Transcript ID", "gene_short_name=Gene Name", "tss_id=TSS ID", "locus=Locus"],
            "kinds":[],
            "name":"row.labels",
            "numValues":"0-1",
            "defaultValue":"tracking_id",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Select row descriptions to be written to GCT file",
            "choices":["locus=Locus", "tracking_id=Tracking ID", "nearest_ref_id=Nearest Reference Transcript ID", "gene_short_name=Gene Name", "tss_id=TSS ID", "class_code=Class Code"],
            "kinds":[],
            "name":"row.descriptions",
            "numValues":"0-1",
            "defaultValue":"locus",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to filter rows with invalid row names (ie., \"-\")",
            "choices":["no=no", "yes=yes"],
            "kinds":[],
            "name":"filter.rows",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A label that will be used to name the GCT output file.",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Fpkm_trackingToGct",
    "write":false,
    "tags":["gct", "fpkm_tracking"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00250:1"
}, "348":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The FCS file to be clustered.",
            "choices":[],
            "kinds":["fcs"],
            "name":"Input.FCS.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A comma-separated list of dimensions (parameters/channels) that shall be used for clustering. Use either parameter names or indexes. All dimensions except for Time will be used if this parameter is not provided.",
            "choices":[],
            "kinds":[],
            "name":"Dimensions",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Which transformation to apply on the data prior clustering. Fluorescence channels are usually better visualized and clustered using a transformation; the ASinH transformation produces good results on most data.",
            "choices":["ASinH=ASinH (Hyperbolic Arcus Sine), default", "Log=Logarithmic transformation", "Logicle=Logicle transformation", "No=No transformation"],
            "kinds":[],
            "name":"Transformation",
            "numValues":"0-1",
            "defaultValue":"ASinH",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A comma-separated list of dimensions (parameters/channels) that shall transformed as specified by previous parameter. This will be ignored if no transformation is specified above. If this parameter is not provided and transformation is specified above, the algorithm will use heuristics to identify parameters that shall be transformed. These heuristics are based on how parameters are stored in the FCS file, their resolution and their name. Again, you can use either parameter names or parameter indexes to specify dimensions to transform.",
            "choices":[],
            "kinds":[],
            "name":"Dimensions.to.transform",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A scaling parameter that determines the resolution in the spectral clustering stage. By increasing it, more spectral clusters are identified. This can be usefull when small population are aimed. See documentation on more details how Sigma can be adjusted.",
            "choices":[],
            "kinds":[],
            "name":"Sigma",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Threshold that controls to what extend clusters should be combined or kept separate. See documentation on more details how the separation factor can be adjusted.",
            "choices":[],
            "kinds":[],
            "name":"Separation.factor",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"The size of neighborhood that is being searched during the conductance calculation step. The default value of 4 should not be changed unless the input data set contains measurements of more that 100,000. Setting beta to zero or a low value will reduce computational time by applying an approximation to the conductance calculation step. This will allow you to cluster large data sets in reasonable time; however, the quality of the result may be affected. Setting beta to 5 is not recommended since it will increase computational time while not significantly improving clustering results in most cases.",
            "choices":["0=0", "1=1", "2=2", "3=3", "4=4, default", "5=5"],
            "kinds":[],
            "name":"Beta",
            "numValues":"0-1",
            "defaultValue":"4",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Seed value for the random generator; provide any consistent value to obtain reproducible results.",
            "choices":[],
            "kinds":[],
            "name":"Seed",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        }
    ],
    "name":"SamSPECTRALClusterFCS",
    "write":false,
    "tags":["cls", "csv"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00208:1"
}, "409":{
    "category":"RNAi",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input GCT file. Unique reagent identifier in first column, gene symbol in second.",
            "choices":[],
            "kinds":["gct"],
            "name":"gct.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"text string to identify the current run",
            "choices":[],
            "kinds":["gct"],
            "name":"identifier",
            "numValues":"0-1",
            "defaultValue":"<gct.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"seed for random number generator",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"12345",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"gene solution significance level (1 - null percentile)",
            "choices":[],
            "kinds":[],
            "name":"null.significance",
            "numValues":"0-1",
            "defaultValue":"0.15",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"minimum effect magnitude for RNAi reagent (relative to reagent with maximal effect)",
            "choices":[],
            "kinds":[],
            "name":"min.A.value",
            "numValues":"0-1",
            "defaultValue":"0.3",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        }
    ],
    "name":"ATARiS",
    "write":false,
    "tags":["gct", "txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00312:1"
}, "161":{
    "category":"Prediction",
    "description":"description goes here",
     "inputs":[
        {
            "description":"data file - .gct, .res, .odf type = Dataset",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"data.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"class file - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"class.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"number of selected features",
            "choices":[],
            "kinds":[],
            "name":"num.features",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"statistic to use to perform feature selection",
            "choices":["0=SNR", "1=T-Test", "2=SNR (median)", "3=T-Test (median)", "4=SNR (min std)", "5=T-Test (min std)", "6=SNR (median, min std)", "7=T-Test (median, min std)"],
            "kinds":[],
            "name":"feature.selection.statistic",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"minimum standard deviation if feature selection statistic includes min std option",
            "choices":[],
            "kinds":[],
            "name":"min.std",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"number of neighbors for KNN",
            "choices":[],
            "kinds":[],
            "name":"num.neighbors",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"weighting type for neighbors",
            "choices":["1=none", "2=One-over-k", "3=distance"],
            "kinds":[],
            "name":"weighting.type",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"distance measure",
            "choices":["2=Cosine Distance", "1=Euclidean Distance"],
            "kinds":[],
            "name":"distance.measure",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"prediction results output file name .odf type = Prediction Results",
            "choices":[],
            "kinds":[],
            "name":"pred.results.file",
            "numValues":"0-1",
            "defaultValue":"<data.filename_basename>.pred.odf",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"feature summary output file name - .odf type = Prediction Features",
            "choices":[],
            "kinds":[],
            "name":"feature.summary.file",
            "numValues":"0-1",
            "defaultValue":"<data.filename_basename>.feat.odf",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"KNNXValidation",
    "write":false,
    "tags":["Prediction Results", "Prediction Features"],
    "type":"module",
    "version":"6",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00013:6"
}, "3":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input filename - .res",
            "choices":[],
            "kinds":["res"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Name of the output file (a .txt extension will be appended)",
            "choices":[],
            "kinds":[],
            "name":"output",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ExtractColumnNames",
    "write":false,
    "tags":["txt"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00003:2"
}, "408":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The sdrf file - .txt",
            "choices":[],
            "kinds":["txt"],
            "name":"sdrf.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A zip file containing MAGE-TAB data matrix files - .zip",
            "choices":[],
            "kinds":["zip"],
            "name":"data.files",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"MAGETABImportViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00173:2"
}, "162":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A membership.txt or member.txt file output from one of the FLAME modules.",
            "choices":[],
            "kinds":["txt"],
            "name":"FLAMEContourDataGenerator1.membership.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A parameters.txt file output from one of the FLAME modules.",
            "choices":[],
            "kinds":["txt"],
            "name":"FLAMEContourDataGenerator1.parameters.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A comma separated list of the index or names of three channels/antibodies to plot",
            "choices":[],
            "kinds":[],
            "name":"FLAMEContourDataGenerator1.channels.to.plot",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A prefix for output files",
            "choices":[],
            "kinds":[],
            "name":"FLAMEContourDataGenerator1.output.prefix",
            "numValues":"0-1",
            "defaultValue":"<parameters.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEContourViewer.Pipeline",
    "write":false,
    "tags":[],
    "type":"pipeline",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.pipeline:00011:1"
}, "2":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The URL to retrieve the file from",
            "choices":[],
            "kinds":[],
            "name":"URL",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"DownloadURL",
    "write":false,
    "tags":["pinned", "recent"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00034:1"
}, "163":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A membership.txt or member.txt file output from one of the FLAME modules. ",
            "choices":[],
            "kinds":["txt"],
            "name":"membership.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A parameters.txt file output from one of the FLAME modules. ",
            "choices":[],
            "kinds":["txt"],
            "name":"parameters.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A comma separated list of the index or names of three channels/antibodies to plot",
            "choices":[],
            "kinds":[],
            "name":"channels.to.plot",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A prefix for output files",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<parameters.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEContourDataGenerator",
    "write":false,
    "tags":["contour_plot.txt", "membership.txt"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00163:2"
}, "1":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset file - .res, .gct",
            "choices":[],
            "kinds":["gct", "res", "Dataset"],
            "name":"dataset.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Adjacency matrix - .adj",
            "choices":[],
            "kinds":["adj"],
            "name":"adjacency.matrix.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"CytoscapeViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00097:1"
}, "164":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset file - .res, .gct",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"expression.dataset",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Gene sets database from GSEA website.",
            "choices":["c1.all.v2.5.symbols.gmt=c1.all.v2.5.symbols.gmt [Positional]", "c2.all.v2.5.symbols.gmt=c2.all.v2.5.symbols.gmt [Curated]", "c2.biocarta.v2.5.symbols.gmt=c2.biocarta.v2.5.symbols.gmt [Curated]", "c2.cgp.v2.5.symbols.gmt=c2.cgp.v2.5.symbols.gmt [Curated]", "c2.cp.v2.5.symbols.gmt=c2.cp.v2.5.symbols.gmt [Curated]", "c2.genmapp.v2.5.symbols.gmt=c2.genmapp.v2.5.symbols.gmt [Curated]", "c2.kegg.v2.5.symbols.gmt=c2.kegg.v2.5.symbols.gmt [Curated]", "c3.all.v2.5.symbols.gmt=c3.all.v2.5.symbols.gmt [Motif]", "c3.mir.v2.5.symbols.gmt=c3.mir.v2.5.symbols.gmt [Motif]", "c3.tft.v2.5.symbols.gmt=c3.tft.v2.5.symbols.gmt [Motif]", "c4.all.v2.5.symbols.gmt=c4.all.v2.5.symbols.gmt [Computational]", "c4.cgn.v2.5.symbols.gmt=c4.cgn.v2.5.symbols.gmt [Computational]", "c4.cm.v2.5.symbols.gmt=c4.cm.v2.5.symbols.gmt [Computational]", "c5.all.v2.5.symbols.gmt=c5.all.v2.5.symbols.gmt [Gene ontology]", "c5.cc.v2.5.symbols.gmt=c5.cc.v2.5.symbols.gmt [Gene ontology]", "ftp.broadinstitute.org://pub/gsea/gene_sets/c5.mf.v2.5.symbols.gmt=c5.mf.v2.5.symbols.gmt [Gene ontology]", "ftp.broadinstitute.org://pub/gsea/gene_sets/c1.v2.symbols.gmt=c1.v2.symbols.gmt [Positional]", "c2.v2.symbols.gmt=c2.v2.symbols.gmt [Curated]", "c3.v2.symbols.gmt=c3.v2.symbols.gmt [Motif]", "c4.v2.symbols.gmt=c4.v2.symbols.gmt [Computational]", "c4.v1.symbols.gmt=c4.v1.symbols.gmt [Computational]", "c3.v1.symbols.gmt=c3.v1.symbols.gmt [Motif]", "c2.v1.symbols.gmt=c2.v1.symbols.gmt [Curated]", "c1.v1.symbols.gmt=c1.v1.symbols.gmt [Positional]"],
            "kinds":[],
            "name":"gene.sets.database",
            "numValues":"0-1",
            "defaultValue":"c1.all.v2.5.symbols.gmt",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets database - .gmt, .gmx, .grp. Upload a gene set if your gene set is not listed as a choice for the gene sets database parameter.",
            "choices":[],
            "kinds":["gmt", "gmx", "grp"],
            "name":"gene.sets.database.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Number of permutations to perform",
            "choices":[],
            "kinds":[],
            "name":"number.of.permutations",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Cls file - .cls, must be binary",
            "choices":[],
            "kinds":["cls"],
            "name":"phenotype.labels",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Select true to have GSEA collapse each probe set in the expression dataset into a single vector for the gene, which gets identified by its gene symbol.",
            "choices":["false", "true"],
            "kinds":[],
            "name":"collapse.dataset",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Type of permutations to perform",
            "choices":["phenotype", "tag"],
            "kinds":[],
            "name":"permutation.type",
            "numValues":"0-1",
            "defaultValue":"phenotype",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Chip file from GSEA website.",
            "choices":["ftp.broadinstitute.org://pub/gsea/annotations/GENE_SYMBOL.chip=GENE_SYMBOL.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Seq_Accession.chip=Seq_Accession.chip", "ftp.broadinstitute.org://pub/gsea/annotations/SEQ_ACCESSION.chip=SEQ_ACCESSION.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubA.chip=Hu35KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubB.chip=Hu35KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubC.chip=Hu35KsubC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubD.chip=Hu35KsubD.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu6800.chip=Hu6800.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_Focus.chip=HG_Focus.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133A.chip=HG_U133A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133AAOFAV2.chip=HG_U133AAOFAV2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133A_2.chip=HG_U133A_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133B.chip=HG_U133B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133_Plus_2.chip=HG_U133_Plus_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95Av2.chip=HG_U95Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95B.chip=HG_U95B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95C.chip=HG_U95C.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95D.chip=HG_U95D.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95E.chip=HG_U95E.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AFFYMETRIX.chip=AFFYMETRIX.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AG.chip=AG.chip", "ftp.broadinstitute.org://pub/gsea/annotations/APPLERA_ABI1700.chip=APPLERA_ABI1700.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ATH1_121501.chip=ATH1_121501.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1A.chip=Agilent_Human1A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1Av2.chip=Agilent_Human1Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1B.chip=Agilent_Human1B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1_cDNA.chip=Agilent_Human1_cDNA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_HumanGenome.chip=Agilent_HumanGenome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseDev.chip=Agilent_MouseDev.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseGenome.chip=Agilent_MouseGenome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseOligo.chip=Agilent_MouseOligo.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Mouse_cDNA.chip=Agilent_Mouse_cDNA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_RatGenome_G4131A.chip=Agilent_RatGenome_G4131A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_RatOligo.chip=Agilent_RatOligo.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AtlasMouse1.2.chip=AtlasMouse1.2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AtlasRat1.2.chip=AtlasRat1.2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/BIAO.chip=BIAO.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Bovine.chip=Bovine.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CNMCMuscleChip.chip=CNMCMuscleChip.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Caltech16KMouse.chip=Caltech16KMouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Caltech16KOligoMouse.chip=Caltech16KOligoMouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Canine_2.chip=Canine_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Clontech_Atlas_13K.chip=Clontech_Atlas_13K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Clontech_BD_Atlas.chip=Clontech_BD_Atlas.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_Human_Whole_Genome.chip=CodeLink_Human_Whole_Genome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_20K_I_Bioarray.chip=CodeLink_UniSet_Human_20K_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_II_Bioarray.chip=CodeLink_UniSet_Human_II_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_I_Bioarray.chip=CodeLink_UniSet_Human_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Rat_I_Bioarray.chip=CodeLink_UniSet_Rat_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/DrosGenome1.chip=DrosGenome1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Drosophila_2.chip=Drosophila_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/G4110A.chip=G4110A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/G4110Av2.chip=G4110Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/GenosysCytokineV2.chip=GenosysCytokineV2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HC_G110.chip=HC_G110.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HPCGGCompugenAnnotations.chip=HPCGGCompugenAnnotations.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HT_HG_U133A.chip=HT_HG_U133A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HT_HG_U133A_EA.chip=HT_HG_U133A_EA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HU6800.chip=HU6800.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illimina_Mus6_v1_1.chip=Illimina_Mus6_v1_1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illimuna_Mus6_v1.chip=Illimuna_Mus6_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Hum6_v1.chip=Illumina_Hum6_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Hum6_v2.chip=Illumina_Hum6_v2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_HumRef8_v1.chip=Illumina_HumRef8_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_HumRef8_v2.chip=Illumina_HumRef8_v2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Human.chip=Illumina_Human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_MusRef8_v1.chip=Illumina_MusRef8_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_MusRef8_v1_1.chip=Illumina_MusRef8_v1_1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_RatRef12_v1.chip=Illumina_RatRef12_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Av2.chip=MG_U74Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Bv2.chip=MG_U74Bv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Cv2.chip=MG_U74Cv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MOE430A.chip=MOE430A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MOE430B.chip=MOE430B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MWG_Human_30K_A.chip=MWG_Human_30K_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MWG_Human_30K_B.chip=MWG_Human_30K_B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mouse430A_2.chip=Mouse430A_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mouse430_2.chip=Mouse430_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu11KsubA.chip=Mu11KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu11KsubB.chip=Mu11KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubA.chip=Mu19KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubB.chip=Mu19KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubC.chip=Mu19KsubC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/NIA15k.chip=NIA15k.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Netherland_cancer_institute_operon_human_35k.chip=Netherland_cancer_institute_operon_human_35k.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Netherland_cancer_institute_operon_mouse_FOOk.chip=Netherland_cancer_institute_operon_mouse_FOOk.chip", "ftp.broadinstitute.org://pub/gsea/annotations/OPERON_HUMANv2.chip=OPERON_HUMANv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/OPERON_HUMANv3.chip=OPERON_HUMANv3.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RAE230A.chip=RAE230A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RAE230B.chip=RAE230B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34A.chip=RG_U34A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34B.chip=RG_U34B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34C.chip=RG_U34C.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RN_U34.chip=RN_U34.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RT_U34.chip=RT_U34.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_Ensembl1.1.chip=RZPD_Human_Ensembl1.1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_ORF_Clones_Gateway.chip=RZPD_Human_ORF_Clones_Gateway.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_Unigene3.1.chip=RZPD_Human_Unigene3.1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rat230_2.chip=Rat230_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Human.chip=RefSeq_NP_Human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Mouse.chip=RefSeq_NP_Mouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Rat.chip=RefSeq_NP_Rat.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_human.chip=RefSeq_human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Research_Genetics.chip=Research_Genetics.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rosetta.chip=Rosetta.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rosetta50K.chip=Rosetta50K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Stanford.chip=Stanford.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Stanford_Source_Accessions.chip=Stanford_Source_Accessions.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TIGR_31K_Human_Set.chip=TIGR_31K_Human_Set.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TIGR_40K_Human_Set.chip=TIGR_40K_Human_Set.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC.chip=TRC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC_DB.chip=TRC_DB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC_DB_v1.chip=TRC_DB_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/U133_X3P.chip=U133_X3P.chip", "ftp.broadinstitute.org://pub/gsea/annotations/UCLA_NIH_33K.chip=UCLA_NIH_33K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Zebrafish.chip=Zebrafish.chip", "ftp.broadinstitute.org://pub/gsea/annotations/labonweb_human.chip=labonweb_human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/lymphochip.chip=lymphochip.chip"],
            "kinds":[],
            "name":"chip.platform",
            "numValues":"0-1",
            "defaultValue":"ftp.broadinstitute.org://pub/gsea/annotations/GENE_SYMBOL.chip",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Chip to use. Upload a chip file if your chip is not listed as a choice for the chip platform parameter.",
            "choices":[],
            "kinds":[],
            "name":"chip.platform.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The statistic used to score hits (gene set members) and misses (non-members)",
            "choices":["classic", "weighted", "weighted_p2", "weighted_p1.5"],
            "kinds":[],
            "name":"scoring.scheme",
            "numValues":"0-1",
            "defaultValue":"weighted",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Class separation metric - gene markers are ranked using this metric to produce the gene list",
            "choices":["Cosine", "Euclidean", "Manhattan", "Pearson", "FeatureVariation", "tTest", "Signal2Noise", "None", "RegressionSlope", "Bhattacharyya", "Norm.Pearson", "Diff_of_Means", "Diff_of_Medians", "Ratio_of_Means", "Ratio_of_Medians", "log2_ratio_of_means", "Feature_stddev_by_mean"],
            "kinds":[],
            "name":"metric.for.ranking.genes",
            "numValues":"0-1",
            "defaultValue":"Signal2Noise",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Direction in which the gene list should be ordered",
            "choices":["ascending", "descending"],
            "kinds":[],
            "name":"gene.list.ordering.mode",
            "numValues":"0-1",
            "defaultValue":"descending",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Mode in which scores from the gene list should be considered",
            "choices":["real", "abs"],
            "kinds":[],
            "name":"gene.list.sorting.mode",
            "numValues":"0-1",
            "defaultValue":"real",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets larger than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"max.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"500",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Gene sets smaller than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"min.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"15",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Collapsing mode",
            "choices":["Max_probe", "Median_of_probes"],
            "kinds":[],
            "name":"collapsing.mode.for.probe.sets.with.more.than.one.match",
            "numValues":"0-1",
            "defaultValue":"Max_probe",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Normalization mode",
            "choices":["meandiv", "None"],
            "kinds":[],
            "name":"normalization.mode",
            "numValues":"0-1",
            "defaultValue":"meandiv",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Type of phenotype randomization (does not apply to gene set permutations)",
            "choices":["equalize_and_balance", "no_balance"],
            "kinds":[],
            "name":"randomization.mode",
            "numValues":"0-1",
            "defaultValue":"no_balance",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"If there is no known gene symbol match for a probe set, omit it from the collapsed dataset",
            "choices":["false", "true"],
            "kinds":[],
            "name":"omit.features.with.no.symbol.match",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Create detailed gene set report (heat map, mountain plot, etc.) for every enriched gene set",
            "choices":["false", "true"],
            "kinds":[],
            "name":"make.detailed.gene.set.report",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Use the median of each class instead of the mean for the class separation metrics",
            "choices":["true", "false"],
            "kinds":[],
            "name":"median.for.class.metrics",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Number of markers",
            "choices":[],
            "kinds":[],
            "name":"number.of.markers",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Plot GSEA mountain and related plots for the top sets of each phenotype",
            "choices":[],
            "kinds":[],
            "name":"plot.graphs.for.the.top.sets.of.each.phenotype",
            "numValues":"0-1",
            "defaultValue":"20",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Seed to use for randomization",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"timestamp",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to save random ranked lists",
            "choices":["false", "true"],
            "kinds":[],
            "name":"save.random.ranked.lists",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.file.name",
            "numValues":"0-1",
            "defaultValue":"<expression.dataset_basename>.zip",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"GSEA",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"8",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00072:8"
}, "0":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset file - .res, .gct, .odf",
            "choices":[],
            "kinds":[],
            "name":"data.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"class file - .cls, .odf",
            "choices":[],
            "kinds":[],
            "name":"class.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"output filename for marker gene list results - .odf file",
            "choices":[],
            "kinds":[],
            "name":"marker.gene.list.file",
            "numValues":"0-1",
            "defaultValue":"<data.filename_basename>.genelist",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"output filename for marker data - .gct file",
            "choices":[],
            "kinds":[],
            "name":"marker.data.set.file",
            "numValues":"0-1",
            "defaultValue":"<data.filename_basename>.neighbors",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"number of neighbors to find",
            "choices":[],
            "kinds":[],
            "name":"num.neighbors",
            "numValues":"0-1",
            "defaultValue":"50",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"number of permutations in permutation test",
            "choices":[],
            "kinds":[],
            "name":"num.permutations",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"user-set significance value for permutation test",
            "choices":[],
            "kinds":[],
            "name":"user.pval",
            "numValues":"0-1",
            "defaultValue":"0.5",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"use mean or median for feature selection",
            "choices":["=mean", "-d=median"],
            "kinds":[],
            "name":"mean.or.median",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"use signal-to-noise or t-test to select neighbors",
            "choices":["=t-test", "-S=SNR"],
            "kinds":[],
            "name":"ttest.or.snr",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"if no, values below will be ignored",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"filter.data",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"minimum threshold for data",
            "choices":[],
            "kinds":[],
            "name":"min.threshold",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"maximum threshold for data",
            "choices":[],
            "kinds":[],
            "name":"max.threshold",
            "numValues":"0-1",
            "defaultValue":"16000",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"minimum fold difference for filtering genes",
            "choices":[],
            "kinds":[],
            "name":"min.fold.diff",
            "numValues":"0-1",
            "defaultValue":"5",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"minimum absolute difference for filtering genes",
            "choices":[],
            "kinds":[],
            "name":"min.abs.diff",
            "numValues":"0-1",
            "defaultValue":"50",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        }
    ],
    "name":"ClassNeighbors",
    "write":false,
    "tags":["pinned", "recent"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00001:1"
}, "405":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset file - .res, .gct",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"expression.dataset",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Gene sets database from GSEA website.",
            "choices":["c1.all.v3.0.symbols.gmt=c1.all.v3.0.symbols.gmt [Positional]", "c1.all.v3.0.entrez.gmt=c1.all.v3.0.entrez.gmt [Positional]", "c2.all.v3.0.symbols.gmt=c2.all.v3.0.symbols.gmt [Curated]", "c2.all.v3.0.entrez.gmt=c2.all.v3.0.entrez.gmt [Curated]", "c2.cgp.v3.0.symbols.gmt=c2.cgp.v3.0.symbols.gmt [Curated]", "c2.cgp.v3.0.entrez.gmt=c2.cgp.v3.0.entrez.gmt [Curated]", "c2.cp.v3.0.symbols.gmt=c2.cp.v3.0.symbols.gmt [Curated]", "c2.cp.v3.0.entrez.gmt=c2.cp.v3.0.entrez.gmt [Curated]", "c2.cp.biocarta.v3.0.symbols.gmt=c2.cp.biocarta.v3.0.symbols.gmt [Curated]", "c2.cp.biocarta.v3.0.entrez.gmt=c2.cp.biocarta.v3.0.entrez.gmt [Curated]", "c2.cp.kegg.v3.0.symbols.gmt=c2.cp.kegg.v3.0.symbols.gmt [Curated]", "c2.cp.kegg.v3.0.entrez.gmt=c2.cp.kegg.v3.0.entrez.gmt [Curated]", "c2.cp.reactome.v3.0.symbols.gmt=c2.cp.reactome.v3.0.symbols.gmt [Curated]", "c2.cp.reactome.v3.0.entrez.gmt=c2.cp.reactome.v3.0.entrez.gmt [Curated]", "c3.all.v3.0.symbols.gmt=c3.all.v3.0.symbols.gmt [Motif]", "c3.all.v3.0.entrez.gmt=c3.all.v3.0.entrez.gmt [Motif]", "c3.mir.v3.0.symbols.gmt=c3.mir.v3.0.symbols.gmt [Motif]", "c3.mir.v3.0.entrez.gmt=c3.mir.v3.0.entrez.gmt [Motif]", "c3.tft.v3.0.symbols.gmt=c3.tft.v3.0.symbols.gmt [Motif]", "c3.tft.v3.0.entrez.gmt=c3.tft.v3.0.entrez.gmt [Motif]", "c4.all.v3.0.symbols.gmt=c4.all.v3.0.symbols.gmt [Computational]", "c4.all.v3.0.entrez.gmt=c4.all.v3.0.entrez.gmt [Computational]", "c4.cgn.v3.0.symbols.gmt=c4.cgn.v3.0.symbols.gmt [Computational]", "c4.cgn.v3.0.entrez.gmt=c4.cgn.v3.0.entrez.gmt [Computational]", "c4.cm.v3.0.symbols.gmt=c4.cm.v3.0.symbols.gmt [Computational]", "c4.cm.v3.0.entrez.gmt=c4.cm.v3.0.entrez.gmt [Computational]", "c5.all.v3.0.symbols.gmt=c5.all.v3.0.symbols.gmt [Gene Ontology]", "c5.all.v3.0.entrez.gmt=c5.all.v3.0.entrez.gmt [Gene Ontology]", "c5.bp.v3.0.symbols.gmt=c5.bp.v3.0.symbols.gmt [Gene Ontology]", "c5.bp.v3.0.entrez.gmt=c5.bp.v3.0.entrez.gmt [Gene Ontology]", "c5.cc.v3.0.symbols.gmt=c5.cc.v3.0.symbols.gmt [Gene Ontology]", "c5.cc.v3.0.entrez.gmt=c5.cc.v3.0.entrez.gmt [Gene Ontology]", "c5.mf.v3.0.symbols.gmt=c5.mf.v3.0.symbols.gmt [Gene Ontology]", "c5.mf.v3.0.entrez.gmt=c5.mf.v3.0.entrez.gmt [Gene Ontology]"],
            "kinds":[],
            "name":"gene.sets.database",
            "numValues":"0-1",
            "defaultValue":"c1.all.v3.0.symbols.gmt",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets database - .gmt, .gmx, .grp. Upload a gene set if your gene set is not listed as a choice for the gene sets database parameter.",
            "choices":[],
            "kinds":["gmt", "gmx", "grp"],
            "name":"gene.sets.database.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Number of permutations to perform",
            "choices":[],
            "kinds":[],
            "name":"number.of.permutations",
            "numValues":"0-1",
            "defaultValue":"1000",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Cls file - .cls, must be binary",
            "choices":[],
            "kinds":["cls"],
            "name":"phenotype.labels",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Select true to have GSEA collapse each probe set in the expression dataset into a single vector for the gene, which gets identified by its gene symbol.",
            "choices":["false", "true"],
            "kinds":[],
            "name":"collapse.dataset",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Type of permutations to perform",
            "choices":["phenotype", "gene_set"],
            "kinds":[],
            "name":"permutation.type",
            "numValues":"0-1",
            "defaultValue":"phenotype",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Chip file from GSEA website.",
            "choices":["nochip=", "ftp.broadinstitute.org://pub/gsea/annotations/AFFYMETRIX.chip=AFFYMETRIX.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AG.chip=AG.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1_cDNA.chip=Agilent_Human1_cDNA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1A.chip=Agilent_Human1A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1Av2.chip=Agilent_Human1Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1B.chip=Agilent_Human1B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_HumanGenome.chip=Agilent_HumanGenome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Mouse_cDNA.chip=Agilent_Mouse_cDNA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseDev.chip=Agilent_MouseDev.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseGenome.chip=Agilent_MouseGenome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseOligo.chip=Agilent_MouseOligo.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_RatGenome_G4131A.chip=Agilent_RatGenome_G4131A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_RatOligo.chip=Agilent_RatOligo.chip", "ftp.broadinstitute.org://pub/gsea/annotations/APPLERA_ABI1700.chip=APPLERA_ABI1700.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ATH1_121501.chip=ATH1_121501.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AtlasMouse1.2.chip=AtlasMouse1.2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AtlasRat1.2.chip=AtlasRat1.2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/BIAO.chip=BIAO.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Bovine.chip=Bovine.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Caltech16KMouse.chip=Caltech16KMouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Caltech16KOligoMouse.chip=Caltech16KOligoMouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Canine_2.chip=Canine_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Clontech_Atlas_13K.chip=Clontech_Atlas_13K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Clontech_BD_Atlas.chip=Clontech_BD_Atlas.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CNMCMuscleChip.chip=CNMCMuscleChip.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_Human_Whole_Genome.chip=CodeLink_Human_Whole_Genome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_20K_I_Bioarray.chip=CodeLink_UniSet_Human_20K_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_I_Bioarray.chip=CodeLink_UniSet_Human_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_II_Bioarray.chip=CodeLink_UniSet_Human_II_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Rat_I_Bioarray.chip=CodeLink_UniSet_Rat_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/DrosGenome1.chip=DrosGenome1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Drosophila_2.chip=Drosophila_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/G4110A.chip=G4110A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/G4110Av2.chip=G4110Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/GenosysCytokineV2.chip=GenosysCytokineV2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HC_G110.chip=HC_G110.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_Focus.chip=HG_Focus.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133_Plus_2.chip=HG_U133_Plus_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133A_2.chip=HG_U133A_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133A.chip=HG_U133A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133AAOFAV2.chip=HG_U133AAOFAV2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133B.chip=HG_U133B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95Av2.chip=HG_U95Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95B.chip=HG_U95B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95C.chip=HG_U95C.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95D.chip=HG_U95D.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95E.chip=HG_U95E.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HPCGGCompugenAnnotations.chip=HPCGGCompugenAnnotations.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HT_HG_U133A_EA.chip=HT_HG_U133A_EA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HT_HG_U133A.chip=HT_HG_U133A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubA.chip=Hu35KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubB.chip=Hu35KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubC.chip=Hu35KsubC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubD.chip=Hu35KsubD.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu6800.chip=Hu6800.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HU6800.chip=HU6800.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HuGene_1_0_st.chip=HuGene_1_0_st.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illimina_Mus6_v1_1.chip=Illimina_Mus6_v1_1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illimuna_Mus6_v1.chip=Illimuna_Mus6_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Hum6_v1.chip=Illumina_Hum6_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Hum6_v2.chip=Illumina_Hum6_v2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Human.chip=Illumina_Human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_HumRef8_v1.chip=Illumina_HumRef8_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_HumRef8_v2.chip=Illumina_HumRef8_v2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_MusRef8_v1_1.chip=Illumina_MusRef8_v1_1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_MusRef8_v1.chip=Illumina_MusRef8_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_HumanHT_12_V3_0_R3_11283641_A.chip=ilmn_HumanHT_12_V3_0_R3_11283641_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_HumanRef_8_V2_0_R4_11223162_A.chip=ilmn_HumanRef_8_V2_0_R4_11223162_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_HUMANREF_8_V3_0_R1_11282963_A_WGDASL.chip=ilmn_HUMANREF_8_V3_0_R1_11282963_A_WGDASL.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_HumanRef_8_V3_0_R3_11282963_A.chip=ilmn_HumanRef_8_V3_0_R3_11282963_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_HumanWG_6_V2_0_R4_11223189_A.chip=ilmn_HumanWG_6_V2_0_R4_11223189_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_HumanWG_6_V3_0_R3_11282955_A.chip=ilmn_HumanWG_6_V3_0_R3_11282955_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_MouseRef_8_V1_1_R4_11234312_A.chip=ilmn_MouseRef_8_V1_1_R4_11234312_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_MouseRef_8_V2_0_R3_11278551_A.chip=ilmn_MouseRef_8_V2_0_R3_11278551_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_MouseWG_6_V1_1_R4_11234304_A.chip=ilmn_MouseWG_6_V1_1_R4_11234304_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_MouseWG_6_V2_0_R3_11278593_A.chip=ilmn_MouseWG_6_V2_0_R3_11278593_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_RatRef_12_V1_0_R5_11222119_A.chip=ilmn_RatRef_12_V1_0_R5_11222119_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_RatRef12_v1.chip=Illumina_RatRef12_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/labonweb_human.chip=labonweb_human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/lymphochip.chip=lymphochip.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Av2.chip=MG_U74Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Bv2.chip=MG_U74Bv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Cv2.chip=MG_U74Cv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MOE430A.chip=MOE430A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MOE430B.chip=MOE430B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MoGene_1_0_st.chip=MoGene_1_0_st.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mouse430_2.chip=Mouse430_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mouse430A_2.chip=Mouse430A_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu11KsubA.chip=Mu11KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu11KsubB.chip=Mu11KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubA.chip=Mu19KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubB.chip=Mu19KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubC.chip=Mu19KsubC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MWG_Human_30K_A.chip=MWG_Human_30K_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MWG_Human_30K_B.chip=MWG_Human_30K_B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Netherland_cancer_institute_operon_human_35k.chip=Netherland_cancer_institute_operon_human_35k.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Netherland_cancer_institute_operon_mouse_FOOk.chip=Netherland_cancer_institute_operon_mouse_FOOk.chip", "ftp.broadinstitute.org://pub/gsea/annotations/NIA15k.chip=NIA15k.chip", "ftp.broadinstitute.org://pub/gsea/annotations/OPERON_HUMANv2.chip=OPERON_HUMANv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/OPERON_HUMANv3.chip=OPERON_HUMANv3.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RAE230A.chip=RAE230A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RAE230B.chip=RAE230B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rat230_2.chip=Rat230_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_human.chip=RefSeq_human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Human.chip=RefSeq_NP_Human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Mouse.chip=RefSeq_NP_Mouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Rat.chip=RefSeq_NP_Rat.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Research_Genetics.chip=Research_Genetics.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34A.chip=RG_U34A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34B.chip=RG_U34B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34C.chip=RG_U34C.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RN_U34.chip=RN_U34.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rosetta.chip=Rosetta.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rosetta50K.chip=Rosetta50K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RT_U34.chip=RT_U34.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_Ensembl1.1.chip=RZPD_Human_Ensembl1.1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_ORF_Clones_Gateway.chip=RZPD_Human_ORF_Clones_Gateway.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_Unigene3.1.chip=RZPD_Human_Unigene3.1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/SEQ_ACCESSION.chip=SEQ_ACCESSION.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Stanford_Source_Accessions.chip=Stanford_Source_Accessions.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Stanford.chip=Stanford.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TIGR_31K_Human_Set.chip=TIGR_31K_Human_Set.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TIGR_40K_Human_Set.chip=TIGR_40K_Human_Set.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC_DB_v1.chip=TRC_DB_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC_DB.chip=TRC_DB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC.chip=TRC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/U133_X3P.chip=U133_X3P.chip", "ftp.broadinstitute.org://pub/gsea/annotations/UCLA_NIH_33K.chip=UCLA_NIH_33K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Zebrafish.chip=Zebrafish.chip"],
            "kinds":[],
            "name":"chip.platform",
            "numValues":"0-1",
            "defaultValue":"nochip",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Chip to use. Upload a chip file if your chip is not listed as a choice for the chip platform parameter.",
            "choices":[],
            "kinds":[],
            "name":"chip.platform.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The statistic used to score hits (gene set members) and misses (non-members)",
            "choices":["classic", "weighted", "weighted_p2", "weighted_p1.5"],
            "kinds":[],
            "name":"scoring.scheme",
            "numValues":"0-1",
            "defaultValue":"weighted",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Class separation metric - gene markers are ranked using this metric to produce the gene list",
            "choices":["Cosine", "Euclidean", "Manhattan", "Pearson", "FeatureVariation", "tTest", "Signal2Noise", "None", "RegressionSlope", "Bhattacharyya", "Norm.Pearson", "Diff_of_Means", "Diff_of_Medians", "Ratio_of_Means", "Ratio_of_Medians", "log2_ratio_of_means", "Feature_stddev_by_mean"],
            "kinds":[],
            "name":"metric.for.ranking.genes",
            "numValues":"0-1",
            "defaultValue":"Signal2Noise",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Direction in which the gene list should be ordered",
            "choices":["ascending", "descending"],
            "kinds":[],
            "name":"gene.list.ordering.mode",
            "numValues":"0-1",
            "defaultValue":"descending",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Mode in which scores from the gene list should be considered",
            "choices":["real", "abs"],
            "kinds":[],
            "name":"gene.list.sorting.mode",
            "numValues":"0-1",
            "defaultValue":"real",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets larger than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"max.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"500",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Gene sets smaller than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"min.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"15",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Collapsing mode",
            "choices":["Max_probe", "Median_of_probes"],
            "kinds":[],
            "name":"collapsing.mode.for.probe.sets.with.more.than.one.match",
            "numValues":"0-1",
            "defaultValue":"Max_probe",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Normalization mode",
            "choices":["meandiv", "None"],
            "kinds":[],
            "name":"normalization.mode",
            "numValues":"0-1",
            "defaultValue":"meandiv",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Type of phenotype randomization (does not apply to gene set permutations)",
            "choices":["equalize_and_balance", "no_balance"],
            "kinds":[],
            "name":"randomization.mode",
            "numValues":"0-1",
            "defaultValue":"no_balance",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"If there is no known gene symbol match for a probe set, omit it from the collapsed dataset",
            "choices":["false", "true"],
            "kinds":[],
            "name":"omit.features.with.no.symbol.match",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Create detailed gene set report (heat map, mountain plot, etc.) for every enriched gene set",
            "choices":["false", "true"],
            "kinds":[],
            "name":"make.detailed.gene.set.report",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Use the median of each class instead of the mean for the class separation metrics",
            "choices":["true", "false"],
            "kinds":[],
            "name":"median.for.class.metrics",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Number of markers",
            "choices":[],
            "kinds":[],
            "name":"number.of.markers",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Plot GSEA mountain and related plots for the top sets of each phenotype",
            "choices":[],
            "kinds":[],
            "name":"plot.graphs.for.the.top.sets.of.each.phenotype",
            "numValues":"0-1",
            "defaultValue":"20",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Seed to use for randomization",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"timestamp",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to save random ranked lists",
            "choices":["false", "true"],
            "kinds":[],
            "name":"save.random.ranked.lists",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.file.name",
            "numValues":"0-1",
            "defaultValue":"<expression.dataset_basename>.zip",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"GSEA",
    "write":false,
    "tags":["pinned", "recent"],
    "type":"module",
    "version":"13",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00072:13"
}, "7":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"odf format file from marker analysis (GeneNeighbors or ClassNeighbors)",
            "choices":[],
            "kinds":["Gene List"],
            "name":"inputfilename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"GeneListSignificanceViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00006:4"
}, "404":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The results from ComparativeMarkerSelection - .odf",
            "choices":[],
            "kinds":["Comparative Marker Selection"],
            "name":"comparative.marker.selection.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The dataset file used to select markers - .gct, .res, Dataset",
            "choices":[],
            "kinds":["gct", "res", "Dataset"],
            "name":"dataset.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The statistic to filter features on",
            "choices":["Bonferroni", "FDR(BH)", "Feature P", "Feature P High", "Feature P Low", "Fold Change", "FWER", "maxT", "Q Value", "Rank", "Score"],
            "kinds":[],
            "name":"statistic",
            "numValues":"0-1",
            "defaultValue":"Bonferroni",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Select features with statistic >= min",
            "choices":[],
            "kinds":[],
            "name":"min",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Select features with statistic <= max",
            "choices":[],
            "kinds":[],
            "name":"max",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Number of neighbors to select by score in each direction",
            "choices":[],
            "kinds":[],
            "name":"number.of.neighbors",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The base name for the output files",
            "choices":[],
            "kinds":[],
            "name":"base.output.name",
            "numValues":"0-1",
            "defaultValue":"<comparative.marker.selection.filename_basename>.filt",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ExtractComparativeMarkerResults",
    "write":false,
    "tags":["gct", "res", "Dataset", "txt"],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00046:4"
}, "6":{
    "category":"Annotation",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file to be annotated (res, gct, or odf format, or text file containing one probe per line). Annotations will be retrieved based on affymetrix probe ids.",
            "choices":[],
            "kinds":["res", "gct", "Dataset", "txt"],
            "name":"Input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Name of the output file containing the annotations (same format as input) that will be created.",
            "choices":[],
            "kinds":[],
            "name":"Output.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.filename>.annot",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Where to write the annotations in the output file",
            "choices":["0=Append to probe id", "1=Append to description", "2=Replace description", "3=Write to annotation file"],
            "kinds":[],
            "name":"Annotation.Column",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "Affymetrix Description=include"],
            "kinds":[],
            "name":"Affymetrix.Description",
            "numValues":"0-1",
            "defaultValue":"Affymetrix Description",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "LocusLink Locus ID=include"],
            "kinds":[],
            "name":"LocusLink.ID",
            "numValues":"0-1",
            "defaultValue":"LocusLink Locus ID",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "LocusLink Description=include"],
            "kinds":[],
            "name":"LocusLink.Gene.Name",
            "numValues":"0-1",
            "defaultValue":"LocusLink Description",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "LocusLink Symbol=include"],
            "kinds":[],
            "name":"LocusLink.Symbol",
            "numValues":"0-1",
            "defaultValue":"LocusLink Symbol",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "LocusLink Location=include"],
            "kinds":[],
            "name":"LocusLink.Location",
            "numValues":"0-1",
            "defaultValue":"LocusLink Location",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "Unigene Human Cluster=include"],
            "kinds":[],
            "name":"UniGene.HS.Cluster.ID",
            "numValues":"0-1",
            "defaultValue":"Unigene Human Cluster",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "Unigene Human Description=include"],
            "kinds":[],
            "name":"UniGene.HS.Description",
            "numValues":"0-1",
            "defaultValue":"Unigene Human Description",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "Unigene Mouse Cluster=include"],
            "kinds":[],
            "name":"UniGene.MM.Cluster.ID",
            "numValues":"0-1",
            "defaultValue":"Unigene Mouse Cluster",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=", "Unigene Mouse Description=include"],
            "kinds":[],
            "name":"UniGene.MM.Description",
            "numValues":"0-1",
            "defaultValue":"Unigene Mouse Description",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"GeneCruiser",
    "write":false,
    "tags":["res", "gct", "Dataset"],
    "type":"module",
    "version":"5",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00037:5"
}, "407":{
    "category":"Image Creators",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Clustered data table, contains the original data, but reordered",
            "choices":[],
            "kinds":["cdt"],
            "name":"cdt",
            "numValues":"0-1",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Gene Tree file, records the order in which genes (rows) were joined (at least one of gtr and atr files are required)",
            "choices":[],
            "kinds":["gtr"],
            "name":"gtr",
            "numValues":"0-1",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Array Tree file, records the order in which samples (columns) were joined (at least one of gtr and atr files are required)",
            "choices":[],
            "kinds":["atr"],
            "name":"atr",
            "numValues":"0-1",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The output file name - .bmp, .jpeg, .png, .tiff",
            "choices":[],
            "kinds":[],
            "name":"output",
            "numValues":"0-1",
            "defaultValue":"<cdt_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The output file format",
            "choices":["bmp", "jpeg", "png", "tiff"],
            "kinds":[],
            "name":"output.format",
            "numValues":"0-1",
            "defaultValue":"jpeg",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The size in pixels of an element along the horizontal axis",
            "choices":[],
            "kinds":[],
            "name":"column.size",
            "numValues":"0-1",
            "defaultValue":"8",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The size in pixels of an element along the vertical axis",
            "choices":[],
            "kinds":[],
            "name":"row.size",
            "numValues":"0-1",
            "defaultValue":"8",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Whether to show a grid between elements",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"show.grid",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The grid color",
            "choices":["0:0:0=black", "128:128:128=grey", "255:255:255=white"],
            "kinds":[],
            "name":"grid.color",
            "numValues":"0-1",
            "defaultValue":"0:0:0",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to show row descriptions",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"show.row.descriptions",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to show row names",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"show.row.names",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Rows to highlight in the heat map",
            "choices":[],
            "kinds":[],
            "name":"rows.to.highlight",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The color to highlight the rows if a rows to highlight file is provided",
            "choices":["255:0:0=red", "255:255:0=yellow", "0:0:255=blue"],
            "kinds":[],
            "name":"row.highlight.color",
            "numValues":"0-1",
            "defaultValue":"255:0:0",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The color scheme",
            "choices":["row normalized", "global"],
            "kinds":[],
            "name":"color.scheme",
            "numValues":"0-1",
            "defaultValue":"row normalized",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Color palette consisting of one r:g:b triplet or one hex value per line",
            "choices":[],
            "kinds":[],
            "name":"color.palette",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to use a linear color gradient or discrete colors",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"use.color.gradient",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"HierarchicalClusteringImage",
    "write":false,
    "tags":["jpeg", "png", "tiff", "bmp", "eps"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00071:3"
}, "5":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"odf file with or without features to summarize",
            "choices":[],
            "kinds":["Prediction Features"],
            "name":"feature.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"FeatureSummaryViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00005:3"
}, "340":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The set of input FCS files to be normalized.",
            "choices":[],
            "kinds":[],
            "name":"Input.FCS.files",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Comma-separated list of parameter short names to normalize.",
            "choices":[],
            "kinds":[],
            "name":"Channels.to.normalize",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Apply the asinh transformation prior normalization?",
            "choices":["TRUE=Yes, default", "FALSE=No"],
            "kinds":[],
            "name":"Apply.ASinH",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Create additional histogram channel report?",
            "choices":["TRUE=Yes, default", "FALSE=No"],
            "kinds":[],
            "name":"Create.report",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Number of landmarks to be used for normalization.",
            "choices":[],
            "kinds":[],
            "name":"Landmarks.number",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Zip the resulting normalized FCS data files together?",
            "choices":["TRUE=Yes, default", "FALSE=No"],
            "kinds":[],
            "name":"Zip.output",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"FCSNormalization",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00190:1"
}, "406":{
    "category":"GENE-E",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset to be viewed in GENE-E",
            "choices":[],
            "kinds":["gct", "res"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The cls or sample info file",
            "choices":[],
            "kinds":["txt", "cls"],
            "name":"sample.information.or.class.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"GENE_E",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00273:1"
}, "160":{
    "category":"Prediction",
    "description":"description goes here",
     "inputs":[
        {
            "description":"training data file name - .gct, .res, .odf type = Dataset, ignored if a saved model (saved.model.filename) is used",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"train.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"class file for training data - .cls, ignored if a saved model (saved.model.filename) is used",
            "choices":[],
            "kinds":["cls"],
            "name":"train.class.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"input KNN model file - .odf type = KNN Prediction Model",
            "choices":[],
            "kinds":["KNN Prediction Model"],
            "name":"saved.model.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"name of output KNN model file - .odf type = KNN Prediction Model",
            "choices":[],
            "kinds":[],
            "name":"model.file",
            "numValues":"0-1",
            "defaultValue":"<train.filename_basename>.model",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"test data file name - .gct, .res, .odf type = Dataset",
            "choices":[],
            "kinds":["gct", "res", "Dataset"],
            "name":"test.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"class file for test data - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"test.class.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"number of selected features if feature list filename is not specified",
            "choices":[],
            "kinds":[],
            "name":"num.features",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"statistic to use to perform feature selection",
            "choices":["0=SNR", "1=T-Test", "2=SNR (median)", "3=T-Test (median)", "4=SNR (min std)", "5=T-Test (min std)", "6=SNR (median, min std)", "7=T-Test (median, min std)"],
            "kinds":[],
            "name":"feature.selection.statistic",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"minimum standard deviation if feature selection statistic includes min std option",
            "choices":[],
            "kinds":[],
            "name":"min.std",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"features to use for prediction",
            "choices":[],
            "kinds":[],
            "name":"feature.list.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"number of neighbors for KNN",
            "choices":[],
            "kinds":[],
            "name":"num.neighbors",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"weighting type for neighbors",
            "choices":["1=none", "2=One-over-k", "3=distance"],
            "kinds":[],
            "name":"weighting.type",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"distance measure",
            "choices":["2=Cosine Distance", "1=Euclidean Distance"],
            "kinds":[],
            "name":"distance.measure",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"name of output file for prediction results - .odf",
            "choices":[],
            "kinds":[],
            "name":"pred.results.file",
            "numValues":"0-1",
            "defaultValue":"<test.filename_basename>.pred.odf",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"KNN",
    "write":false,
    "tags":["Prediction Results", "KNN Prediction Model"],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00012:4"
}, "4":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input file - .res, .gct, .odf, file from which the row names are extracted",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"output filename containing the row names - .txt",
            "choices":[],
            "kinds":[],
            "name":"output",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>.row.names.txt",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ExtractRowNames",
    "write":false,
    "tags":["txt"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00004:3"
}, "401":{
    "category":"Proteomics",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Spectrum file -.csv",
            "choices":[],
            "kinds":["csv"],
            "name":"spectrum1.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Spectrum file - .csv",
            "choices":[],
            "kinds":["csv"],
            "name":"spectrum2.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Output file name - .odf",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<spectrum1.filename_basename>_<spectrum2.filename_basename>_compare.odf",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Minimum M/Z to include",
            "choices":[],
            "kinds":[],
            "name":"low.Da",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Maximum M/Z to include",
            "choices":[],
            "kinds":[],
            "name":"high.Da",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"CompareSpectra",
    "write":false,
    "tags":["Spectra Similarity"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00052:3"
}, "400":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file in FPKM_TRACKING format",
            "choices":[],
            "kinds":["fpkm_tracking"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Select row labels to be written to GCT file",
            "choices":["tracking_id=Tracking ID", "nearest_ref_id=Nearest Reference Transcript ID", "gene_short_name=Gene Name", "tss_id=TSS ID", "locus=Locus"],
            "kinds":[],
            "name":"row.labels",
            "numValues":"0-1",
            "defaultValue":"tracking_id",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Select row descriptions to be written to GCT file",
            "choices":["locus=Locus", "tracking_id=Tracking ID", "nearest_ref_id=Nearest Reference Transcript ID", "gene_short_name=Gene Name", "tss_id=TSS ID", "class_code=Class Code"],
            "kinds":[],
            "name":"row.descriptions",
            "numValues":"0-1",
            "defaultValue":"locus",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to filter rows with invalid row names (ie., \"-\")",
            "choices":["no=no", "yes=yes"],
            "kinds":[],
            "name":"filter.rows",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A label that will be used to name the GCT output file.",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Fpkm_trackingToGct",
    "write":false,
    "tags":["gct", "fpkm_tracking"],
    "type":"module",
    "version":"5",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00250:5"
}, "403":{
    "category":"Data Format Conversion",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file in FPKM_TRACKING format",
            "choices":[],
            "kinds":["fpkm_tracking"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Select row labels to be written to GCT file",
            "choices":["tracking_id=Tracking ID", "nearest_ref_id=Nearest Reference Transcript ID", "gene_short_name=Gene Name", "tss_id=TSS ID", "locus=Locus"],
            "kinds":[],
            "name":"row.labels",
            "numValues":"0-1",
            "defaultValue":"tracking_id",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Select row descriptions to be written to GCT file",
            "choices":["locus=Locus", "tracking_id=Tracking ID", "nearest_ref_id=Nearest Reference Transcript ID", "gene_short_name=Gene Name", "tss_id=TSS ID", "class_code=Class Code"],
            "kinds":[],
            "name":"row.descriptions",
            "numValues":"0-1",
            "defaultValue":"locus",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to filter rows with invalid row names (ie., \"-\")",
            "choices":["no=no", "yes=yes"],
            "kinds":[],
            "name":"filter.rows",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Which column(s) to include in the output file",
            "choices":["all=All Columns", "FPKM", "FPKM.*lo|conf.*lo=FPKM Confidence Low", "FPKM.*hi|conf.*hi=FPKM Confidence High", "coverage=Coverage", "length=Length"],
            "kinds":[],
            "name":"output.columns",
            "numValues":"0-1",
            "defaultValue":"FPKM",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A label that will be used to name the GCT output file.",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Fpkm_trackingToGct",
    "write":false,
    "tags":["gct", "fpkm_tracking"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00250:2"
}, "9":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset file - .res, .gct",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"expression.dataset",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Gene sets database from GSEA website.",
            "choices":["ftp.broad.mit.edu://pub/gsea/gene_sets/c1.v2.symbols.gmt", "ftp.broad.mit.edu://pub/gsea/gene_sets/c2.v2.symbols.gmt", "ftp.broad.mit.edu://pub/gsea/gene_sets/c3.v2.symbols.gmt", "ftp.broad.mit.edu://pub/gsea/gene_sets/c4.v2.symbols.gmt"],
            "kinds":[],
            "name":"gene.sets.database",
            "numValues":"0-1",
            "defaultValue":"ftp.broad.mit.edu://pub/gsea/gene_sets/c1.v2.symbols.gmt",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets database - .gmt, .gmx, .grp. Upload a gene set if your gene set is not listed as a choice for the gene sets database parameter.",
            "choices":[],
            "kinds":["gmt", "gmx", "grp"],
            "name":"gene.sets.database.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Number of permutations to perform",
            "choices":[],
            "kinds":[],
            "name":"number.of.permutations",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Cls file - .cls, must be binary",
            "choices":[],
            "kinds":["cls"],
            "name":"phenotype.labels",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Select True to have GSEA collapse each probe set in the expression dataset into a single vector for the gene, which gets identified by its gene symbol.",
            "choices":["false", "true"],
            "kinds":[],
            "name":"collapse.dataset",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Type of permutations to perform",
            "choices":["phenotype", "tag"],
            "kinds":[],
            "name":"permutation.type",
            "numValues":"0-1",
            "defaultValue":"phenotype",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Chip file from GSEA website.",
            "choices":["ftp.broad.mit.edu://pub/gsea/annotations/GENE_SYMBOL.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Seq_Accession.chip", "ftp.broad.mit.edu://pub/gsea/annotations/SEQ_ACCESSION.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Hu35KsubA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Hu35KsubB.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Hu35KsubC.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Hu35KsubD.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Hu6800.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_Focus.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U133A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U133AAOFAV2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U133A_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U133B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U133_Plus_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U95Av2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U95B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U95C.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U95D.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U95E.chip", "ftp.broad.mit.edu://pub/gsea/annotations/AFFYMETRIX.chip", "ftp.broad.mit.edu://pub/gsea/annotations/AG.chip", "ftp.broad.mit.edu://pub/gsea/annotations/APPLERA_ABI1700.chip", "ftp.broad.mit.edu://pub/gsea/annotations/ATH1_121501.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_Human1A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_Human1Av2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_Human1B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_Human1_cDNA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_HumanGenome.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_MouseDev.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_MouseGenome.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_MouseOligo.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_Mouse_cDNA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_RatGenome_G4131A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_RatOligo.chip", "ftp.broad.mit.edu://pub/gsea/annotations/AtlasMouse1.2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/AtlasRat1.2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/BIAO.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Bovine.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CNMCMuscleChip.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Caltech16KMouse.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Caltech16KOligoMouse.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Canine_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Clontech_Atlas_13K.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Clontech_BD_Atlas.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CodeLink_Human_Whole_Genome.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CodeLink_UniSet_Human_20K_I_Bioarray.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CodeLink_UniSet_Human_II_Bioarray.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CodeLink_UniSet_Human_I_Bioarray.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CodeLink_UniSet_Rat_I_Bioarray.chip", "ftp.broad.mit.edu://pub/gsea/annotations/DrosGenome1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Drosophila_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/G4110A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/G4110Av2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/GenosysCytokineV2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HC_G110.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HPCGGCompugenAnnotations.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HT_HG_U133A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HT_HG_U133A_EA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HU6800.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_Human.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MG_U74Av2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MG_U74Bv2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MG_U74Cv2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MOE430A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MOE430B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MWG_Human_30K_A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MWG_Human_30K_B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mouse430A_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mouse430_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mu11KsubA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mu11KsubB.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mu19KsubA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mu19KsubB.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mu19KsubC.chip", "ftp.broad.mit.edu://pub/gsea/annotations/NIA15k.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Netherland_cancer_institute_operon_human_35k.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Netherland_cancer_institute_operon_mouse_FOOk.chip", "ftp.broad.mit.edu://pub/gsea/annotations/OPERON_HUMANv2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/OPERON_HUMANv3.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RAE230A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RAE230B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RG_U34A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RG_U34B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RG_U34C.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RN_U34.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RT_U34.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RZPD_Human_Ensembl1.1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RZPD_Human_ORF_Clones_Gateway.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RZPD_Human_Unigene3.1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Rat230_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RefSeq_NP_Human.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RefSeq_NP_Mouse.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RefSeq_NP_Rat.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RefSeq_human.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Research_Genetics.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Rosetta.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Rosetta50K.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Stanford.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Stanford_Source_Accessions.chip", "ftp.broad.mit.edu://pub/gsea/annotations/TIGR_31K_Human_Set.chip", "ftp.broad.mit.edu://pub/gsea/annotations/TIGR_40K_Human_Set.chip", "ftp.broad.mit.edu://pub/gsea/annotations/U133_X3P.chip", "ftp.broad.mit.edu://pub/gsea/annotations/UCLA_NIH_33K.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Zebrafish.chip", "ftp.broad.mit.edu://pub/gsea/annotations/annotations_ALL.zip", "ftp.broad.mit.edu://pub/gsea/annotations/chip_order.txt", "ftp.broad.mit.edu://pub/gsea/annotations/labonweb_human.chip", "ftp.broad.mit.edu://pub/gsea/annotations/lymphochip.chip"],
            "kinds":[],
            "name":"chip.platform",
            "numValues":"0-1",
            "defaultValue":"ftp.broad.mit.edu://pub/gsea/annotations/GENE_SYMBOL.chip",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Chip to use. Upload a chip file if your chip is not listed as a choice for the chip platform parameter.",
            "choices":[],
            "kinds":[],
            "name":"chip.platform.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The statistic used to score hits (gene set members) and misses (non-members)",
            "choices":["classic", "weighted", "weighted_p2", "weighted_p1.5"],
            "kinds":[],
            "name":"scoring.scheme",
            "numValues":"0-1",
            "defaultValue":"weighted",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Class separation metric - gene markers are ranked using this metric to produce the gene list",
            "choices":["Cosine", "Euclidean", "Manhattan", "Pearson", "FeatureVariation", "tTest", "Signal2Noise", "None", "RegressionSlope", "Bhattacharyya", "Norm.Pearson", "Diff_of_Means", "Diff_of_Medians", "Ratio_of_Means", "Ratio_of_Medians", "log2_ratio_of_means", "Feature_stddev_by_mean"],
            "kinds":[],
            "name":"metric.for.ranking.genes",
            "numValues":"0-1",
            "defaultValue":"Signal2Noise",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Direction in which the gene list should be ordered",
            "choices":["ascending", "descending"],
            "kinds":[],
            "name":"gene.list.ordering.mode",
            "numValues":"0-1",
            "defaultValue":"descending",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Mode in which scores from the gene list should be considered",
            "choices":["real", "abs"],
            "kinds":[],
            "name":"gene.list.sorting.mode",
            "numValues":"0-1",
            "defaultValue":"real",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets larger than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"max.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"500",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Gene sets smaller than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"min.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"25",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Collapsing mode",
            "choices":["Max_probe", "Median_of_probes"],
            "kinds":[],
            "name":"collapsing.mode.for.probe.sets.with.more.than.one.match",
            "numValues":"0-1",
            "defaultValue":"Max_probe",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Normalization mode",
            "choices":["meandiv", "None"],
            "kinds":[],
            "name":"normalization.mode",
            "numValues":"0-1",
            "defaultValue":"meandiv",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Type of phenotype randomization (does not apply to gene set permutations)",
            "choices":["equalize_and_balance", "no_balance"],
            "kinds":[],
            "name":"randomization.mode",
            "numValues":"0-1",
            "defaultValue":"no_balance",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"If there is no known gene symbol match for a probe set, omit it from the collapsed dataset",
            "choices":["false", "true"],
            "kinds":[],
            "name":"omit.features.with.no.symbol.match",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Create detailed gene set report (heat map, mountain plot, etc.) for every enriched gene set",
            "choices":["false", "true"],
            "kinds":[],
            "name":"make.detailed.gene.set.report",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Use the median of each class instead of the mean for the class separation metrics",
            "choices":["true", "false"],
            "kinds":[],
            "name":"median.for.class.metrics",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Number of markers",
            "choices":[],
            "kinds":[],
            "name":"number.of.markers",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Plot GSEA mountain and related plots for the top sets of each phenotype",
            "choices":[],
            "kinds":[],
            "name":"plot.graphs.for.the.top.sets.of.each.phenotype",
            "numValues":"0-1",
            "defaultValue":"20",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Seed to use for randomization",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"timestamp",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to save random ranked lists",
            "choices":["false", "true"],
            "kinds":[],
            "name":"save.random.ranked.lists",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.file.name",
            "numValues":"0-1",
            "defaultValue":"<expression.dataset_basename>.zip",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"GSEA",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00072:1"
}, "402":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The reference file including cytoband and gene location information.",
            "choices":["hg19_with_miR_20120227.mat=Human Hg19", "hg18_with_miR_20080407.mat=Human Hg18", "hg17.mat=Human Hg17", "hg16.mat=Human Hg16"],
            "kinds":[],
            "name":"refgene.file",
            "numValues":"0-1",
            "defaultValue":"hg19_with_miR_20120227.mat",
            "required":true,
            "type":"java.io.String",
            "fileChoice":true
        },
        {
            "description":"The segmentation file contains the segmented data for all the samples identified by GLAD, CBS, or some other segmentation algorithm. (See GLAD file format in the Genepattern file formats documentation.) It is a six column, tab-delimited file with an optional first line identifying the columns. Positions are in base pair units.",
            "choices":[],
            "kinds":["seg", "txt", "glad"],
            "name":"seg.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The markers file identifies the marker names and positions of the markers in the original dataset (before segmentation). It is a three column, tab-delimited file with an optional header. If not already, markers are sorted by genomic position.",
            "choices":[],
            "kinds":["cn", "txt"],
            "name":"markers.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The array list file is an optional file identifying the subset of samples to be used in the analysis. It is a one column file with an optional header. The sample identifiers listed in the array list file must match the sample names given in the segmentation file.",
            "choices":[],
            "kinds":["alf", "txt"],
            "name":"array.list.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"There are two options for the cnv file. The first option allows CNVs to be identified by marker name. The second option allows the CNVs to be identified by genomic location.",
            "choices":[],
            "kinds":["CNV"],
            "name":"cnv.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Threshold for copy number amplifications. Regions with a log2 ratio above this value are considered amplified.",
            "choices":["1=yes", "0=no"],
            "kinds":[],
            "name":"gene.gistic",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.io.Float",
            "fileChoice":true
        },
        {
            "description":"Threshold for copy number amplifications. Regions with a log2 ratio above this value are considered amplified.",
            "choices":[],
            "kinds":[],
            "name":"amplifications.threshold",
            "numValues":"0-1",
            "defaultValue":"0.1",
            "required":true,
            "type":"java.io.Float",
            "fileChoice":false
        },
        {
            "description":"Threshold for copy number deletions. Regions with a log2 ratio below the negative of this value are considered deletions.",
            "choices":[],
            "kinds":[],
            "name":"deletions.threshold",
            "numValues":"0-1",
            "defaultValue":"0.1",
            "required":true,
            "type":"java.io.Float",
            "fileChoice":false
        },
        {
            "description":"Smallest number of markers to allow in segments from the segmented data. Segments that contain a number of markers less than or equal to this number are joined to the neighboring segment that is closest in copy number.",
            "choices":[],
            "kinds":[],
            "name":"join.segment.size",
            "numValues":"0-1",
            "defaultValue":"4",
            "required":true,
            "type":"java.io.Integer",
            "fileChoice":false
        },
        {
            "description":"Threshholding value for q-values.",
            "choices":[],
            "kinds":[],
            "name":"qv.thresh",
            "numValues":"0-1",
            "defaultValue":"0.25",
            "required":true,
            "type":"java.io.Float",
            "fileChoice":false
        },
        {
            "description":"Flag indicating whether to remove data from the X-chromosome before analysis.",
            "choices":["1=yes", "0=no"],
            "kinds":[],
            "name":"remove.X",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Confidence level used to calculate the region containing a driver.",
            "choices":[],
            "kinds":[],
            "name":"confidence.level",
            "numValues":"0-1",
            "defaultValue":"0.75",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Flag indicating whether an additional broad-level analysis should be performed.",
            "choices":["1=yes", "0=no"],
            "kinds":[],
            "name":"run.broad.analysis",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Threshold used to distinguish broad form focal events, given in units of fraction of chromosome arm.",
            "choices":[],
            "kinds":[],
            "name":"broad.length.cutoff",
            "numValues":"0-1",
            "defaultValue":"0.98",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Maximum number of segments allowed for a sample in the input data. Samples with more segments than this threshold are excluded from the analysis.",
            "choices":[],
            "kinds":[],
            "name":"max.sample.segs",
            "numValues":"0-1",
            "defaultValue":"2500",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to perform arm level peel off. This helps separate peaks which cleans up noise.",
            "choices":["1=yes", "0=no"],
            "kinds":[],
            "name":"arm.peel",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The prefix for the output file name",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<seg.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"GISTIC_2.0",
    "write":false,
    "tags":["png", "v2.pdf", "gistic.txt", "seg.txt"],
    "type":"module",
    "version":"6",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00125:6"
}, "8":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"data file - .gct, .res, .odf",
            "choices":[],
            "kinds":["gct", "res", "Dataset"],
            "name":"data.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"reference gene accession from data file to find neighbors for",
            "choices":[],
            "kinds":[],
            "name":"gene.accession",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"number of neighbors to find",
            "choices":[],
            "kinds":[],
            "name":"num.neighbors",
            "numValues":"0-1",
            "defaultValue":"50",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"output filename for analysis results - .odf file",
            "choices":[],
            "kinds":[],
            "name":"marker.list.file",
            "numValues":"0-1",
            "defaultValue":"<data.filename_basename>.markerlist",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"output filename raw data for selected markers - .gct file",
            "choices":[],
            "kinds":[],
            "name":"marker.dataset.file",
            "numValues":"0-1",
            "defaultValue":"<data.filename_basename>.markerdata",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"continuous metric for finding neighbors",
            "choices":["0=Cosine distance", "1=Euclidean distance", "2=Manhattan distance", "3=Pearson distance"],
            "kinds":[],
            "name":"distance.metric",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"if no, values below will be ignored",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"filter.data",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"minimum threshold for data",
            "choices":[],
            "kinds":[],
            "name":"min.threshold",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"maximum threshold for data",
            "choices":[],
            "kinds":[],
            "name":"max.threshold",
            "numValues":"0-1",
            "defaultValue":"16000",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"minimum fold difference for filtering genes",
            "choices":[],
            "kinds":[],
            "name":"min.fold.diff",
            "numValues":"0-1",
            "defaultValue":"5",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"minimum absolute difference for filtering genes",
            "choices":[],
            "kinds":[],
            "name":"min.abs.diff",
            "numValues":"0-1",
            "defaultValue":"50",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"GeneNeighbors",
    "write":false,
    "tags":["Gene List", "gct"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00007:2"
}, "211":{
    "category":"Data Format Conversion",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file in TMAP format",
            "choices":[],
            "kinds":["tmap"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Select row labels to be written to GCT file",
            "choices":["ref_gene_id=Reference gene name", "ref_id=Reference transcript ID", "cuff_gene_id=Cufflinks gene ID", "cuff_id=Cufflinks transcript ID", "major_iso_id=Major isoform ID"],
            "kinds":[],
            "name":"row.labels",
            "numValues":"0-1",
            "defaultValue":"ref_gene_id",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Select row descriptions to be written to GCT file",
            "choices":["ref_gene_id=Reference gene name", "ref_id=Reference transcript ID", "cuff_gene_id=Cufflinks gene ID", "cuff_id=Cufflinks transcript ID", "major_iso_id=Major isoform ID"],
            "kinds":[],
            "name":"row.descriptions",
            "numValues":"0-1",
            "defaultValue":"ref_gene_id",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Filter rows with invalid row names (ie., \"-\") ",
            "choices":["no=no", "yes=yes"],
            "kinds":[],
            "name":"filter.rows",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A label that will be used to name the GCT output file",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"TmapToGct",
    "write":false,
    "tags":["gct"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00249:1"
}, "212":{
    "category":"Data Format Conversion",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input fastq file (optionally gzipped) for single end data, or first read in paired end data",
            "choices":[],
            "kinds":["fastq"],
            "name":"fastq.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The fastq file (optionally gzipped) for second read in paired end data",
            "choices":[],
            "kinds":["fastq"],
            "name":"fastq.file.2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A value describing how the quality values are encoded in the fastq",
            "choices":["Solexa", "Illumina", "Standard"],
            "kinds":[],
            "name":"quality.format",
            "numValues":"0-1",
            "defaultValue":"Standard",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Read group name",
            "choices":[],
            "kinds":[],
            "name":"read.group.name",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Sample name to insert into the read group header",
            "choices":[],
            "kinds":[],
            "name":"sample.name",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The library name to insert into the LB attribute in the read group header",
            "choices":[],
            "kinds":[],
            "name":"library.name",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The platform unit (often run_barcode.lane) to insert into the read group header",
            "choices":[],
            "kinds":[],
            "name":"platform.unit",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The platform type (e.g., Illumina, SOLiD) to insert into the read group header",
            "choices":[],
            "kinds":[],
            "name":"platform",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"",
            "choices":["unsorted", "queryname", "coordinate"],
            "kinds":[],
            "name":"sort.order",
            "numValues":"0-1",
            "defaultValue":"coordinate",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether the file output format should be SAM or BAM",
            "choices":["sam=SAM", "bam=BAM"],
            "kinds":[],
            "name":"output.format",
            "numValues":"0-1",
            "defaultValue":"bam",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The prefix to use for the output file name",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<fastq.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FastqToSam",
    "write":false,
    "tags":["bam", "sam"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00241:1"
}, "210":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file in SAM or BAM format",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Sort order",
            "choices":["coordinate=coordinate", "queryname=queryname", "unsorted=unsorted"],
            "kinds":[],
            "name":"sort.order",
            "numValues":"0-1",
            "defaultValue":"coordinate",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether the file output format should be SAM or BAM",
            "choices":["sam=SAM", "bam=BAM"],
            "kinds":[],
            "name":"output.format",
            "numValues":"0-1",
            "defaultValue":"sam",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"prefix for the name of output file",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"SortSam",
    "write":false,
    "tags":["sam", "bam", "bai"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00245:3"
}, "215":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A dataset - .gct, .res",
            "choices":[],
            "kinds":["gct", "res"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"ClsFileCreator",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00261:1"
}, "318":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"An FCS data file to which you want to add indexes.",
            "choices":[],
            "kinds":["fcs"],
            "name":"Input.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The index number for the first event in the data set; the default is 1. The index will be incremented by 1 for each of the events in the data set. ",
            "choices":[],
            "kinds":[],
            "name":"Start.index",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The short name ($PnN keyword) of the parameter to get the index; the default is \"Index.\" ",
            "choices":[],
            "kinds":[],
            "name":"Index.parameter.short.name",
            "numValues":"0-1",
            "defaultValue":"Index",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The long name ($PnS keyword) of the parameter to get the index; the default is blank.",
            "choices":[],
            "kinds":[],
            "name":"Index.parameter.long.name",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The output file name.",
            "choices":[],
            "kinds":[],
            "name":"Output.fcs.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.data.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"AddFCSEventIndex",
    "write":false,
    "tags":["fcs"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00176:2"
}, "216":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Zip of Illumina IDAT files",
            "choices":[],
            "kinds":[],
            "name":"idat.zip",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Illumina manifest file in tab-delimited (TXT) format. A manifest file is required; either selected from this list or specified in custom manifest below.",
            "choices":["=Select a manifest file", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/HumanHT-12_V3_0_R2_11283641_A.txt=HumanHT-12_V3_0_R2_11283641_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/HumanHT-12_V4_0_R2_15002873_B.txt=HumanHT-12_V4_0_R2_15002873_B.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/HumanHT-12_V3_0_R3_11283641_A.txt=HumanHT-12_V3_0_R3_11283641_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/HumanHT-12_V4_0_R1_15002873_B.txt=HumanHT-12_V4_0_R1_15002873_B.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/HumanMI_V1_R2_XS0000122-MAP.txt=HumanMI_V1_R2_XS0000122-MAP.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/HumanMI_V2_R0_XS0000124-MAP.txt=HumanMI_V2_R0_XS0000124-MAP.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/HumanRef-8_V2_0_R4_11223162_A.txt=HumanRef-8_V2_0_R4_11223162_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/HumanRef-8_V3_0_R1_11282963_A_WGDASL.txt=HumanRef-8_V3_0_R1_11282963_A_WGDASL.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/HumanRef-8_V3_0_R2_11282963_A.txt=HumanRef-8_V3_0_R2_11282963_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/HumanRef-8_V3_0_R3_11282963_A.txt=HumanRef-8_V3_0_R3_11282963_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/HumanWG-6_V2_0_R4_11223189_A.txt=HumanWG-6_V2_0_R4_11223189_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/HumanWG-6_V3_0_R2_11282955_A.txt=HumanWG-6_V3_0_R2_11282955_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/HumanWG-6_V3_0_R3_11282955_A.txt=HumanWG-6_V3_0_R3_11282955_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/MouseMI_V1_R2_XS0000127-MAP.txt=MouseMI_V1_R2_XS0000127-MAP.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/MouseMI_V2_R0_XS0000129-MAP.txt=MouseMI_V2_R0_XS0000129-MAP.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/MouseRef-8_V1_1_R4_11234312_A.txt=MouseRef-8_V1_1_R4_11234312_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/MouseRef-8_V2_0_R2_11278551_A.txt=MouseRef-8_V2_0_R2_11278551_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/MouseRef-8_V2_0_R3_11278551_A.txt=MouseRef-8_V2_0_R3_11278551_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/MouseWG-6_V1_1_R4_11234304_A.txt=MouseWG-6_V1_1_R4_11234304_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/MouseWG-6_V2_0_R2_11278593_A.txt=MouseWG-6_V2_0_R2_11278593_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/MouseWG-6_V2_0_R3_11278593_A.txt=MouseWG-6_V2_0_R3_11278593_A.txt", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/manifests/RatRef-12_V1_0_R5_11222119_A.txt=RatRef-12_V1_0_R5_11222119_A.txt"],
            "kinds":[],
            "name":"manifest",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Other Illumina manifest file in tab-delimited (TXT) format. A manifest file is required; either selected from the list above or specified here.",
            "choices":[],
            "kinds":[],
            "name":"custom.manifest",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<idat.zip_basename>.gct",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Perform background subtraction.",
            "choices":["false", "true"],
            "kinds":[],
            "name":"background.subtraction.mode",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Collapse probes to genes based on the manifest or CHIP file (if provided).",
            "choices":["none", "max", "median"],
            "kinds":[],
            "name":"collapse.mode",
            "numValues":"0-1",
            "defaultValue":"none",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"CHIP file to map probes to genes.",
            "choices":["=Select a chip file", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/chip/ilmn_HumanHT_12_V3_0_R3_11283641_A.chip=ilmn_HumanHT_12_V3_0_R3_11283641_A.chip", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/chip/ilmn_HumanHT_12_V4_0_R1_15002873_B.chip=ilmn_HumanHT_12_V4_0_R1_15002873_B.chip", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/chip/ilmn_HumanRef_8_V2_0_R4_11223162_A.chip=ilmn_HumanRef_8_V2_0_R4_11223162_A.chip", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/chip/ilmn_HumanReF_8_V3_0_R1_11282963_A_WGDASL.chip=ilmn_HumanReF_8_V3_0_R1_11282963_A_WGDASL.chip", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/chip/ilmn_HumanRef_8_V3_0_R3_11282963_A.chip=ilmn_HumanRef_8_V3_0_R3_11282963_A.chip", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/chip/ilmn_HumanWG_6_V2_0_R4_11223189_A.chip=ilmn_HumanWG_6_V2_0_R4_11223189_A.chip", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/chip/ilmn_HumanWG_6_V3_0_R3_11282955_A.chip=ilmn_HumanWG_6_V3_0_R3_11282955_A.chip", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/chip/ilmn_MouseRef_8_V1_1_R4_11234312_A.chip=ilmn_MouseRef_8_V1_1_R4_11234312_A.chip", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/chip/ilmn_MouseRef_8_V2_0_R3_11278551_A.chip=ilmn_MouseRef_8_V2_0_R3_11278551_A.chip", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/chip/ilmn_MouseWG_6_V1_1_R4_11234304_A.chip=ilmn_MouseWG_6_V1_1_R4_11234304_A.chip", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/chip/ilmn_MouseWG_6_V2_0_R3_11278593_A.chip=ilmn_MouseWG_6_V2_0_R3_11278593_A.chip", "ftp://ftp.broadinstitute.org/pub/genepattern/modules/IlluminaExpressionFileCreator/chip/ilmn_RatRef_12_V1_0_R5_11222119_A.chip=ilmn_RatRef_12_V1_0_R5_11222119_A.chip"],
            "kinds":[],
            "name":"chip",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Other CHIP file to map probes to genes.",
            "choices":[],
            "kinds":[],
            "name":"custom.chip",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"CLM file to map file names to sample names.",
            "choices":[],
            "kinds":[],
            "name":"clm",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"IlluminaExpressionFileCreator",
    "write":false,
    "tags":["gct"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00189:2"
}, "319":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A FCS data file to add parameters to.",
            "choices":[],
            "kinds":["fcs"],
            "name":"Input.fcs.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A CSV file with parameters and values to add.",
            "choices":[],
            "kinds":["csv"],
            "name":"Input.csv.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The output FCS file name.",
            "choices":[],
            "kinds":[],
            "name":"Output.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.fcs.data.file_basename>_with_extra_params.fcs",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"AddFCSParameter",
    "write":false,
    "tags":["FCS", "fcs"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00198:2"
}, "213":{
    "category":"Data Format Conversion",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The SAM or BAM file",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to output a fastq file per read group",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"per.read.group",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to re-reverse bases and qualities of reads with negative strand flag set",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"re-reverse.bases",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to include non-PF reads",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"include.non.pf.reads",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Attribute that stores the position at which the SAM record should be clipped",
            "choices":[],
            "kinds":[],
            "name":"clipping.attribute",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Action to take with clipped reads when a clipping attribute is specified",
            "choices":["none=", "X=trim reads and qualities", "N=change bases to Ns", "change=change base quality values"],
            "kinds":[],
            "name":"clipping.action",
            "numValues":"0-1",
            "defaultValue":"none",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Value to set base qualities to when clipping action is \"change base quality values\"",
            "choices":[],
            "kinds":[],
            "name":"clipping.action.quality.value",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The fastq output file name for single-end fastq or first end of a paired fastq. Only specify when \"per read group\" is \"no\".",
            "choices":[],
            "kinds":[],
            "name":"fastq.output.prefix.1",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The second end of a paired fastq. Only specify when \"per read group\" is \"no\".",
            "choices":[],
            "kinds":[],
            "name":"fastq.output.prefix.2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"SamToFastq",
    "write":false,
    "tags":["fastq"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00240:1"
}, "316":{
    "category":"Uncategorized",
    "description":"description goes here",
     "inputs":[
        {
            "description":"",
            "choices":[],
            "kinds":[],
            "name":"param",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"TestExport",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:9090.gpdev.gpint01:genepatternmodules:450:1"
}, "214":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset file - .res, .gct",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"expression.dataset",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Gene sets database from GSEA website.",
            "choices":["c1.all.v3.0.symbols.gmt=c1.all.v3.0.symbols.gmt [Positional]", "c1.all.v3.0.entrez.gmt=c1.all.v3.0.entrez.gmt [Positional]", "c2.all.v3.0.symbols.gmt=c2.all.v3.0.symbols.gmt [Curated]", "c2.all.v3.0.entrez.gmt=c2.all.v3.0.entrez.gmt [Curated]", "c2.cgp.v3.0.symbols.gmt=c2.cgp.v3.0.symbols.gmt [Curated]", "c2.cgp.v3.0.entrez.gmt=c2.cgp.v3.0.entrez.gmt [Curated]", "c2.cp.v3.0.symbols.gmt=c2.cp.v3.0.symbols.gmt [Curated]", "c2.cp.v3.0.entrez.gmt=c2.cp.v3.0.entrez.gmt [Curated]", "c2.cp.biocarta.v3.0.symbols.gmt=c2.cp.biocarta.v3.0.symbols.gmt [Curated]", "c2.cp.biocarta.v3.0.entrez.gmt=c2.cp.biocarta.v3.0.entrez.gmt [Curated]", "c2.cp.kegg.v3.0.symbols.gmt=c2.cp.kegg.v3.0.symbols.gmt [Curated]", "c2.cp.kegg.v3.0.entrez.gmt=c2.cp.kegg.v3.0.entrez.gmt [Curated]", "c2.cp.reactome.v3.0.symbols.gmt=c2.cp.reactome.v3.0.symbols.gmt [Curated]", "c2.cp.reactome.v3.0.entrez.gmt=c2.cp.reactome.v3.0.entrez.gmt [Curated]", "c3.all.v3.0.symbols.gmt=c3.all.v3.0.symbols.gmt [Motif]", "c3.all.v3.0.entrez.gmt=c3.all.v3.0.entrez.gmt [Motif]", "c3.mir.v3.0.symbols.gmt=c3.mir.v3.0.symbols.gmt [Motif]", "c3.mir.v3.0.entrez.gmt=c3.mir.v3.0.entrez.gmt [Motif]", "c3.tft.v3.0.symbols.gmt=c3.tft.v3.0.symbols.gmt [Motif]", "c3.tft.v3.0.entrez.gmt=c3.tft.v3.0.entrez.gmt [Motif]", "c4.all.v3.0.symbols.gmt=c4.all.v3.0.symbols.gmt [Computational]", "c4.all.v3.0.entrez.gmt=c4.all.v3.0.entrez.gmt [Computational]", "c4.cgn.v3.0.symbols.gmt=c4.cgn.v3.0.symbols.gmt [Computational]", "c4.cgn.v3.0.entrez.gmt=c4.cgn.v3.0.entrez.gmt [Computational]", "c4.cm.v3.0.symbols.gmt=c4.cm.v3.0.symbols.gmt [Computational]", "c4.cm.v3.0.entrez.gmt=c4.cm.v3.0.entrez.gmt [Computational]", "c5.all.v3.0.symbols.gmt=c5.all.v3.0.symbols.gmt [Gene Ontology]", "c5.all.v3.0.entrez.gmt=c5.all.v3.0.entrez.gmt [Gene Ontology]", "c5.bp.v3.0.symbols.gmt=c5.bp.v3.0.symbols.gmt [Gene Ontology]", "c5.bp.v3.0.entrez.gmt=c5.bp.v3.0.entrez.gmt [Gene Ontology]", "c5.cc.v3.0.symbols.gmt=c5.cc.v3.0.symbols.gmt [Gene Ontology]", "c5.cc.v3.0.entrez.gmt=c5.cc.v3.0.entrez.gmt [Gene Ontology]", "c5.mf.v3.0.symbols.gmt=c5.mf.v3.0.symbols.gmt [Gene Ontology]", "c5.mf.v3.0.entrez.gmt=c5.mf.v3.0.entrez.gmt [Gene Ontology]"],
            "kinds":[],
            "name":"gene.sets.database",
            "numValues":"0-1",
            "defaultValue":"c1.all.v3.0.symbols.gmt",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets database - .gmt, .gmx, .grp. Upload a gene set if your gene set is not listed as a choice for the gene sets database parameter.",
            "choices":[],
            "kinds":["gmt", "gmx", "grp"],
            "name":"gene.sets.database.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Number of permutations to perform",
            "choices":[],
            "kinds":[],
            "name":"number.of.permutations",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Cls file - .cls, must be binary",
            "choices":[],
            "kinds":["cls"],
            "name":"phenotype.labels",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Select true to have GSEA collapse each probe set in the expression dataset into a single vector for the gene, which gets identified by its gene symbol.",
            "choices":["false", "true"],
            "kinds":[],
            "name":"collapse.dataset",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Type of permutations to perform",
            "choices":["phenotype", "gene_set"],
            "kinds":[],
            "name":"permutation.type",
            "numValues":"0-1",
            "defaultValue":"phenotype",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Chip file from GSEA website.",
            "choices":["ftp.broadinstitute.org://pub/gsea/annotations/GENE_SYMBOL.chip=GENE_SYMBOL.chip", "ftp.broadinstitute.org://pub/gsea/annotations/SEQ_ACCESSION.chip=SEQ_ACCESSION.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubA.chip=Hu35KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubB.chip=Hu35KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubC.chip=Hu35KsubC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubD.chip=Hu35KsubD.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu6800.chip=Hu6800.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_Focus.chip=HG_Focus.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133A.chip=HG_U133A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133AAOFAV2.chip=HG_U133AAOFAV2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133A_2.chip=HG_U133A_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133B.chip=HG_U133B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133_Plus_2.chip=HG_U133_Plus_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95Av2.chip=HG_U95Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95B.chip=HG_U95B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95C.chip=HG_U95C.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95D.chip=HG_U95D.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95E.chip=HG_U95E.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AFFYMETRIX.chip=AFFYMETRIX.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AG.chip=AG.chip", "ftp.broadinstitute.org://pub/gsea/annotations/APPLERA_ABI1700.chip=APPLERA_ABI1700.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ATH1_121501.chip=ATH1_121501.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1A.chip=Agilent_Human1A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1Av2.chip=Agilent_Human1Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1B.chip=Agilent_Human1B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1_cDNA.chip=Agilent_Human1_cDNA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_HumanGenome.chip=Agilent_HumanGenome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseDev.chip=Agilent_MouseDev.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseGenome.chip=Agilent_MouseGenome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseOligo.chip=Agilent_MouseOligo.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Mouse_cDNA.chip=Agilent_Mouse_cDNA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_RatGenome_G4131A.chip=Agilent_RatGenome_G4131A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_RatOligo.chip=Agilent_RatOligo.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AtlasMouse1.2.chip=AtlasMouse1.2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AtlasRat1.2.chip=AtlasRat1.2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/BIAO.chip=BIAO.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Bovine.chip=Bovine.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CNMCMuscleChip.chip=CNMCMuscleChip.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Caltech16KMouse.chip=Caltech16KMouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Caltech16KOligoMouse.chip=Caltech16KOligoMouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Canine_2.chip=Canine_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Clontech_Atlas_13K.chip=Clontech_Atlas_13K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Clontech_BD_Atlas.chip=Clontech_BD_Atlas.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_Human_Whole_Genome.chip=CodeLink_Human_Whole_Genome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_20K_I_Bioarray.chip=CodeLink_UniSet_Human_20K_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_II_Bioarray.chip=CodeLink_UniSet_Human_II_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_I_Bioarray.chip=CodeLink_UniSet_Human_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Rat_I_Bioarray.chip=CodeLink_UniSet_Rat_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/DrosGenome1.chip=DrosGenome1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Drosophila_2.chip=Drosophila_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/G4110A.chip=G4110A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/G4110Av2.chip=G4110Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/GenosysCytokineV2.chip=GenosysCytokineV2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HC_G110.chip=HC_G110.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HPCGGCompugenAnnotations.chip=HPCGGCompugenAnnotations.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HT_HG_U133A.chip=HT_HG_U133A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HT_HG_U133A_EA.chip=HT_HG_U133A_EA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HU6800.chip=HU6800.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illimina_Mus6_v1_1.chip=Illimina_Mus6_v1_1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illimuna_Mus6_v1.chip=Illimuna_Mus6_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Hum6_v1.chip=Illumina_Hum6_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Hum6_v2.chip=Illumina_Hum6_v2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_HumRef8_v1.chip=Illumina_HumRef8_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_HumRef8_v2.chip=Illumina_HumRef8_v2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Human.chip=Illumina_Human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_MusRef8_v1.chip=Illumina_MusRef8_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_MusRef8_v1_1.chip=Illumina_MusRef8_v1_1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_RatRef12_v1.chip=Illumina_RatRef12_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Av2.chip=MG_U74Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Bv2.chip=MG_U74Bv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Cv2.chip=MG_U74Cv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MOE430A.chip=MOE430A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MOE430B.chip=MOE430B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MWG_Human_30K_A.chip=MWG_Human_30K_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MWG_Human_30K_B.chip=MWG_Human_30K_B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mouse430A_2.chip=Mouse430A_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mouse430_2.chip=Mouse430_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu11KsubA.chip=Mu11KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu11KsubB.chip=Mu11KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubA.chip=Mu19KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubB.chip=Mu19KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubC.chip=Mu19KsubC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/NIA15k.chip=NIA15k.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Netherland_cancer_institute_operon_human_35k.chip=Netherland_cancer_institute_operon_human_35k.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Netherland_cancer_institute_operon_mouse_FOOk.chip=Netherland_cancer_institute_operon_mouse_FOOk.chip", "ftp.broadinstitute.org://pub/gsea/annotations/OPERON_HUMANv2.chip=OPERON_HUMANv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/OPERON_HUMANv3.chip=OPERON_HUMANv3.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RAE230A.chip=RAE230A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RAE230B.chip=RAE230B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34A.chip=RG_U34A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34B.chip=RG_U34B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34C.chip=RG_U34C.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RN_U34.chip=RN_U34.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RT_U34.chip=RT_U34.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_Ensembl1.1.chip=RZPD_Human_Ensembl1.1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_ORF_Clones_Gateway.chip=RZPD_Human_ORF_Clones_Gateway.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_Unigene3.1.chip=RZPD_Human_Unigene3.1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rat230_2.chip=Rat230_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Human.chip=RefSeq_NP_Human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Mouse.chip=RefSeq_NP_Mouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Rat.chip=RefSeq_NP_Rat.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_human.chip=RefSeq_human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Research_Genetics.chip=Research_Genetics.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rosetta.chip=Rosetta.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rosetta50K.chip=Rosetta50K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Stanford.chip=Stanford.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Stanford_Source_Accessions.chip=Stanford_Source_Accessions.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TIGR_31K_Human_Set.chip=TIGR_31K_Human_Set.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TIGR_40K_Human_Set.chip=TIGR_40K_Human_Set.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC.chip=TRC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC_DB.chip=TRC_DB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC_DB_v1.chip=TRC_DB_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/U133_X3P.chip=U133_X3P.chip", "ftp.broadinstitute.org://pub/gsea/annotations/UCLA_NIH_33K.chip=UCLA_NIH_33K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Zebrafish.chip=Zebrafish.chip", "ftp.broadinstitute.org://pub/gsea/annotations/labonweb_human.chip=labonweb_human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/lymphochip.chip=lymphochip.chip"],
            "kinds":[],
            "name":"chip.platform",
            "numValues":"0-1",
            "defaultValue":"ftp.broadinstitute.org://pub/gsea/annotations/GENE_SYMBOL.chip",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Chip to use. Upload a chip file if your chip is not listed as a choice for the chip platform parameter.",
            "choices":[],
            "kinds":[],
            "name":"chip.platform.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The statistic used to score hits (gene set members) and misses (non-members)",
            "choices":["classic", "weighted", "weighted_p2", "weighted_p1.5"],
            "kinds":[],
            "name":"scoring.scheme",
            "numValues":"0-1",
            "defaultValue":"weighted",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Class separation metric - gene markers are ranked using this metric to produce the gene list",
            "choices":["Cosine", "Euclidean", "Manhattan", "Pearson", "FeatureVariation", "tTest", "Signal2Noise", "None", "RegressionSlope", "Bhattacharyya", "Norm.Pearson", "Diff_of_Means", "Diff_of_Medians", "Ratio_of_Means", "Ratio_of_Medians", "log2_ratio_of_means", "Feature_stddev_by_mean"],
            "kinds":[],
            "name":"metric.for.ranking.genes",
            "numValues":"0-1",
            "defaultValue":"Signal2Noise",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Direction in which the gene list should be ordered",
            "choices":["ascending", "descending"],
            "kinds":[],
            "name":"gene.list.ordering.mode",
            "numValues":"0-1",
            "defaultValue":"descending",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Mode in which scores from the gene list should be considered",
            "choices":["real", "abs"],
            "kinds":[],
            "name":"gene.list.sorting.mode",
            "numValues":"0-1",
            "defaultValue":"real",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets larger than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"max.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"500",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Gene sets smaller than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"min.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"15",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Collapsing mode",
            "choices":["Max_probe", "Median_of_probes"],
            "kinds":[],
            "name":"collapsing.mode.for.probe.sets.with.more.than.one.match",
            "numValues":"0-1",
            "defaultValue":"Max_probe",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Normalization mode",
            "choices":["meandiv", "None"],
            "kinds":[],
            "name":"normalization.mode",
            "numValues":"0-1",
            "defaultValue":"meandiv",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Type of phenotype randomization (does not apply to gene set permutations)",
            "choices":["equalize_and_balance", "no_balance"],
            "kinds":[],
            "name":"randomization.mode",
            "numValues":"0-1",
            "defaultValue":"no_balance",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"If there is no known gene symbol match for a probe set, omit it from the collapsed dataset",
            "choices":["false", "true"],
            "kinds":[],
            "name":"omit.features.with.no.symbol.match",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Create detailed gene set report (heat map, mountain plot, etc.) for every enriched gene set",
            "choices":["false", "true"],
            "kinds":[],
            "name":"make.detailed.gene.set.report",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Use the median of each class instead of the mean for the class separation metrics",
            "choices":["true", "false"],
            "kinds":[],
            "name":"median.for.class.metrics",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Number of markers",
            "choices":[],
            "kinds":[],
            "name":"number.of.markers",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Plot GSEA mountain and related plots for the top sets of each phenotype",
            "choices":[],
            "kinds":[],
            "name":"plot.graphs.for.the.top.sets.of.each.phenotype",
            "numValues":"0-1",
            "defaultValue":"20",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Seed to use for randomization",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"timestamp",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to save random ranked lists",
            "choices":["false", "true"],
            "kinds":[],
            "name":"save.random.ranked.lists",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.file.name",
            "numValues":"0-1",
            "defaultValue":"<expression.dataset_basename>.zip",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"GSEA",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"12",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00072:12"
}, "317":{
    "category":"Uncategorized",
    "description":"description goes here",
     "inputs":[
        {
            "description":"",
            "choices":["1=a", "2=b", "3=c"],
            "kinds":[],
            "name":"param",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"copyOfTestExport",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:8080.genepatt.genepattern.broadinstitute.org:genepatternmodules:4320:2"
}, "179":{
    "category":"Clustering",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input dataset A - .gct, should have common gene ID with dataset B",
            "choices":[],
            "kinds":["gct"],
            "name":"datasetA.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Input dataset B - .gct, should have common gene ID with dataset A",
            "choices":[],
            "kinds":["gct"],
            "name":"datasetB.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Input class label A - .cls, 3rd line should be numeric, +1 if starts from \"0\"",
            "choices":[],
            "kinds":["cls"],
            "name":"classA.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Input class label B - .cls, 3rd line should be numeric, +1 if starts from \"0\"",
            "choices":[],
            "kinds":["cls"],
            "name":"classB.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Number of marker genes to be mapped",
            "choices":[],
            "kinds":[],
            "name":"num.marker.genes",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Number of random permutations for ES in each cell of SA matrix",
            "choices":[],
            "kinds":[],
            "name":"num.perm",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Number of random permutations for Fisher's statistics",
            "choices":[],
            "kinds":[],
            "name":"num.perm.fisher",
            "numValues":"0-1",
            "defaultValue":"1000",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Weight enrichment by correlation vector (SNR)",
            "choices":["1=yes", "0=no"],
            "kinds":[],
            "name":"weighted.score.type",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Choice of null distribution",
            "choices":["pool=pool", "each=each"],
            "kinds":[],
            "name":"null.distribution",
            "numValues":"0-1",
            "defaultValue":"pool",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"p-value correction method",
            "choices":["FDR=FDR", "Bonferroni=Bonferroni", "both=both"],
            "kinds":[],
            "name":"p.value.correction",
            "numValues":"0-1",
            "defaultValue":"Bonferroni",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Cluster dataset A's subclass in heatmap of SA matrix",
            "choices":["1=yes", "NA=no"],
            "kinds":[],
            "name":"cluster.rows",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Cluster dataset B's subclass in heatmap of SA matrix",
            "choices":["1=yes", "NA=no"],
            "kinds":[],
            "name":"cluster.columns",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Create heatmap of each nominal-p matrix",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"nominal.p.value.matrix",
            "numValues":"0-1",
            "defaultValue":"T",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Create legend for heatmap",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"create.legend",
            "numValues":"0-1",
            "defaultValue":"T",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Random seed",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"47365321",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Name of output files containing heatmap of SA matrices, summary of ES matrix, nominal p-values, and corrected p-values",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "numValues":"0-1",
            "defaultValue":"SubMap",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"SubMap",
    "write":false,
    "tags":["png", "txt"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00101:3"
}, "219":{
    "category":"Data Format Conversion",
    "description":"description goes here",
     "inputs":[
        {
            "description":"An FCS data file to be converted to CSV.",
            "choices":[],
            "kinds":["FCS", "fcs"],
            "name":"Input.FCS.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The name of the output CSV file.",
            "choices":[],
            "kinds":[],
            "name":"Output.CSV.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.FCS.data.file_basename>.csv",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to try to extract full parameter names from the FCS file.",
            "choices":["TRUE=Use full names, default", "FALSE=Use short names only"],
            "kinds":[],
            "name":"Use.full.names",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The file name to store keyword value pairs extracted from the FCS file.",
            "choices":[],
            "kinds":[],
            "name":"Output.keywords.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.FCS.data.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"How to store keywords.",
            "choices":["CSV=Store as a CSV file, default", "FCS=Store keywords in the FCS TEXT segment format", "None=Do not extract the keyword/value pairs"],
            "kinds":[],
            "name":"Output.keywords.mode",
            "numValues":"0-1",
            "defaultValue":"CSV",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to convert log channel values to linear scale.",
            "choices":["TRUE=Convert channel to scale, default", "NO=No conversion, store as in the FCS file"],
            "kinds":[],
            "name":"Channel.to.scale.conversion",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to use regular (32bit, recommended) or double precision.",
            "choices":["FALSE=Use regular precision, default", "TRUE=Use double precision"],
            "kinds":[],
            "name":"Precision",
            "numValues":"0-1",
            "defaultValue":"FALSE",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"FcsToCsv",
    "write":false,
    "tags":["csv", "keywords.csv", "keywords.txt"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00175:2"
}, "314":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"data file - .gct, .res, .odf",
            "choices":[],
            "kinds":["gct", "res", "Dataset"],
            "name":"data.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"reference gene accession from data file to find neighbors for",
            "choices":[],
            "kinds":[],
            "name":"gene.accession",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"number of neighbors to find",
            "choices":[],
            "kinds":[],
            "name":"num.neighbors",
            "numValues":"0-1",
            "defaultValue":"50",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"output filename for analysis results - .odf file",
            "choices":[],
            "kinds":[],
            "name":"marker.list.file",
            "numValues":"0-1",
            "defaultValue":"<data.filename_basename>.markerlist",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"output filename raw data for selected markers - .gct file",
            "choices":[],
            "kinds":[],
            "name":"marker.dataset.file",
            "numValues":"0-1",
            "defaultValue":"<data.filename_basename>.markerdata",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"continuous metric for finding neighbors",
            "choices":["0=Cosine distance", "1=Euclidean distance", "2=Manhattan distance", "3=Pearson distance"],
            "kinds":[],
            "name":"distance.metric",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"if no, values below will be ignored",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"filter.data",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"minimum threshold for data",
            "choices":[],
            "kinds":[],
            "name":"min.threshold",
            "numValues":"0-1",
            "defaultValue":"20",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"maximum threshold for data",
            "choices":[],
            "kinds":[],
            "name":"max.threshold",
            "numValues":"0-1",
            "defaultValue":"20000",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"minimum fold difference for filtering genes",
            "choices":[],
            "kinds":[],
            "name":"min.fold.diff",
            "numValues":"0-1",
            "defaultValue":"5",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"minimum absolute difference for filtering genes",
            "choices":[],
            "kinds":[],
            "name":"min.abs.diff",
            "numValues":"0-1",
            "defaultValue":"50",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"GeneNeighbors",
    "write":false,
    "tags":["Gene List", "gct"],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00007:4"
}, "178":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The dataset to display - .gct, .res, odf type=Dataset",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"dataset",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"HeatMapViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"10",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00010:10"
}, "315":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The reference file including cytoband and gene location information.",
            "choices":["hg19_with_miR_20120227.mat=Human Hg19", "hg18_with_miR_20080407.mat=Human Hg18", "hg17.mat=Human Hg17", "hg16.mat=Human Hg16"],
            "kinds":[],
            "name":"refgene.file",
            "numValues":"0-1",
            "defaultValue":"hg19_with_miR_20120227.mat",
            "required":true,
            "type":"java.io.String",
            "fileChoice":true
        },
        {
            "description":"The segmentation file contains the segmented data for all the samples identified by GLAD, CBS, or some other segmentation algorithm. (See GLAD file format in the Genepattern file formats documentation.) It is a six column, tab-delimited file with an optional first line identifying the columns. Positions are in base pair units.",
            "choices":[],
            "kinds":["seg", "txt", "glad"],
            "name":"seg.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The markers file identifies the marker names and positions of the markers in the original dataset (before segmentation). It is a three column, tab-delimited file with an optional header. If not already, markers are sorted by genomic position.",
            "choices":[],
            "kinds":["cn", "txt"],
            "name":"markers.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The array list file is an optional file identifying the subset of samples to be used in the analysis. It is a one column file with an optional header. The sample identifiers listed in the array list file must match the sample names given in the segmentation file.",
            "choices":[],
            "kinds":["alf", "txt"],
            "name":"array.list.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"There are two options for the cnv file. The first option allows CNVs to be identified by marker name. The second option allows the CNVs to be identified by genomic location.",
            "choices":[],
            "kinds":["CNV"],
            "name":"cnv.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Threshold for copy number amplifications. Regions with a log2 ratio above this value are considered amplified.",
            "choices":["1=yes", "0=no"],
            "kinds":[],
            "name":"gene.gistic",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.io.Float",
            "fileChoice":true
        },
        {
            "description":"Threshold for copy number amplifications. Regions with a log2 ratio above this value are considered amplified.",
            "choices":[],
            "kinds":[],
            "name":"amplifications.threshold",
            "numValues":"0-1",
            "defaultValue":"0.1",
            "required":true,
            "type":"java.io.Float",
            "fileChoice":false
        },
        {
            "description":"Threshold for copy number deletions. Regions with a log2 ratio below the negative of this value are considered deletions.",
            "choices":[],
            "kinds":[],
            "name":"deletions.threshold",
            "numValues":"0-1",
            "defaultValue":"0.1",
            "required":true,
            "type":"java.io.Float",
            "fileChoice":false
        },
        {
            "description":"Smallest number of markers to allow in segments from the segmented data. Segments that contain a number of markers less than or equal to this number are joined to the neighboring segment that is closest in copy number.",
            "choices":[],
            "kinds":[],
            "name":"join.segment.size",
            "numValues":"0-1",
            "defaultValue":"4",
            "required":true,
            "type":"java.io.Integer",
            "fileChoice":false
        },
        {
            "description":"Threshholding value for q-values.",
            "choices":[],
            "kinds":[],
            "name":"qv.thresh",
            "numValues":"0-1",
            "defaultValue":"0.25",
            "required":true,
            "type":"java.io.Float",
            "fileChoice":false
        },
        {
            "description":"Flag indicating whether to remove data from the X-chromosome before analysis.",
            "choices":["1=yes", "0=no"],
            "kinds":[],
            "name":"remove.X",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Confidence level used to calculate the region containing a driver.",
            "choices":[],
            "kinds":[],
            "name":"confidence.level",
            "numValues":"0-1",
            "defaultValue":"0.75",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Flag indicating whether an additional broad-level analysis should be performed.",
            "choices":["1=yes", "0=no"],
            "kinds":[],
            "name":"run.broad.analysis",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Threshold used to distinguish broad form focal events, given in units of fraction of chromosome arm.",
            "choices":[],
            "kinds":[],
            "name":"broad.length.cutoff",
            "numValues":"0-1",
            "defaultValue":"0.98",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Maximum number of segments allowed for a sample in the input data. Samples with more segments than this threshold are excluded from the analysis.",
            "choices":[],
            "kinds":[],
            "name":"max.sample.segs",
            "numValues":"0-1",
            "defaultValue":"2500",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to perform arm level peel off. This helps separate peaks which cleans up noise.",
            "choices":["1=yes", "0=no"],
            "kinds":[],
            "name":"arm.peel",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The prefix for the output file name",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<seg.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"GISTIC_2.0",
    "write":false,
    "tags":["png", "v2.pdf", "gistic.txt", "seg.txt"],
    "type":"module",
    "version":"5",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00125:5"
}, "177":{
    "category":"Clustering",
    "description":"description goes here",
     "inputs":[
        {
            "description":"File containing data to cluster - .res, .gct, .odf",
            "choices":[],
            "kinds":["gct", "res", "odf"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The base output file name - .gct",
            "choices":[],
            "kinds":[],
            "name":"output.base.name",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>_KMcluster_output",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Number of centroids (clusters)",
            "choices":[],
            "kinds":[],
            "name":"number.of.clusters",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Seed value for random number generator",
            "choices":[],
            "kinds":[],
            "name":"seed.value",
            "numValues":"0-1",
            "defaultValue":"12345",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Whether to cluster by rows or columns",
            "choices":["0=rows", "1=columns"],
            "kinds":[],
            "name":"cluster.by",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"How to compute distance between points",
            "choices":["0=Euclidean", "1="],
            "kinds":[],
            "name":"distance.metric",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"KMeansClustering",
    "write":false,
    "tags":["gct"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00081:2"
}, "217":{
    "category":"Data Format Conversion",
    "description":"description goes here",
     "inputs":[
        {
            "description":"An FCS data file to be converted to CSV.",
            "choices":[],
            "kinds":["FCS", "fcs"],
            "name":"Input.FCS.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The name of the output CSV file.",
            "choices":[],
            "kinds":[],
            "name":"Output.CSV.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.FCS.data.file_basename>.csv",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to try to extract full parameter names from the FCS file.",
            "choices":["TRUE=Use full names, default", "FALSE=Use short names only"],
            "kinds":[],
            "name":"Use.full.names",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The file name to store keyword value pairs extracted from the FCS file.",
            "choices":[],
            "kinds":[],
            "name":"Output.keywords.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.FCS.data.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"How to store keywords.",
            "choices":["CSV=Store as a CSV file, default", "FCS=Store keywords in the FCS TEXT segment format", "None=Do not extract the keyword/value pairs"],
            "kinds":[],
            "name":"Output.keywords.mode",
            "numValues":"0-1",
            "defaultValue":"CSV",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to convert log channel values to linear scale.",
            "choices":["TRUE=Convert channel to scale, default", "NO=No conversion, store as in the FCS file"],
            "kinds":[],
            "name":"Channel.to.scale.conversion",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to use regular (32bit, recommended) or double precision.",
            "choices":["FALSE=Use regular precision, default", "TRUE=Use double precision"],
            "kinds":[],
            "name":"Precision",
            "numValues":"0-1",
            "defaultValue":"FALSE",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"FcsToCsv",
    "write":false,
    "tags":["csv", "keywords.csv", "keywords.txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00175:1"
}, "312":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A dataset - .gct, .res",
            "choices":[],
            "kinds":["gct", "res"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"ClsFileCreator",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00261:2"
}, "176":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A dataset file - .gct, .res",
            "choices":[],
            "kinds":["gct", "res"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A class file - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"reference label for samples in the data matrix file",
            "choices":[],
            "kinds":[],
            "name":"sample.reference.label",
            "numValues":"0-1",
            "defaultValue":"Hybridization REF",
            "required":true,
            "fileChoice":false
        },
        {
            "description":"reference label for features in the data matrix file",
            "choices":[],
            "kinds":[],
            "name":"feature.reference.label",
            "numValues":"0-1",
            "defaultValue":"CompositeElement REF",
            "required":true,
            "fileChoice":false
        },
        {
            "description":"label that specifies the type of intensity values in data matrix file ",
            "choices":[],
            "kinds":[],
            "name":"intensity.type.label",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "fileChoice":false
        },
        {
            "description":"prefix to use for output file name",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "fileChoice":false
        }
    ],
    "name":"ConvertToMAGETAB",
    "write":false,
    "tags":["txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00188:1"
}, "218":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset to view with the ComparativeMarkerSelectionViewer",
            "choices":["all_aml=all_aml", " GCM=GCM", " shipp_lymphoma=shipp_lymphoma"],
            "kinds":["Comparative Marker Selection"],
            "name":"dataset",
            "numValues":"0-1",
            "defaultValue":"all_aml",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"MIT_701X_seeMicroArrayData",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"3",
    "lsid":"urn:lsid:8080.jtriley.STARAPP-DEV.MIT.EDU:genepatternmodules:19:3"
}, "313":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A prebuilt bowtie index. Either a prebuilt or a custom Bowtie index must be specified.",
            "choices":["none=", "a_thaliana=A. Thaliana, TAIR8", "b_taurus=B. Taurus, UMD Freeze 3.0", "e_coli=E. Coli", "c_elegans_ws200=C. Elegans, WormBase WS200", "hg19=H. sapiens, UCSC hg19", "hg18=H. sapiens, UCSC hg18", "mm9=M. musculus, UCSC mm9", "mm8=M. musculus, UCSC mm8", "m_musculus_ncbi37=M. musculus, NCBI 37", "s_cerevisiae= S. cerevisiae"],
            "kinds":[],
            "name":"TopHat1.prebuilt.bowtie.index",
            "numValues":"0-1",
            "defaultValue":"none",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A ZIP archive containing Bowtie index files. Either a prebuilt or a custom Bowtie index must be specified.",
            "choices":[],
            "kinds":["zip"],
            "name":"TopHat1.custom.bowtie.index",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Unpaired reads file or first mate for paired reads. A file or zip of files containing reads in FASTA or FASTQ format.",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "fn.gz", "fa.gz", "fasta.gz", "fq.gz", "fastq.gz", "fn.bz2", "fa.bz2", "fasta.bz2", "fq.bz2", "fastq.bz2", "zip", "gz", "bz2"],
            "name":"TopHat1.reads.pair.1",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Second mate for paired reads. A file or zip of files in FASTA or FASTQ format.",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "fn.gz", "fa.gz", "fasta.gz", "fq.gz", "fastq.gz", "fn.bz2", "fa.bz2", "fasta.bz2", "fq.bz2", "fastq.bz2", "zip", "gz", "bz2"],
            "name":"TopHat1.reads.pair.2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The expected mean inner distance between mate pairs.",
            "choices":[],
            "kinds":[],
            "name":"TopHat1.mate.inner.dist",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The standard deviation for the distribution on inner distances between mate pairs.",
            "choices":[],
            "kinds":[],
            "name":"TopHat1.mate.std.dev",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Library type for strand specific reads.",
            "choices":["fr-unstranded=Standard Illumina (fr-unstranded)", "fr-firststrand=dUTP, NSR, NNSR (fr-firststrand)", "fr-secondstrand=Ligation, Standard SOLiD (fr-secondstrand)"],
            "kinds":[],
            "name":"TopHat1.library.type",
            "numValues":"0-1",
            "defaultValue":"fr-unstranded",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Quality values are space-delimited integer values, this becomes default when you specify color option.",
            "choices":["--integer-quals=yes", "=no"],
            "kinds":[],
            "name":"TopHat1.integer.quals",
            "numValues":"0-1",
            "defaultValue":"--integer-quals",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"File containing sizes of chromosomes",
            "choices":[],
            "kinds":["txt", "rtf"],
            "name":"Scripture3.chromosome.size.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Selected chromosome, e.g., chr19",
            "choices":[],
            "kinds":[],
            "name":"Scripture3.chromosome",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Chromosome sequence in FASTA format",
            "choices":[],
            "kinds":["fa", "fasta"],
            "name":"Scripture3.chromosome.sequence.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A label that will be used to name output files",
            "choices":[],
            "kinds":[],
            "name":"Scripture3.output.prefix",
            "numValues":"0-1",
            "defaultValue":"<alignment.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ScripturePipeline",
    "write":false,
    "tags":[],
    "type":"pipeline",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.pipeline:00012:3"
}, "310":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A zip file of CEL files",
            "choices":[],
            "kinds":["zip"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The method to use. Note that dchip and MAS5 will not work with ST arrays.",
            "choices":["dChip", "GCRMA", "MAS5", "RMA"],
            "kinds":[],
            "name":"method",
            "numValues":"0-1",
            "defaultValue":"RMA",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(GCRMA and RMA only) Whether to normalize data using quantile normalization",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"quantile.normalization",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(RMA only) Whether to background correct using RMA background correction",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"background.correct",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to compute Present/Absent calls",
            "choices":["yes=yes (create res file)", "no=no (create gct file)"],
            "kinds":[],
            "name":"compute.present.absent.calls",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(MAS5 only) The normalization method to apply after expression values are computed. The column having the median of the means is used as the reference unless the parameter value to scale to is given.",
            "choices":["linear fit", "mean scaling", "median scaling", "none", "quantile normalization"],
            "kinds":[],
            "name":"normalization.method",
            "numValues":"0-1",
            "defaultValue":"median scaling",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(median/mean scaling only) The value to scale to.",
            "choices":[],
            "kinds":[],
            "name":"value.to.scale.to",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A tab-delimited text file containing one scan, sample, and class per line",
            "choices":[],
            "kinds":["txt", "clm"],
            "name":"clm.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to annotate probes with the gene symbol and description",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"annotate.probes",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Custom CDF file. Leave blank to use default internally provided CDF file (custom cdf file is not implemented for GCRMA).",
            "choices":[],
            "kinds":["cdf"],
            "name":"cdf.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The base name of the output file(s)",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ExpressionFileCreator",
    "write":false,
    "tags":["res", "gct", "cls"],
    "type":"module",
    "version":"11.8",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00041:11.8"
}, "311":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input reference fasta or fasta.gz ",
            "choices":[],
            "kinds":["fasta", "fa"],
            "name":"Picard.CreateSequenceDictionary1.reference.sequence.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Unpaired reads file or first mate for paired reads. A file or zip of files containing reads in FASTA or FASTQ format (bz2 and gz compressed files are supported).",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "fn.gz", "fa.gz", "fasta.gz", "fq.gz", "fastq.gz", "fn.bz2", "fa.bz2", "fasta.bz2", "fq.bz2", "fastq.bz2", "zip", "gz", "bz2"],
            "name":"TopHat2.reads.pair.1",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Second mate for paired reads. A file or zip of files in FASTA or FASTQ format (bz2 and gz compressed files are supported).",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "fn.gz", "fa.gz", "fasta.gz", "fq.gz", "fastq.gz", "fn.bz2", "fa.bz2", "fasta.bz2", "fq.bz2", "fastq.bz2", "zip", "gz", "bz2"],
            "name":"TopHat2.reads.pair.2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Reference sequence to which to reorder reads in FASTA format.",
            "choices":[],
            "kinds":["fasta", "fa", "fna"],
            "name":"Picard.ReorderSam3.reference.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A file containing GC content for each of the transcripts. The file must be tab-delimited with 2 columns containing transcript name and GC content. The transcript name must appear in the GTF file.",
            "choices":[],
            "kinds":["txt"],
            "name":"RNASeQC7.gc.content.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"RNASeQC_CEGS",
    "write":false,
    "tags":[],
    "type":"pipeline",
    "version":"2",
    "lsid":"urn:lsid:8080.genepatt.genepattern.broadinstitute.org:genepatternmodules:5515:2"
}, "170":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A .zip file containing preprocessed flow sample files in tab-delimited .txt format.",
            "choices":[],
            "kinds":["zip"],
            "name":"preprocessed.data",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"An integer; minimal number of clusters to be fit for each sample.",
            "choices":[],
            "kinds":[],
            "name":"g.min",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"An integer; maximal number of clusters to be fit for each sample. g max should be greater or equal to g min.",
            "choices":[],
            "kinds":[],
            "name":"g.max",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Density distribution to be used for clustering",
            "choices":["normal", "t", "skewn=skew normal", "skewt=skew t"],
            "kinds":[],
            "name":"density",
            "numValues":"0-1",
            "defaultValue":"skewt",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A comma-separated list of either channel numbers (e.g., 1, 2, 3, 7) or channel names (e.g., CD4, CD45RA, ZAP70); these denote which antibodies in the (preprocessed) data sample to be used for clustering.",
            "choices":[],
            "kinds":[],
            "name":"channels.to.cluster",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Used only for skew distributions. Whether to estimate the mode for each cluster. Must be the same value used in FLAMEMixtureModel.",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"estimate.mode",
            "numValues":"0-1",
            "defaultValue":"F",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Used only for skew distributions and when estimate mode is set to yes. The smaller the increment, the more accurate the estimation, but the slower the estimation step. Must be the same value used in FLAMEMixtureModel.",
            "choices":[],
            "kinds":[],
            "name":"estimation.increment",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"An integer; the seed fixes random computational processes during computation. This does not need to be changed under most circumstances.",
            "choices":[],
            "kinds":[],
            "name":"seed",
            "numValues":"0-1",
            "defaultValue":"123456",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"A prefix for output files.",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<preprocessed.data_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEMixtureModel",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"5",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00160:5"
}, "171":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The file to transform the last column of (glad format)",
            "choices":[],
            "kinds":["glad"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Output filename",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>.LogTransformed.glad",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"LogTransformGLAD",
    "write":false,
    "tags":["glad"],
    "type":"module",
    "version":"0.3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00146:0.3"
}, "416":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A segmentation file - .seg, .txt",
            "choices":[],
            "kinds":["txt", "seg"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":true
        },
        {
            "description":"The name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>.segcount.txt",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"SegmentationCount",
    "write":false,
    "tags":["txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00297:1"
}, "415":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"SNP input file",
            "choices":[],
            "kinds":["snp"],
            "name":"snp.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Sample info file. Must contain the columns 'Array', 'Gender' and 'Birdseed_normal'. Add a 'Y' in the Birdseed_normal column for every Normal you want to be considered a normal for Birdseed.",
            "choices":[],
            "kinds":["txt"],
            "name":"sample.info.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Prefix for output file name",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<snp.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"BirdseedDataPreparation",
    "write":false,
    "tags":["snps_and_normals_only.bsnp", "normals.birdseed.gender.txt", "birdseed.gender.txt", "snps_only.bsnp", "bsnp"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00116:1"
}, "174":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The dataset - .res, .gct",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"dataset.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The s matrix - .odf",
            "choices":[],
            "kinds":["Matrix"],
            "name":"s.matrix.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The t matrix - .odf",
            "choices":[],
            "kinds":["Matrix"],
            "name":"t.matrix.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The u matrix - .odf",
            "choices":[],
            "kinds":["Matrix"],
            "name":"u.matrix.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A cls or sample info file - .cls, .txt",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.or.sample.info.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The name of the class column to use in the sample info file (required if sample info file provided)",
            "choices":[],
            "kinds":[],
            "name":"sample.info.class",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"",
            "fileChoice":false
        },
        {
            "description":"The feature set file - .gmt, .gmx, .grp",
            "choices":[],
            "kinds":["gmt", "gmx", "grp"],
            "name":"featureset.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"PCAViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"6",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00018:6"
}, "175":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A zip file of CEL files",
            "choices":[],
            "kinds":["zip"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The method to use",
            "choices":["dChip", "GCRMA", "MAS5", "RMA"],
            "kinds":[],
            "name":"method",
            "numValues":"0-1",
            "defaultValue":"RMA",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(GCRMA and RMA only) Whether to normalize data using quantile normalization",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"quantile.normalization",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(RMA only) Whether to background correct using RMA background correction",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"background.correct",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to compute Present/Absent calls",
            "choices":["yes=yes (create res file)", "no=no (create gct file)"],
            "kinds":[],
            "name":"compute.present.absent.calls",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(MAS5 only) The normalization method to apply after expression values are computed. The column having the median of the means is used as the reference unless the parameter value to scale to is given.",
            "choices":["linear fit", "mean scaling", "median scaling", "none", "quantile normalization"],
            "kinds":[],
            "name":"normalization.method",
            "numValues":"0-1",
            "defaultValue":"median scaling",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(median/mean scaling only) The value to scale to.",
            "choices":[],
            "kinds":[],
            "name":"value.to.scale.to",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A tab-delimited text file containing one scan, sample, and class per line",
            "choices":[],
            "kinds":["txt", "clm"],
            "name":"clm.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to annotate probes with the gene symbol and description",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"annotate.probes",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Custom CDF file. Leave blank to use default internally provided CDF file (custom cdf file is not implemented for GCRMA).",
            "choices":[],
            "kinds":["cdf"],
            "name":"cdf.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The base name of the output file(s)",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ExpressionFileCreator",
    "write":false,
    "tags":["res", "gct", "cls"],
    "type":"module",
    "version":"9",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00041:9"
}, "172":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A zip file containing MAGE-TAB files (sdrf, idf, adf, txt) - .zip",
            "choices":[],
            "kinds":["zip"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"MAGETABImportViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00173:1"
}, "173":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset file - .res, .gct",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"expression.dataset",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Gene sets database from GSEA website.",
            "choices":["c1.all.v2.5.symbols.gmt=c1.all.v2.5.symbols.gmt [Positional]", "c2.all.v2.5.symbols.gmt=c2.all.v2.5.symbols.gmt [Curated]", "c2.biocarta.v2.5.symbols.gmt=c2.biocarta.v2.5.symbols.gmt [Curated]", "c2.cgp.v2.5.symbols.gmt=c2.cgp.v2.5.symbols.gmt [Curated]", "c2.cp.v2.5.symbols.gmt=c2.cp.v2.5.symbols.gmt [Curated]", "c2.genmapp.v2.5.symbols.gmt=c2.genmapp.v2.5.symbols.gmt [Curated]", "c2.kegg.v2.5.symbols.gmt=c2.kegg.v2.5.symbols.gmt [Curated]", "c3.all.v2.5.symbols.gmt=c3.all.v2.5.symbols.gmt [Motif]", "c3.mir.v2.5.symbols.gmt=c3.mir.v2.5.symbols.gmt [Motif]", "c3.tft.v2.5.symbols.gmt=c3.tft.v2.5.symbols.gmt [Motif]", "c4.all.v2.5.symbols.gmt=c4.all.v2.5.symbols.gmt [Computational]", "c4.cgn.v2.5.symbols.gmt=c4.cgn.v2.5.symbols.gmt [Computational]", "c4.cm.v2.5.symbols.gmt=c4.cm.v2.5.symbols.gmt [Computational]", "c5.all.v2.5.symbols.gmt=c5.all.v2.5.symbols.gmt [Gene ontology]", "c5.cc.v2.5.symbols.gmt=c5.cc.v2.5.symbols.gmt [Gene ontology]", "ftp.broadinstitute.org://pub/gsea/gene_sets/c5.mf.v2.5.symbols.gmt=c5.mf.v2.5.symbols.gmt [Gene ontology]", "ftp.broadinstitute.org://pub/gsea/gene_sets/c1.v2.symbols.gmt=c1.v2.symbols.gmt [Positional]", "c2.v2.symbols.gmt=c2.v2.symbols.gmt [Curated]", "c3.v2.symbols.gmt=c3.v2.symbols.gmt [Motif]", "c4.v2.symbols.gmt=c4.v2.symbols.gmt [Computational]", "c4.v1.symbols.gmt=c4.v1.symbols.gmt [Computational]", "c3.v1.symbols.gmt=c3.v1.symbols.gmt [Motif]", "c2.v1.symbols.gmt=c2.v1.symbols.gmt [Curated]", "c1.v1.symbols.gmt=c1.v1.symbols.gmt [Positional]"],
            "kinds":[],
            "name":"gene.sets.database",
            "numValues":"0-1",
            "defaultValue":"c1.all.v2.5.symbols.gmt",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets database - .gmt, .gmx, .grp. Upload a gene set if your gene set is not listed as a choice for the gene sets database parameter.",
            "choices":[],
            "kinds":["gmt", "gmx", "grp"],
            "name":"gene.sets.database.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Number of permutations to perform",
            "choices":[],
            "kinds":[],
            "name":"number.of.permutations",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Cls file - .cls, must be binary",
            "choices":[],
            "kinds":["cls"],
            "name":"phenotype.labels",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Select true to have GSEA collapse each probe set in the expression dataset into a single vector for the gene, which gets identified by its gene symbol.",
            "choices":["false", "true"],
            "kinds":[],
            "name":"collapse.dataset",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Type of permutations to perform",
            "choices":["phenotype", "tag"],
            "kinds":[],
            "name":"permutation.type",
            "numValues":"0-1",
            "defaultValue":"phenotype",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Chip file from GSEA website.",
            "choices":["ftp.broadinstitute.org://pub/gsea/annotations/GENE_SYMBOL.chip=GENE_SYMBOL.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Seq_Accession.chip=Seq_Accession.chip", "ftp.broadinstitute.org://pub/gsea/annotations/SEQ_ACCESSION.chip=SEQ_ACCESSION.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubA.chip=Hu35KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubB.chip=Hu35KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubC.chip=Hu35KsubC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubD.chip=Hu35KsubD.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu6800.chip=Hu6800.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_Focus.chip=HG_Focus.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133A.chip=HG_U133A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133AAOFAV2.chip=HG_U133AAOFAV2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133A_2.chip=HG_U133A_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133B.chip=HG_U133B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133_Plus_2.chip=HG_U133_Plus_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95Av2.chip=HG_U95Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95B.chip=HG_U95B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95C.chip=HG_U95C.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95D.chip=HG_U95D.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95E.chip=HG_U95E.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AFFYMETRIX.chip=AFFYMETRIX.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AG.chip=AG.chip", "ftp.broadinstitute.org://pub/gsea/annotations/APPLERA_ABI1700.chip=APPLERA_ABI1700.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ATH1_121501.chip=ATH1_121501.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1A.chip=Agilent_Human1A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1Av2.chip=Agilent_Human1Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1B.chip=Agilent_Human1B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1_cDNA.chip=Agilent_Human1_cDNA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_HumanGenome.chip=Agilent_HumanGenome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseDev.chip=Agilent_MouseDev.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseGenome.chip=Agilent_MouseGenome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseOligo.chip=Agilent_MouseOligo.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Mouse_cDNA.chip=Agilent_Mouse_cDNA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_RatGenome_G4131A.chip=Agilent_RatGenome_G4131A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_RatOligo.chip=Agilent_RatOligo.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AtlasMouse1.2.chip=AtlasMouse1.2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AtlasRat1.2.chip=AtlasRat1.2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/BIAO.chip=BIAO.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Bovine.chip=Bovine.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CNMCMuscleChip.chip=CNMCMuscleChip.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Caltech16KMouse.chip=Caltech16KMouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Caltech16KOligoMouse.chip=Caltech16KOligoMouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Canine_2.chip=Canine_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Clontech_Atlas_13K.chip=Clontech_Atlas_13K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Clontech_BD_Atlas.chip=Clontech_BD_Atlas.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_Human_Whole_Genome.chip=CodeLink_Human_Whole_Genome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_20K_I_Bioarray.chip=CodeLink_UniSet_Human_20K_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_II_Bioarray.chip=CodeLink_UniSet_Human_II_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_I_Bioarray.chip=CodeLink_UniSet_Human_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Rat_I_Bioarray.chip=CodeLink_UniSet_Rat_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/DrosGenome1.chip=DrosGenome1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Drosophila_2.chip=Drosophila_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/G4110A.chip=G4110A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/G4110Av2.chip=G4110Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/GenosysCytokineV2.chip=GenosysCytokineV2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HC_G110.chip=HC_G110.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HPCGGCompugenAnnotations.chip=HPCGGCompugenAnnotations.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HT_HG_U133A.chip=HT_HG_U133A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HT_HG_U133A_EA.chip=HT_HG_U133A_EA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HU6800.chip=HU6800.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illimina_Mus6_v1_1.chip=Illimina_Mus6_v1_1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illimuna_Mus6_v1.chip=Illimuna_Mus6_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Hum6_v1.chip=Illumina_Hum6_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Hum6_v2.chip=Illumina_Hum6_v2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_HumRef8_v1.chip=Illumina_HumRef8_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_HumRef8_v2.chip=Illumina_HumRef8_v2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Human.chip=Illumina_Human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_MusRef8_v1.chip=Illumina_MusRef8_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_MusRef8_v1_1.chip=Illumina_MusRef8_v1_1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_RatRef12_v1.chip=Illumina_RatRef12_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Av2.chip=MG_U74Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Bv2.chip=MG_U74Bv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Cv2.chip=MG_U74Cv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MOE430A.chip=MOE430A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MOE430B.chip=MOE430B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MWG_Human_30K_A.chip=MWG_Human_30K_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MWG_Human_30K_B.chip=MWG_Human_30K_B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mouse430A_2.chip=Mouse430A_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mouse430_2.chip=Mouse430_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu11KsubA.chip=Mu11KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu11KsubB.chip=Mu11KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubA.chip=Mu19KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubB.chip=Mu19KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubC.chip=Mu19KsubC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/NIA15k.chip=NIA15k.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Netherland_cancer_institute_operon_human_35k.chip=Netherland_cancer_institute_operon_human_35k.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Netherland_cancer_institute_operon_mouse_FOOk.chip=Netherland_cancer_institute_operon_mouse_FOOk.chip", "ftp.broadinstitute.org://pub/gsea/annotations/OPERON_HUMANv2.chip=OPERON_HUMANv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/OPERON_HUMANv3.chip=OPERON_HUMANv3.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RAE230A.chip=RAE230A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RAE230B.chip=RAE230B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34A.chip=RG_U34A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34B.chip=RG_U34B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34C.chip=RG_U34C.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RN_U34.chip=RN_U34.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RT_U34.chip=RT_U34.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_Ensembl1.1.chip=RZPD_Human_Ensembl1.1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_ORF_Clones_Gateway.chip=RZPD_Human_ORF_Clones_Gateway.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_Unigene3.1.chip=RZPD_Human_Unigene3.1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rat230_2.chip=Rat230_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Human.chip=RefSeq_NP_Human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Mouse.chip=RefSeq_NP_Mouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Rat.chip=RefSeq_NP_Rat.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_human.chip=RefSeq_human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Research_Genetics.chip=Research_Genetics.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rosetta.chip=Rosetta.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rosetta50K.chip=Rosetta50K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Stanford.chip=Stanford.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Stanford_Source_Accessions.chip=Stanford_Source_Accessions.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TIGR_31K_Human_Set.chip=TIGR_31K_Human_Set.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TIGR_40K_Human_Set.chip=TIGR_40K_Human_Set.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC.chip=TRC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC_DB.chip=TRC_DB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC_DB_v1.chip=TRC_DB_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/U133_X3P.chip=U133_X3P.chip", "ftp.broadinstitute.org://pub/gsea/annotations/UCLA_NIH_33K.chip=UCLA_NIH_33K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Zebrafish.chip=Zebrafish.chip", "ftp.broadinstitute.org://pub/gsea/annotations/labonweb_human.chip=labonweb_human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/lymphochip.chip=lymphochip.chip"],
            "kinds":[],
            "name":"chip.platform",
            "numValues":"0-1",
            "defaultValue":"ftp.broadinstitute.org://pub/gsea/annotations/GENE_SYMBOL.chip",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Chip to use. Upload a chip file if your chip is not listed as a choice for the chip platform parameter.",
            "choices":[],
            "kinds":[],
            "name":"chip.platform.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The statistic used to score hits (gene set members) and misses (non-members)",
            "choices":["classic", "weighted", "weighted_p2", "weighted_p1.5"],
            "kinds":[],
            "name":"scoring.scheme",
            "numValues":"0-1",
            "defaultValue":"weighted",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Class separation metric - gene markers are ranked using this metric to produce the gene list",
            "choices":["Cosine", "Euclidean", "Manhattan", "Pearson", "FeatureVariation", "tTest", "Signal2Noise", "None", "RegressionSlope", "Bhattacharyya", "Norm.Pearson", "Diff_of_Means", "Diff_of_Medians", "Ratio_of_Means", "Ratio_of_Medians", "log2_ratio_of_means", "Feature_stddev_by_mean"],
            "kinds":[],
            "name":"metric.for.ranking.genes",
            "numValues":"0-1",
            "defaultValue":"Signal2Noise",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Direction in which the gene list should be ordered",
            "choices":["ascending", "descending"],
            "kinds":[],
            "name":"gene.list.ordering.mode",
            "numValues":"0-1",
            "defaultValue":"descending",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Mode in which scores from the gene list should be considered",
            "choices":["real", "abs"],
            "kinds":[],
            "name":"gene.list.sorting.mode",
            "numValues":"0-1",
            "defaultValue":"real",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets larger than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"max.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"500",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Gene sets smaller than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"min.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"15",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Collapsing mode",
            "choices":["Max_probe", "Median_of_probes"],
            "kinds":[],
            "name":"collapsing.mode.for.probe.sets.with.more.than.one.match",
            "numValues":"0-1",
            "defaultValue":"Max_probe",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Normalization mode",
            "choices":["meandiv", "None"],
            "kinds":[],
            "name":"normalization.mode",
            "numValues":"0-1",
            "defaultValue":"meandiv",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Type of phenotype randomization (does not apply to gene set permutations)",
            "choices":["equalize_and_balance", "no_balance"],
            "kinds":[],
            "name":"randomization.mode",
            "numValues":"0-1",
            "defaultValue":"no_balance",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"If there is no known gene symbol match for a probe set, omit it from the collapsed dataset",
            "choices":["false", "true"],
            "kinds":[],
            "name":"omit.features.with.no.symbol.match",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Create detailed gene set report (heat map, mountain plot, etc.) for every enriched gene set",
            "choices":["false", "true"],
            "kinds":[],
            "name":"make.detailed.gene.set.report",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Use the median of each class instead of the mean for the class separation metrics",
            "choices":["true", "false"],
            "kinds":[],
            "name":"median.for.class.metrics",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Number of markers",
            "choices":[],
            "kinds":[],
            "name":"number.of.markers",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Plot GSEA mountain and related plots for the top sets of each phenotype",
            "choices":[],
            "kinds":[],
            "name":"plot.graphs.for.the.top.sets.of.each.phenotype",
            "numValues":"0-1",
            "defaultValue":"20",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Seed to use for randomization",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"timestamp",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to save random ranked lists",
            "choices":["false", "true"],
            "kinds":[],
            "name":"save.random.ranked.lists",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.file.name",
            "numValues":"0-1",
            "defaultValue":"<expression.dataset_basename>.zip",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"GSEA",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"9",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00072:9"
}, "410":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A file containing allele specific probe-set intensities in BSNP format. ",
            "choices":[],
            "kinds":["bsnp"],
            "name":"bsnp.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The clusters file output by Birdseed.",
            "choices":[],
            "kinds":["clusters.txt"],
            "name":"birdseed.clusters.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A file containing information about the samples. Same file used for BirdseedDataPreparation.",
            "choices":[],
            "kinds":["txt"],
            "name":"sample.info.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Leave blank to use internally provided Hg19 genome annotation file",
            "choices":[],
            "kinds":["txt"],
            "name":"genome.annotation.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"predictive model",
            "choices":["quadratic", "linear"],
            "kinds":[],
            "name":"predictive.model",
            "numValues":"0-1",
            "defaultValue":"quadratic",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Scale",
            "choices":["avg", "amp", "del"],
            "kinds":[],
            "name":"scale",
            "numValues":"0-1",
            "defaultValue":"del",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"whether to output allele-specific copy numbers",
            "choices":["=no", "-byallele=yes"],
            "kinds":[],
            "name":"output.allele.specific.cn",
            "numValues":"0-1",
            "defaultValue":"-byallele",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"whether to include 'AFFX-SNP_...' probes",
            "choices":["=no", "-withaffx=yes"],
            "kinds":[],
            "name":"include.affx.snp.probes",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"whether to save summary statistics",
            "choices":["=no", "-stats=yes"],
            "kinds":[],
            "name":"save.summary.statistics",
            "numValues":"0-1",
            "defaultValue":"-stats",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"whether to output intermediate files",
            "choices":["=no", "-nodel=yes"],
            "kinds":[],
            "name":"output.intermediate.files",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Output filename prefix",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<bsnp.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"CopyNumberInference",
    "write":false,
    "tags":["cn", "byallele.txt", "bysample.txt", "QS.txt", "stats.txt", "stats.pdf", "plots.pdf", "RData", "log"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00299:1"
}, "414":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Zip of SNP 6.0 CEL files",
            "choices":[],
            "kinds":["zip"],
            "name":"cel.files",
            "numValues":"0-1",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The genome annotation to use. Either a genome annotation or genome annotation file must be specified, but not both.",
            "choices":["hg19=hg19", "hg18=hg18"],
            "kinds":[],
            "name":"genome.annotation",
            "numValues":"0-1",
            "defaultValue":"hg19",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Genome annotation file. Either a genome annotation or genome annotation file must be specified, but not both.",
            "choices":[],
            "kinds":["txt"],
            "name":"genome.annotation.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The normalization method to apply.",
            "choices":["0=None", "1=Quantile Normalization(dChip)"],
            "kinds":[],
            "name":"normalization.method",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The summarization method to apply for SNP probes.",
            "choices":["1=Average Difference", "2=PM/MM Difference Model (dChip)", "5=Median Polish"],
            "kinds":[],
            "name":"summarization.method",
            "numValues":"0-1",
            "defaultValue":"5",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to sort output file by chromosome and location. Filters out probesets without location information.",
            "choices":["yes=Sort", "no=Do no sort"],
            "kinds":[],
            "name":"sort.by.chromosome.and.location",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to include RandomGC probesets in output",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"include.RandomGC.probesets",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Custom CDF file.(.cdf, .cdf.gz) Leave blank to use default internally provided CDF file.",
            "choices":[],
            "kinds":["cdf", ".gz"],
            "name":"cdf.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to use any mismatch probes in summarization step.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"use.mismatch.probes",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The base name for the output files",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<cel.files_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"SNPFileCreator_SNP6",
    "write":false,
    "tags":["snp", "stats.txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00302:1"
}, "413":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"bsnp file from BirdseedDataPreparation",
            "choices":[],
            "kinds":["bsnp", "snps_and_normals_only.bsnp"],
            "name":"bsnp.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"File containing gender information for samples from BirdseedDataPreparation",
            "choices":[],
            "kinds":["txt", "birdseed.gender.txt", "normals.birdseed.gender.txt"],
            "name":"gender.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"File containing signal clusters for assignment of calls",
            "choices":[],
            "kinds":["txt"],
            "name":"clusters.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Estimates of where SNP clusters fall based on Hapmap data",
            "choices":["GenomeWideSNP_6.priors.tsv=GenomeWideSNP_6", "=none"],
            "kinds":[],
            "name":"priors",
            "numValues":"0-1",
            "defaultValue":"GenomeWideSNP_6.priors.tsv",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Special snps list",
            "choices":["GenomeWideEx_6.special_snps=GenomeWideEx_6", "=none"],
            "kinds":[],
            "name":"special.snps",
            "numValues":"0-1",
            "defaultValue":"GenomeWideEx_6.special_snps",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"anchor weight",
            "choices":[],
            "kinds":[],
            "name":"anchor.weight",
            "numValues":"0-1",
            "defaultValue":"1.0",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"whether to output a file containing the clusters found",
            "choices":["--write-clusters <output.prefix>.birdseed_clusters.txt=yes", "=no"],
            "kinds":[],
            "name":"output.clusters",
            "numValues":"0-1",
            "defaultValue":"--write-clusters <output.prefix>.birdseed_clusters.txt",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Output prefix",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<bsnp.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Birdseed",
    "write":false,
    "tags":["calls.txt", "clusters.txt", "confs.txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00119:1"
}, "412":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input file, to be split into chunks",
            "choices":[],
            "kinds":[],
            "name":"inputFile",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"[Integer, >=1], The maximum number of output files to split the file into. When both 'numFiles' and 'numLines' are set, treat this as the maximum number of output files to create, even if the files have more than the requested number of lines",
            "choices":[],
            "kinds":[],
            "name":"numFiles",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"[Integer, >=1], The number of lines in each output file.",
            "choices":[],
            "kinds":[],
            "name":"numLines",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FileSplitter",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00274:2"
}, "411":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Birdseed Confs file. 0=most confident, 1=least confident.",
            "choices":[],
            "kinds":["txt", "confs.txt"],
            "name":"birdseed.confs.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The prefix for the output file name",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<birdseed.confs.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"BirdseedCallRate",
    "write":false,
    "tags":["callrates.txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00122:1"
}, "220":{
    "category":"IGV",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset to be viewed in IGV or IGV session file",
            "choices":[],
            "kinds":["bam", "bed", "cbs.txt", "clm", "cls", "cn", "Comparative Marker Selection", "csv", "Dataset", "gct", "glad", "igv", "loh", "maf", "Matrix", "sam", "res", "seg", "snp", "txt", "xcn", "xls", "xml", "zip"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The index file.",
            "choices":[],
            "kinds":["bai", "sai"],
            "name":"index.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Choose the genome for your data. IGV will launch with hg19 or the last viewed genome by default.",
            "choices":["=Select a genome", "hg19=Human hg19", "hg18=Human hg18", "hg17=Human hg17", "hg16=Human hg16", "mm9=Mouse mm9", "mm8= Mouse mm8", "mm7=Mouse mm7", "1kg_ref=Human (1kg reference, b36)", "b37=Human (b37)", "rn4=Rat (rn4)", "canFam2=Dog (canFam2)", "btaurus_3.0=Cow (b. taurus UMD 3.0)", "susScrofa=Sus Scrofa (9.56)", "galGal3=Chicken (galGal3)", "cavPor3=Guinea Pig (cavPor3)", "monDom5=Opossum (monDom5)", "xenTro2=X. tropicalis (xenTro2)", "zebrafish=Zebrafish (Zv7/danRer5)", "danRer6=Zebrafish (Zv8/danRer6)", "gasAcul=Stickleback (gasAcu1)", "Aplysia=Aplysia", "Plasmodium_3D7_v2.1=Plasmodium (3D7 v2.1)", "Plasmodium_3D7_v5.5=Plasmodium (3D7 v5.5)", "Plasmodium_6.1=Plasmodium (6.1)", "PlasmoDB_7.0=Plasmodium (3D7 V7.0)", "sacCer1=S. cerevisiae (sacCer1)", "sacCer2=S. cerevisiae (sacCer2)", "sk1=S. cerevisiae (sk1)", "sp=S. pombe (7/09)", "spombe_1.55=S. pombe (EF 1.55)", "candida=C. albicans", "mg8=M. oryzae (mg8)", "spur_2.1=S.purpuratus (2.1+)", "spur_2.5=S. purpuratus (2.5)", "ce6=C. elegans (ce6)", "ce4=C. elegans (ce4)", "dm3=D. melanogaster (dm3)", "dm2=D. melanogaster (dm2)", "dmel_5.9=D. melanogaster (5.9)", "dmel_r5.22=D. melanogaster (r5.22)", "tcas_2.0=T. castaneum (2.0)", "tcas_3.0=T. castaneum (3.0)", "ncrassa_v3=Neurospora crassa (v3)", "Glamblia_2.0=G. lamblia (2.0)", "me49=T. gondii (ME49)", "tb927=T. brucei (927)", "tbgambi=T. brucei gambiense", "lmjr=L. major (Friedlin)", "U00096.2=E. coli K-12 MG1655 (U00096.2)", "NC_000913.2=E. coli K-12 MG1655 (NC_000913.2)", "tair8=A. thaliana (TAIR 8)", "tair9=A. thaliana (TAIR 9)", "tair10=A. thaliana (TAIR 10)", "O_Sativa_r6=O. Sativa (release 6)", "osativa_r6.1=O. Sativa (release 6.1)", "B73=Maize (B73 4a.53)", "ppatens_1.2=P. patens (V 1.2)", "D.discoideum=D. discoideum (05-13-2009)"],
            "kinds":[],
            "name":"genomeId",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Provide a locus or gene of interest for your data. IGV will launch on chr1 or the last viewed chromosome by default. (e.g. chr1:2000-3000 or egfr)",
            "choices":[],
            "kinds":[],
            "name":"locus",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"IGV",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00170:2"
}, "221":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A pre-built bowtie index. Either a prebuilt or a custom Bowtie index must be specified.",
            "choices":["none=", "a_thaliana=A. Thaliana, TAIR8", "b_taurus=B. Taurus, UMD Freeze 3.0", "e_coli=E. Coli", "c_elegans_ws200=C. Elegans, WormBase WS200", "hg19=H. sapiens, UCSC hg19", "hg18=H. sapiens, UCSC hg18", "mm9=M. musculus, UCSC mm9", "mm8=M. musculus, UCSC mm8", "m_musculus_ncbi37=M. musculus, NCBI 37", "s_cerevisiae= S. cerevisiae"],
            "kinds":[],
            "name":"prebuilt.bowtie.index",
            "numValues":"0-1",
            "defaultValue":"none",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A zip file containing Bowtie index files. Either a prebuilt or a custom Bowtie index must be specified.",
            "choices":[],
            "kinds":["zip"],
            "name":"custom.bowtie.index",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Unpaired read file or first mate for paired reads. This can be a file in FASTA or FASTQ format or a ZIP archive containing FASTA or FASTQ files",
            "choices":[],
            "kinds":["fq", "fastq", "fa", "mfa", "fna", "fasta"],
            "name":"mate.1.or.unpaired.read",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Second mate for paired reads. This can be a file in FASTA or FASTQ format or a ZIP archive containing FASTA or FASTQ",
            "choices":[],
            "kinds":["fq", "fastq", "fa", "mfa", "fna", "fasta"],
            "name":"mate.2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether read characters are interpreted as colors",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"align.in.colorspace",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A zip file containing quality values for unpaired or first mate of paired CFASTA reads",
            "choices":[],
            "kinds":[],
            "name":"unpaired.or.mate.1.CFASTA.quality.values",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.file",
            "fileChoice":false
        },
        {
            "description":"A zip file containing quality values for second mate of paired CFASTA reads",
            "choices":[],
            "kinds":[],
            "name":"mate.2.CFASTA.quality.values",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Scale to use for quality values",
            "choices":["none=", "phred33", "phred64", "solexa"],
            "kinds":[],
            "name":"quality.value.scale",
            "numValues":"0-1",
            "defaultValue":"none",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Only report alignments with at most this many mismatches.",
            "choices":[],
            "kinds":[],
            "name":"max.mismatches",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Only report alignments with at most this many mismatches in the \"seed\". This value may be 0, 1, 2, 3.",
            "choices":[],
            "kinds":[],
            "name":"max.seed.mismatches",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The maximum permitted total of quality values at all mismatched read positions in the entire alignment",
            "choices":[],
            "kinds":[],
            "name":"max.total.quality.value",
            "numValues":"0-1",
            "defaultValue":"70",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The seed length. Value must be greater than or equal to 5.",
            "choices":[],
            "kinds":[],
            "name":"seed.length",
            "numValues":"0-1",
            "defaultValue":"28",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to round quality values to the nearest 10",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"round.quality.values",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The minimum insert size for valid paired-end alignments",
            "choices":[],
            "kinds":[],
            "name":"min.insert.size",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The maximum insert size for valid paired-end alignments",
            "choices":[],
            "kinds":[],
            "name":"max.insert.size",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The upstream/downstream mate orientations for a valid paired-end alignment against the forward reference strand",
            "choices":["m1r_m2r=mate1 or mate2 reverse-complement", "m1r_m2f=mate1 reverse-complement/ mate2 forward-oriented", "m1_fm2f=mate1 and mate2 forward-oriented"],
            "kinds":[],
            "name":"mate.orientation",
            "numValues":"0-1",
            "defaultValue":"m1r_m2r",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to attempt to align against the forward reference strand",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"align.to.forward.reference",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to attempt to align against the reverse-complement reference strand",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"align.to.reverse-complement",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The random seed",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"12345678",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Report up to this valid alignments per read or pair. Specify -1 to report all alignments.",
            "choices":[],
            "kinds":[],
            "name":"report.max.alignments",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Suppress all alignments for a particular read or pair if more than this reportable alignments exist for it.",
            "choices":[],
            "kinds":[],
            "name":"suppress.alignments.max",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether reported singleton alignments are \"best\" in terms of stratum (i.e. number of mismatches, or mismatches in the seed) and in terms of the quality values at the mismatched position(s)",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"best",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"If many valid alignments exist and are reportable and they fall into more than one alignment \"stratum\", report only those alignments that fall into the best stratum.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"strata",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Launch this many parallel search threads",
            "choices":[],
            "kinds":[],
            "name":"threads",
            "numValues":"0-1",
            "defaultValue":"8",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The name of output file",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"bowtie_alignment.sam",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Bowtie.aligner",
    "write":false,
    "tags":["sam"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00237:2"
}, "222":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A file or zip of files containing sequences in FASTA format",
            "choices":[],
            "kinds":["fn", "fa", "fasta"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The name of the index files",
            "choices":[],
            "kinds":[],
            "name":"index.name",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Bowtie.indexer",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00229:1"
}, "223":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A pre-built bwa index. Either a prebuilt or a custom BWA index must be specified.",
            "choices":["none=", "a_thaliana_TAIR8_alg-is=A. Thaliana, TAIR8", "b_taurus_3.0_alg-bwtsw=B. Taurus, UMD Freeze 3.0", "ecoli_NC_008253_ncbi536_alg-is=E. Coli", "c_elegans_WS200_alg-is=C. Elegans, WormBase WS200", "hg19_alg-bwtsw=H. sapiens, UCSC hg19", "hg18_alg-bwtsw=H. sapiens, UCSC hg18", "mm9_alg-bwtsw=M. musculus, UCSC mm9", "mm8_alg-bwtsw=M. musculus, UCSC mm8", "m_musculus_MGSCv37_alg-bwtsw=M. musculus, MGSC v.37", "s_cerevisiae_alg-is= S. cerevisiae"],
            "kinds":[],
            "name":"prebuilt.BWA.index",
            "numValues":"0-1",
            "defaultValue":"none",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A zip file containing BWA index files. Either a prebuilt or a custom BWA index must be specified.",
            "choices":[],
            "kinds":["zip"],
            "name":"custom.BWA.index",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Unpaired reads file or first mate for paired reads. This can be a file in FASTA, FASTQ, or BAM format. Note: the FASTA or FASTQ can be gzipped. ",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "bam"],
            "name":"reads.pair.1",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Second mate for paired reads. This can be a file in FASTA, FASTQ, or BAM format. Note: the FASTA or FASTQ can be gzipped.",
            "choices":[],
            "kinds":["fn", "fa", "fasta"],
            "name":"reads.pair.2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Specifies how to map BAM input. This is only required if input file is in BAM format.",
            "choices":["single", "first", "second", "paired"],
            "kinds":[],
            "name":"bam.mapping",
            "numValues":"0-1",
            "defaultValue":"single",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"The max edit distance. This specifies a threshold of the maximum number of deletions, insertions, and substitutions needed to transform the reference sequence into the read sequence.",
            "choices":[],
            "kinds":[],
            "name":"max.edit.distance",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Maximum number of gap opens. This specifies a threshold of the maximum number of gaps that can be initiated to match a given read to the reference.",
            "choices":[],
            "kinds":[],
            "name":"max.num.gap",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Maximum number of gap extensions. This specifies a threshold of the maximum number of bases by which gaps in a read can be extended.",
            "choices":[],
            "kinds":[],
            "name":"max.gap.extension",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Disallow a long deletion within this many bp of the 3' end.",
            "choices":[],
            "kinds":[],
            "name":"max.deletion.length",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Disallow an indel within this many bp of the ends",
            "choices":[],
            "kinds":[],
            "name":"max.indel.length",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Take the first of this length of subsequence as the seed",
            "choices":[],
            "kinds":[],
            "name":"seed.length",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Maximum edit distance in the seed; that is, the maximum number of changes required to transform the reference sequence of the seed into the read sequence of the seed.",
            "choices":[],
            "kinds":[],
            "name":"max.seed.edit.distance",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Mismatch penalty",
            "choices":[],
            "kinds":[],
            "name":"mismatch.penalty",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Gap open penalty",
            "choices":[],
            "kinds":[],
            "name":"gap.open.penalty",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Gap extension penalty",
            "choices":[],
            "kinds":[],
            "name":"gap.extension.penalty",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Proceed with suboptimal alignments if there are no more than this many equally best hits. This option only affects paired-end mapping.",
            "choices":[],
            "kinds":[],
            "name":"max.best.hits",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Specifies whether to reverse the query sequence but not complement it. This is required for alignment in the color space.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"reverse.query",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to disable iterative search",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"iterative.search",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Specifies a quality threshold for read trimming",
            "choices":[],
            "kinds":[],
            "name":"trim.reads",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The input is in the Illumina 1.3+ read format",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"Illumina.1.3.format",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Length of barcode starting from the 5� end",
            "choices":[],
            "kinds":[],
            "name":"barcode.length",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Specifies the maximum insert size for a read pair to be considered to be mapped properly",
            "choices":[],
            "kinds":[],
            "name":"max.insert.size",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Specifies the maximum occurrences of a read for pairing",
            "choices":[],
            "kinds":[],
            "name":"max.occurrences",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Maximum number of alignments to output in the XA tag for reads paired properly",
            "choices":[],
            "kinds":[],
            "name":"max.alignments",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Maximum number of alignments to output in the XA tag for disconcordant read pairs (excluding singletons)",
            "choices":[],
            "kinds":[],
            "name":"max.dc.alignments",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Number of threads",
            "choices":[],
            "kinds":[],
            "name":"num.threads",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Prefix to use for output file name",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<reads.pair.1_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"BWA.aln",
    "write":false,
    "tags":["sam"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00254:1"
}, "224":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A pre-built bowtie index. Either a prebuilt or a custom BWA index must be specified.",
            "choices":["none=", "a_thaliana_TAIR8_alg-is=A. Thaliana, TAIR8", "b_taurus_3.0_alg-bwtsw=B. Taurus, UMD Freeze 3.0", "ecoli_NC_008253_ncbi536_alg-is=E. Coli", "c_elegans_WS200_alg-is=C. Elegans, WormBase WS200", "hg19_alg-bwtsw=H. sapiens, UCSC hg19", "hg18_alg-bwtsw=H. sapiens, UCSC hg18", "mm9_alg-bwtsw=M. musculus, UCSC mm9", "mm8_alg-bwtsw=M. musculus, UCSC mm8", "m_musculus_MGSCv37_alg-bwtsw=M. musculus, MGSC v.37", "s_cerevisiae_alg-is= S. cerevisiae"],
            "kinds":[],
            "name":"prebuilt.BWA.index",
            "numValues":"0-1",
            "defaultValue":"none",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A zip file containing BWA index files. Either a prebuilt or a custom BWA index must be specified.",
            "choices":[],
            "kinds":["zip"],
            "name":"custom.BWA.index",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Read file for single-end reads. This can be a file in FASTA or FASTQ format.",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq"],
            "name":"read.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The score of the match",
            "choices":[],
            "kinds":[],
            "name":"match.score",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Maximum number of gap opens",
            "choices":[],
            "kinds":[],
            "name":"mismatch.penalty",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Gap open penalty",
            "choices":[],
            "kinds":[],
            "name":"gap.open.penalty",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Gap extension penalty",
            "choices":[],
            "kinds":[],
            "name":"gap.extension.penalty",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"band width in the banded alignment",
            "choices":[],
            "kinds":[],
            "name":"band.width",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Minimum score threshold divided by the match score",
            "choices":[],
            "kinds":[],
            "name":"min.score.threshold",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Coefficient for threshold adjustment according to query length",
            "choices":[],
            "kinds":[],
            "name":"threshold.coefficient",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Z-best heuristics. Specifying a higher number increases accuracy at the cost of speed",
            "choices":[],
            "kinds":[],
            "name":"z.best.heuristics",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Maximum SA interval size for initiating a seed. Specifying a higher number increases accuracy at the cost of speed.",
            "choices":[],
            "kinds":[],
            "name":"max.sa.interval.size",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The minimum number of seeds contained in the best alignment from the forward-forward alignment process that allows the algorithm to skip performing the reverse alignment. BWA.bwasw tends to be faster and more accurate if the alignment is supported by more seeds.",
            "choices":[],
            "kinds":[],
            "name":"min.num.seeds",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Number of threads",
            "choices":[],
            "kinds":[],
            "name":"num.threads",
            "numValues":"0-1",
            "defaultValue":"4",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Prefix to use for the output file name",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<read.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"BWA.bwasw",
    "write":false,
    "tags":["sam"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00256:1"
}, "327":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input FCS data file in which to set keyword/value pairs.",
            "choices":[],
            "kinds":["fcs"],
            "name":"Input.FCS.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The file with keyword/value pairs to add (or change values of existing keywords). The keyword/value pairs can be submitted either as an CSV file with two columns: \"Keyword\" and \"Value\" (heading is optional) or as a text file with a chunk of FCS TEXT segment, e.g., /$P3S/MUC 1 APC/$P4S/Thy1 PE/BD$CUSTOM_VALUE23/12/.",
            "choices":[],
            "kinds":["csv", "txt"],
            "name":"Keywords.input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The file name for the output FCS data file.",
            "choices":[],
            "kinds":[],
            "name":"Output.fcs.file.name",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"SetFCSKeywords",
    "write":false,
    "tags":["fcs"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00186:2"
}, "225":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A sequence fasta file",
            "choices":[],
            "kinds":["fasta", "fa"],
            "name":"fasta.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The algorithm to use for constructing the BWT index",
            "choices":["is", "bwtsw"],
            "kinds":[],
            "name":"algorithm",
            "numValues":"0-1",
            "defaultValue":"is",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to build a color-space index. The input fasta should be in nucleotide space.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"color.space.index",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A prefix for the output file name.",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<fasta.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"BWA.indexer",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00253:1"
}, "328":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"FCS data file to transform.",
            "choices":[],
            "kinds":["fcs"],
            "name":"Input.fcs.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Comma-separated list of parameters to transform, parameters are specified by their short names ($PnN values); Optional. By default, all parameters with the \"FL\" prefix in their short name will be transformed.",
            "choices":[],
            "kinds":[],
            "name":"Parameters.to.transform",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"T > 0; Data value at the top of the scale range to be displayed, optional. The maximum input value will be used if no explicit value for T is provided.",
            "choices":[],
            "kinds":[],
            "name":"T",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"M < 0; Full width of the intended Logicle display in asymptotic decades, optional. The default value is 4.5 (decades). Note also that for the resulting Logicle transformation, Logicle (T) = M.",
            "choices":[],
            "kinds":[],
            "name":"M",
            "numValues":"0-1",
            "defaultValue":"4.5",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"W >= 0; Linearization width in asymptotic decades; optional. The described calculation will be used to set W for each of the transformed FCS parameters if no explicit value for W is provided.",
            "choices":[],
            "kinds":[],
            "name":"W",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"A, usually <= 0; Additional negative display range in asymptotic decades; optional. The default value is 0.",
            "choices":[],
            "kinds":[],
            "name":"A",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Use a fast implementation of Logicle with less precision; optional.",
            "choices":["no=Use regular implementation, default", "t=Use fast implementation"],
            "kinds":[],
            "name":"Use.Fast.Implementation",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The output FCS file name",
            "choices":[],
            "kinds":[],
            "name":"Output.fcs.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.fcs.data.file_basename>.logicle_transformed.fcs",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"LogicleTransformFCS",
    "write":false,
    "tags":["fcs"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00192:1"
}, "226":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file in SAM or BAM format",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A label for the transfrags in the output files.",
            "choices":[],
            "kinds":[],
            "name":"output.label",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Reference annotation file.(gtf)",
            "choices":[],
            "kinds":["gtf"],
            "name":"GTF",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Maximum intron length",
            "choices":[],
            "kinds":[],
            "name":"max.intron.length",
            "numValues":"0-1",
            "defaultValue":"300000",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Minimum isoform fraction. Range: [0.0-1.0]",
            "choices":[],
            "kinds":[],
            "name":"min.isoform.fraction",
            "numValues":"0-1",
            "defaultValue":"0.05",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Threshold for min depth of intronic coverage divided by the number of spliced reads. Range: [0.0,1.0]",
            "choices":[],
            "kinds":[],
            "name":"pre.mrna.fraction",
            "numValues":"0-1",
            "defaultValue":"0.05",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Threshold for SAM mapping quality",
            "choices":[],
            "kinds":[],
            "name":"min.mapping.quality",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A GTF file specifying transcripts to be ignored",
            "choices":[],
            "kinds":["gtf"],
            "name":"mask.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A reference multi-FASTA file for bias detection and correction algorithm",
            "choices":[],
            "kinds":["fa"],
            "name":"reference.seq",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to perform quartile normalization",
            "choices":["no", "yes"],
            "kinds":[],
            "name":"quartile.normalization",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The alpha value for the binomial test used during false positive alignment filtration",
            "choices":[],
            "kinds":[],
            "name":"junc.alpha",
            "numValues":"0-1",
            "defaultValue":"0.01",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Parameter for filtering prior to assembly",
            "choices":[],
            "kinds":[],
            "name":"small.anchor.fraction",
            "numValues":"0-1",
            "defaultValue":"0.12",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Threshold for reporting assembled transcription fragments",
            "choices":[],
            "kinds":[],
            "name":"min.frags.per.transfrag",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Number of importance samples generated for each locus during abundance estimation",
            "choices":[],
            "kinds":[],
            "name":"num.importance.samples",
            "numValues":"0-1",
            "defaultValue":"1000",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Number of iterations allowed during maximum likelihood estimation of abundances",
            "choices":[],
            "kinds":[],
            "name":"max.mle.iterations",
            "numValues":"0-1",
            "defaultValue":"5000",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Specify library type if module does not determine type automatically",
            "choices":["fr-unstranded=fr-unstranded (default)", "fr-firststrand=fr-firststrand", "fr-secondstrand=fr-secondstrand", "ff-unstranded=ff-unstranded", "ff-firststrand=ff-firststrand", "ff-secondstrand=ff-secondstrand"],
            "kinds":[],
            "name":"library.type",
            "numValues":"0-1",
            "defaultValue":"fr-unstranded",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Number of threads used to align reads",
            "choices":[],
            "kinds":[],
            "name":"num.threads",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        }
    ],
    "name":"Cufflinks",
    "write":false,
    "tags":["genes.expr", "transcripts.expr", "gtf"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00231:1"
}, "329":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input clustering results (of multiple data files) in CSV files with each clustered population stored in a separate CSV file. All these CSV files shall have the same columns (dimensions/channels) or at least, they all shall include columns specified by the dimensions parameter.",
            "choices":[],
            "kinds":[],
            "name":"Input.clustering.results",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The number of distinct labels (populations) to look for. You may run the MClustClusterLabelBIC module to get the number of labels you should look for.",
            "choices":[],
            "kinds":[],
            "name":"No.of.labels",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"A comma-separated list of dimensions (parameters/channels) that shall be used for meta clustering (clustering of means of clusters). All specified dimensions shall be included in all the input clustering results CSV files. All dimensions (but Time) will be used if this parameter is not provided.",
            "choices":[],
            "kinds":[],
            "name":"Dimensions",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Specific model used for meta clustering; see documentation for details about different models.",
            "choices":["EII=EII", "VII=VII, default", "EEI=EEI", "VEI=VEI", "EVI=EVI", "VVI=VVI", "EEE=EEE", "EEV=EEV", "VEV=VEV", "VVV=VVV"],
            "kinds":[],
            "name":"Model",
            "numValues":"0-1",
            "defaultValue":"VII",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The threshold (in percentage) for uncertainty when assigning labels. Input a value greater than 50 and lower than 100. Populations where no label can be assigned with probability greater or equal to this uncertainty threshold will be left unassigned in the results.",
            "choices":[],
            "kinds":[],
            "name":"Uncertainty.threshold",
            "numValues":"0-1",
            "defaultValue":"65",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        }
    ],
    "name":"MClustClusterLabel",
    "write":false,
    "tags":["csv"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00205:1"
}, "227":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A GTF file output from Cufflinks, or a TXT containing a list of paths to GTF files.",
            "choices":[],
            "kinds":["gtf"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A prefix for the module output",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A reference annotation GTF",
            "choices":[],
            "kinds":["gtf"],
            "name":"reference.GTF",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to ignore reference transcripts that are not overlapped by any transcript in the input files.",
            "choices":["no=no", "yes=yes"],
            "kinds":[],
            "name":"exclude.transcripts",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Fasta file or zip of fasta files against which your reads were aligned",
            "choices":[],
            "kinds":[],
            "name":"custom.reference.genome.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"Cufflinks.cuffcompare",
    "write":false,
    "tags":["gtf", "tmap", "refmap", "loci", "tracking"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00235:1"
}, "188":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"ZIP file of normalized GCT files output by IlluminaNormalizer",
            "choices":[],
            "kinds":["zip"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to concatenate the data or detection scores",
            "choices":["_data=data", "_dscores=detection scores"],
            "kinds":[],
            "name":"output.file.type",
            "numValues":"0-1",
            "defaultValue":"_data",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"IlluminaConcatenator",
    "write":false,
    "tags":["gct"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00155:1"
}, "228":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file in SAM or BAM format",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"first.SAM.or.BAM.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Input file in SAM or BAM format",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"second.SAM.or.BAM.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"To specify more than 2 SAM or BAM files, use this parameter to specify a list of input files",
            "choices":[],
            "kinds":["txt"],
            "name":"input.files.list",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A reference annotation GTF",
            "choices":[],
            "kinds":["gtf"],
            "name":"GTF.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A file containing a label for each sample (one label per line). ",
            "choices":[],
            "kinds":["txt"],
            "name":"output.label",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Launch this many parallel search threads. Increasing this value can help decrease the runtime of this module.",
            "choices":[],
            "kinds":[],
            "name":"num.threads",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Threshold for mapping quality",
            "choices":[],
            "kinds":[],
            "name":"min.mapqual",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Analyze the provided samples as a time series",
            "choices":["no", "yes"],
            "kinds":[],
            "name":"time.series",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Reference file for bias detection qnd correction algorithm",
            "choices":[],
            "kinds":["fasta", "fa"],
            "name":"reference.seq",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to perform quartile normalization",
            "choices":["no", "yes"],
            "kinds":[],
            "name":"quartile.normalization",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The minimum number of alignments in a locus for needed to conduct significance testing on changes in that locus observed between samples.",
            "choices":[],
            "kinds":[],
            "name":"min.alignment.count",
            "numValues":"0-1",
            "defaultValue":"500",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The allowed false discovery rate.",
            "choices":[],
            "kinds":[],
            "name":"FDR",
            "numValues":"0-1",
            "defaultValue":".05",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Number of importance samples generated for each locus during abundance estimation",
            "choices":[],
            "kinds":[],
            "name":"num.importance.samples",
            "numValues":"0-1",
            "defaultValue":"1000",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Number of iterations allowed during maximum likelihood estimation of abundances",
            "choices":[],
            "kinds":[],
            "name":"max.mle.iterations",
            "numValues":"0-1",
            "defaultValue":"5000",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Specify library type if module does not determine type automatically",
            "choices":["=", "fr-unstranded", "fr-firststrand", "fr-secondstrand", "ff-unstranded", "ff-firststrand", "ff-secondstrand"],
            "kinds":[],
            "name":"library.type",
            "numValues":"0-1",
            "defaultValue":"fr-unstranded",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Mask GTF file",
            "choices":[],
            "kinds":["gtf"],
            "name":"mask.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"Cufflinks.cuffdiff",
    "write":false,
    "tags":["isoforms.fpkm_tracking", "genes.fpkm_tracking", "cds.fpkm_tracking", "tss_groups.fpkm_tracking", "tss_group_exp.diff", "isoform_exp.diff", "gene_exp.diff", "cds_exp.diff", "splicing.diff", "cds.diff", "promoters.diff"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00236:1"
}, "323":{
    "category":"Projection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input gct file. This module does not allow missing values.",
            "choices":[],
            "kinds":["gct"],
            "name":"input.gct.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Output filename prefix. If unspecified, is set to <prefix of input.gct.file>.PROJ.",
            "choices":[],
            "kinds":[],
            "name":"output.file.prefix",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Gene sets database from GSEA website.",
            "choices":["c1.all.v3.0.symbols.gmt=c1.all.v3.0.symbols.gmt [Positional]", "c1.all.v3.0.entrez.gmt=c1.all.v3.0.entrez.gmt [Positional]", "c2.all.v3.0.symbols.gmt=c2.all.v3.0.symbols.gmt [Curated]", "c2.all.v3.0.entrez.gmt=c2.all.v3.0.entrez.gmt [Curated]", "c2.cgp.v3.0.symbols.gmt=c2.cgp.v3.0.symbols.gmt [Curated]", "c2.cgp.v3.0.entrez.gmt=c2.cgp.v3.0.entrez.gmt [Curated]", "c2.cp.v3.0.symbols.gmt=c2.cp.v3.0.symbols.gmt [Curated]", "c2.cp.v3.0.entrez.gmt=c2.cp.v3.0.entrez.gmt [Curated]", "c2.cp.biocarta.v3.0.symbols.gmt=c2.cp.biocarta.v3.0.symbols.gmt [Curated]", "c2.cp.biocarta.v3.0.entrez.gmt=c2.cp.biocarta.v3.0.entrez.gmt [Curated]", "c2.cp.kegg.v3.0.symbols.gmt=c2.cp.kegg.v3.0.symbols.gmt [Curated]", "c2.cp.kegg.v3.0.entrez.gmt=c2.cp.kegg.v3.0.entrez.gmt [Curated]", "c2.cp.reactome.v3.0.symbols.gmt=c2.cp.reactome.v3.0.symbols.gmt [Curated]", "c2.cp.reactome.v3.0.entrez.gmt=c2.cp.reactome.v3.0.entrez.gmt [Curated]", "c3.all.v3.0.symbols.gmt=c3.all.v3.0.symbols.gmt [Motif]", "c3.all.v3.0.entrez.gmt=c3.all.v3.0.entrez.gmt [Motif]", "c3.mir.v3.0.symbols.gmt=c3.mir.v3.0.symbols.gmt [Motif]", "c3.mir.v3.0.entrez.gmt=c3.mir.v3.0.entrez.gmt [Motif]", "c3.tft.v3.0.symbols.gmt=c3.tft.v3.0.symbols.gmt [Motif]", "c3.tft.v3.0.entrez.gmt=c3.tft.v3.0.entrez.gmt [Motif]", "c4.all.v3.0.symbols.gmt=c4.all.v3.0.symbols.gmt [Computational]", "c4.all.v3.0.entrez.gmt=c4.all.v3.0.entrez.gmt [Computational]", "c4.cgn.v3.0.symbols.gmt=c4.cgn.v3.0.symbols.gmt [Computational]", "c4.cgn.v3.0.entrez.gmt=c4.cgn.v3.0.entrez.gmt [Computational]", "c4.cm.v3.0.symbols.gmt=c4.cm.v3.0.symbols.gmt [Computational]", "c4.cm.v3.0.entrez.gmt=c4.cm.v3.0.entrez.gmt [Computational]", "c5.all.v3.0.symbols.gmt=c5.all.v3.0.symbols.gmt [Gene Ontology]", "c5.all.v3.0.entrez.gmt=c5.all.v3.0.entrez.gmt [Gene Ontology]", "c5.bp.v3.0.symbols.gmt=c5.bp.v3.0.symbols.gmt [Gene Ontology]", "c5.bp.v3.0.entrez.gmt=c5.bp.v3.0.entrez.gmt [Gene Ontology]", "c5.cc.v3.0.symbols.gmt=c5.cc.v3.0.symbols.gmt [Gene Ontology]", "c5.cc.v3.0.entrez.gmt=c5.cc.v3.0.entrez.gmt [Gene Ontology]", "c5.mf.v3.0.symbols.gmt=c5.mf.v3.0.symbols.gmt [Gene Ontology]", "c5.mf.v3.0.entrez.gmt=c5.mf.v3.0.entrez.gmt [Gene Ontology]"],
            "kinds":[],
            "name":"gene.sets.database",
            "numValues":"0-1",
            "defaultValue":"c1.all.v3.0.symbols.gmt",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets database - .gmt. Upload a gene set if your gene set is not listed as a choice for the gene sets database parameter.",
            "choices":[],
            "kinds":["gmt"],
            "name":"gene.sets.database.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":".txt file containing list of .gmt files. This is typically created by the ListFiles module and is used if projecting expression data to gene sets defined across multiple .gmt files.",
            "choices":[],
            "kinds":["txt"],
            "name":"gene.sets.database.list.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Specifies the gct data column containing gene symbols. In most cases this will be \"Column 1\".",
            "choices":["Name=Column 1", "Description=Column 2"],
            "kinds":[],
            "name":"gene.symbol.column",
            "numValues":"0-1",
            "defaultValue":"Name",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Comma-separated list of gene set names on which to project expression data. Set to \"ALL\" if projecting to all defined gene sets.",
            "choices":[],
            "kinds":[],
            "name":"gene.set.selection",
            "numValues":"0-1",
            "defaultValue":"ALL",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Method used to normalize gene expression data",
            "choices":["rank", "log", "log.rank"],
            "kinds":[],
            "name":"sample.normalization.method",
            "numValues":"0-1",
            "defaultValue":"rank",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Module authors strongly recommend against changing from default.",
            "choices":[],
            "kinds":[],
            "name":"weighting.exponent",
            "numValues":"0-1",
            "defaultValue":"0.75",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Gene sets smaller than this are excluded from the analysis.",
            "choices":[],
            "kinds":[],
            "name":"min.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        }
    ],
    "name":"ssGSEAProjection",
    "write":false,
    "tags":["gct"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00270:1"
}, "187":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A .zip file containing mixture modeling results from the FLAMEMixtureModel module",
            "choices":[],
            "kinds":["zip"],
            "name":"mixture.model",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Criterion used for determining optimal number of clusters",
            "choices":["AIC=Akaike Information Criterion (AIC)", "BIC=Bayesian Information Criterion (BIC)", "SWR=Scale-free Weighted Ratio (SWR)", "distance.ratio=distance ratio", "intercluster.distance=intercluster distance"],
            "kinds":[],
            "name":"method",
            "numValues":"0-1",
            "defaultValue":"SWR",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"An integer; the seed fixes random computational processes during computation. This does not need to be changed under most circumstances.",
            "choices":[],
            "kinds":[],
            "name":"seed",
            "numValues":"0-1",
            "defaultValue":"123456",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"A prefix for output files",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<mixture.model_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEChooseOptimalClusterNumber",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"5",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00161:5"
}, "229":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Alignment file in SAM or BAM format, sorted by start position",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"alignment.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Index file for alignment file, in SAI or BAI format. The index file must have the same root name as the alignment file. (Example: foo.sam and foo.sam.sai OR foo.sai) ",
            "choices":[],
            "kinds":["sai", "bai"],
            "name":"alignment.index.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"File containing sizes of chromosomes",
            "choices":[],
            "kinds":["txt", "rtf"],
            "name":"chromosome.size.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Selected chromosome, e.g., chr19",
            "choices":[],
            "kinds":[],
            "name":"chromosome",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Chromosome sequence in FASTA format",
            "choices":[],
            "kinds":["fa", "fasta"],
            "name":"chromosome.sequence.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A label that will be used to name output files",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<alignment.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Scripture",
    "write":false,
    "tags":["enrichment.gct", "rpkm.gct", "readsperbase.gct", "totalreads.gct", "introns.bed", "bed", "segments", "dot"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00232:1"
}, "324":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A GTF file output from Cufflinks, or a TXT containing a list of paths to GTF files.",
            "choices":[],
            "kinds":["gtf"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A prefix for the module output",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A reference annotation GTF",
            "choices":[],
            "kinds":["gtf"],
            "name":"reference.GTF",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to ignore reference transcripts that are not overlapped by any transcript in the input files.",
            "choices":["no=no", "yes=yes"],
            "kinds":[],
            "name":"exclude.transcripts",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Fasta file or zip of fasta files against which your reads were aligned",
            "choices":[],
            "kinds":[],
            "name":"custom.reference.genome.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"Cufflinks.cuffcompare",
    "write":false,
    "tags":["gtf", "tmap", "refmap", "tracking", "txt", "stats"],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00235:4"
}, "325":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Name of the input file from which to pull the matrix. Must be a delimited text file.",
            "choices":[],
            "kinds":["csv", "txt", "gct", "res", "cdt", "chip", "clm", "cls", "cn", "glad", "gmt", "gmx", "grp", "loh", "maf", "odf", "snp", "xcn"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Base name for the output file. The module will add an appropriate extension, either .csv for a comma-delimted file or .txt for a space- or tab-delimited file).",
            "choices":[],
            "kinds":[],
            "name":"output.file.base.name",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>.select",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Token naming the character for the output column delimiter. Choices are TAB, COMMA, and SPACE. TAB is the default.",
            "choices":["TAB=tab", "COMMA=comma", "SPACE=space"],
            "kinds":[],
            "name":"delimiter",
            "numValues":"0-1",
            "defaultValue":"TAB",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Starting row of the matrix (line number within the file). Defaults to the first row.",
            "choices":[],
            "kinds":[],
            "name":"start.row",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Ending row of the matrix (line number within the file). Defaults to the last row.",
            "choices":[],
            "kinds":[],
            "name":"end.row",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Starting column of the matrix. Defaults to the first column.",
            "choices":[],
            "kinds":[],
            "name":"start.column",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Ending column of the matrix. Defaults to the last column.",
            "choices":[],
            "kinds":[],
            "name":"end.column",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Select specific rows to include in the matrix (e.g. \"3,5,7-12\"). Note that start/end row parameters may limit this selection.",
            "choices":[],
            "kinds":[],
            "name":"row.select",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Select specific columns to include in the matrix (e.g. \"1,2,4-6\"). Note that start/end column parameters may limit this selection",
            "choices":[],
            "kinds":[],
            "name":"column.select",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Produce an output file containing the items not meeting the selection criteria. The file will be named <output.file.base.name>.REJECT.<ext>",
            "choices":["false", "true"],
            "kinds":[],
            "name":"output.rejects",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"SelectFileMatrix",
    "write":false,
    "tags":["csv", "txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00285:1"
}, "189":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"file with one sample per line, one Sentrix Position, DAP#, and Sentrix ID per DAP",
            "choices":[],
            "kinds":["txt"],
            "name":"sample.description.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"outlier detection method (only applies to extraction using bead-level data)",
            "choices":["> 3 Std. Deviations=> 3 Std. Deviations", "none=none"],
            "kinds":[],
            "name":"outlier.method",
            "numValues":"0-1",
            "defaultValue":"> 3 Std. Deviations",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"IlluminaScanExtractor",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00154:2"
}, "326":{
    "category":"Data Format Conversion",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A CSV file to be converted to FCS.",
            "choices":[],
            "kinds":["csv"],
            "name":"Input.CSV.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The name of the output FCS file.",
            "choices":[],
            "kinds":[],
            "name":"Output.FCS.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.CSV.data.file_basename>.fcs",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Value of the $PnR keyword for all parameters. By default, this tool will try to set the best settings based on the data in the file; use \"auto\", \"auto-exact\", \"BD\", or an integer value.",
            "choices":[],
            "kinds":[],
            "name":"Range",
            "numValues":"0-1",
            "defaultValue":"auto",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Value of the $DATATYPE keyword. By default, this tool will try to set the best settings based on the data in the input CSV file.",
            "choices":["auto=auto, default", "int=integer", "float=floating point"],
            "kinds":[],
            "name":"Data.type",
            "numValues":"0-1",
            "defaultValue":"auto",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"CsvToFcs",
    "write":false,
    "tags":["fcs"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00174:2"
}, "320":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"An FCS data file to add noise to.",
            "choices":[],
            "kinds":["fcs"],
            "name":"Input.FCS.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The output FCS file name.",
            "choices":[],
            "kinds":[],
            "name":"Output.FCS.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.FCS.data.file_basename>.with_noise.fcs",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"List of parameters to which the module will add noise. The list may be provided as a list of indexes (e.g., \"1-3,5,7\") or as a list of parameter names (i.e., values of the $PnN keyword, such as \"FSC-H,FL1-H,FL2-A\"). By default, the noise will be added to all parameters but the Time parameter.",
            "choices":[],
            "kinds":[],
            "name":"Parameters.to.add.noise.to",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Noise level in percent. This is the maximum noise that will be added to an event based on the current event parameter value or on the maximum range of the appropriate parameter. The latter option will be effective if the Uniform noise option is selected.",
            "choices":[],
            "kinds":[],
            "name":"Noise.level",
            "numValues":"0-1",
            "defaultValue":"0.5",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"How to add the noise: Proportional (The maximum amount of noise added to each value will be based on the value itself, e.g., low values will get lower amount of noise.) or Uniform (The maximum amount of noise added to each value is only dependent on the range of the particular parameter).",
            "choices":["Proportional=Proportional, default", "Uniform=Uniform"],
            "kinds":[],
            "name":"Noise",
            "numValues":"0-1",
            "defaultValue":"Proportional",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to remove saturated events. An event is considered saturated if one or more of its parameter values are closer than 0.1 percent from the maximum range for that parameter (i.e., value of the appropriate $PnR keyword).",
            "choices":["RemoveSaturated=Remove saturated events, default", " KeepSaturated=Keep saturated events"],
            "kinds":[],
            "name":"Saturated.events",
            "numValues":"0-1",
            "defaultValue":"RemoveSaturated",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The seed to use for the random generator. Leave this blank if want to use a randomly selected seed.",
            "choices":[],
            "kinds":[],
            "name":"Random.Seed",
            "numValues":"0-1",
            "defaultValue":"1234567",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        }
    ],
    "name":"AddNoiseToFCS",
    "write":false,
    "tags":["fcs"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00179:2"
}, "321":{
    "category":"Data Format Conversion",
    "description":"description goes here",
     "inputs":[
        {
            "description":"An FCS data file to be converted to CSV.",
            "choices":[],
            "kinds":["fcs"],
            "name":"Input.FCS.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The name of the output CSV file.",
            "choices":[],
            "kinds":[],
            "name":"Output.CSV.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.FCS.data.file_basename>.csv",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to try to extract full parameter names from the FCS file.",
            "choices":["TRUE=Use full names, default", "FALSE=Use short names only"],
            "kinds":[],
            "name":"Use.full.names",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The file name to store keyword value pairs extracted from the FCS file.",
            "choices":[],
            "kinds":[],
            "name":"Output.keywords.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.FCS.data.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"How to store keywords.",
            "choices":["CSV=Store as a CSV file, default", "FCS=Store keywords in the FCS TEXT segment format", "None=Do not extract the keyword/value pairs"],
            "kinds":[],
            "name":"Output.keywords.mode",
            "numValues":"0-1",
            "defaultValue":"CSV",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to convert log channel values to linear scale.",
            "choices":["TRUE=Convert channel to scale, default", "NO=No conversion, store as in the FCS file"],
            "kinds":[],
            "name":"Channel.to.scale.conversion",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to use regular (32bit, recommended) or double precision.",
            "choices":["FALSE=Use regular precision, default", "TRUE=Use double precision"],
            "kinds":[],
            "name":"Precision",
            "numValues":"0-1",
            "defaultValue":"FALSE",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"FcsToCsv",
    "write":false,
    "tags":["csv", "keywords.csv", "keywords.txt"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00175:3"
}, "322":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input FCS files to be merged; either a zip file or a pointer to a directory or a text file with FCS file names (full path) with one filename per line.",
            "choices":[],
            "kinds":["zip", "txt"],
            "name":"Input.files",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Subsampling rate as percentage of events to be included from each data set, value between 0 and 100, optional, default 100%, cannot be combined with keep n events.",
            "choices":[],
            "kinds":[],
            "name":"Subsampling.rate",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Keep approximately n events from each dataset, optional, cannot be combined with subsampling rate.",
            "choices":[],
            "kinds":[],
            "name":"Keep.n.events",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The random seed",
            "choices":[],
            "kinds":[],
            "name":"Random.seed",
            "numValues":"0-1",
            "defaultValue":"1234567",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"The output FCS file name.",
            "choices":[],
            "kinds":[],
            "name":"Output.file.name",
            "numValues":"0-1",
            "defaultValue":"MergedFCSDataFiles.fcs",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"MergeFCSDataFiles",
    "write":false,
    "tags":["fcs"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00187:1"
}, "180":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A dataset file - .gct, .res",
            "choices":[],
            "kinds":["gct", "res"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A class file - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"reference label for samples in the data matrix file",
            "choices":[],
            "kinds":[],
            "name":"sample.reference.label",
            "numValues":"0-1",
            "defaultValue":"Hybridization REF",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"reference label for features in the data matrix file",
            "choices":[],
            "kinds":[],
            "name":"feature.reference.label",
            "numValues":"0-1",
            "defaultValue":"CompositeElement REF",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"label that specifies the type of intensity values in data matrix file ",
            "choices":[],
            "kinds":[],
            "name":"intensity.type.label",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"prefix to use for output file name",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ConvertToMAGETAB",
    "write":false,
    "tags":["txt"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00188:2"
}, "181":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset file - .gct, .res",
            "choices":[],
            "kinds":["gct", "res"],
            "name":"dataset.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The chip platform",
            "choices":[],
            "kinds":["chip"],
            "name":"chip.platform",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Collapse mode for probe sets => 1 gene",
            "choices":["Median", "Maximum"],
            "kinds":[],
            "name":"collapse.mode",
            "numValues":"0-1",
            "defaultValue":"Maximum",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file.name",
            "numValues":"0-1",
            "defaultValue":"<dataset.file_basename>.collapsed",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"CollapseDataset",
    "write":false,
    "tags":["gct", "res", "txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00134:1"
}, "182":{
    "category":"Projection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The model .gct data file",
            "choices":[],
            "kinds":["gct"],
            "name":"model.gct.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The model .cls data file",
            "choices":[],
            "kinds":["cls"],
            "name":"model.cls.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The pre-processing parameters for the model dataset",
            "choices":[],
            "kinds":["txt"],
            "name":"model.preprocessing.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The test .gct or zip of .gct data files",
            "choices":[],
            "kinds":["gct"],
            "name":"test.gct.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The test .cls or zip of .cls data files",
            "choices":[],
            "kinds":["cls"],
            "name":"test.cls.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The pre-processing parameters for the test dataset",
            "choices":[],
            "kinds":["txt"],
            "name":"test.preprocessing.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Number of characters to use to identify classes from the .cls files",
            "choices":[],
            "kinds":[],
            "name":"num.characters",
            "numValues":"0-1",
            "defaultValue":"9",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Prefix to name output files",
            "choices":[],
            "kinds":[],
            "name":"identifier",
            "numValues":"0-1",
            "defaultValue":"<model.gct.file_basename>.output",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Number of metagenes in projection",
            "choices":[],
            "kinds":[],
            "name":"k.projection",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Algorithm for Metagene Projection",
            "choices":["NMF.div=NMF w/ divergence", "NMF=NMF", "NSNMF.div=NSNMF w/ divergence", "SNMF=SNMF", "PCA=PCA"],
            "kinds":[],
            "name":"algorithm",
            "numValues":"0-1",
            "defaultValue":"NMF.div",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Number of algorithm iterations",
            "choices":[],
            "kinds":[],
            "name":"number.of.iterations",
            "numValues":"0-1",
            "defaultValue":"2000",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Random seed to initialize metagene matrices (Note: results may only be reproducible on the same platform)",
            "choices":[],
            "kinds":[],
            "name":"seed",
            "numValues":"0-1",
            "defaultValue":"1234",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"apply post-projection normalization",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"post.projection.normalization",
            "numValues":"0-1",
            "defaultValue":"T",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"row-normalize (standardize) the rows in the heat map",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"heatmap.row.norm",
            "numValues":"0-1",
            "defaultValue":"T",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["1=vintage pinkogram", "2=scale of grays", "4=high resolution pinkogram", "6=reddish color map"],
            "kinds":[],
            "name":"heatmap.color.scheme",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Confidence threshold (Brier score) to separate call from no-calls",
            "choices":[],
            "kinds":[],
            "name":"confidence.threshold",
            "numValues":"0-1",
            "defaultValue":"0.3",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Plotting colors for phenotypes",
            "choices":[],
            "kinds":["txt"],
            "name":"phenotype.plotting.colors",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Plotting symbols for phenotypes",
            "choices":[],
            "kinds":["txt"],
            "name":"phenotype.plotting.symbols",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Graphical scaling for symbols in plots and plot legends",
            "choices":[],
            "kinds":[],
            "name":"symbol.scaling",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Kernel function for SVM",
            "choices":["radial=radial", "linear=linear"],
            "kinds":[],
            "name":"kernel",
            "numValues":"0-1",
            "defaultValue":"radial",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"cost function for SVM",
            "choices":[],
            "kinds":[],
            "name":"cost",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Gamma coefficient for radial base function kernel",
            "choices":[],
            "kinds":[],
            "name":"gamma",
            "numValues":"0-1",
            "defaultValue":"0.05",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Smoothing parameter only used for the NSNMF.div algorithm",
            "choices":[],
            "kinds":[],
            "name":"theta",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Sparse parameter used only for the SNMF algorithm",
            "choices":[],
            "kinds":[],
            "name":"lambda",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"perform model set refinement",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"model.set.refinement",
            "numValues":"0-1",
            "defaultValue":"T",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"MetageneProjection",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00092:1"
}, "183":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"data file - .gct, .res, .odf",
            "choices":[],
            "kinds":["gct", "res", "Dataset"],
            "name":"data.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"reference gene accession from data file to find neighbors for",
            "choices":[],
            "kinds":[],
            "name":"gene.accession",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"number of neighbors to find",
            "choices":[],
            "kinds":[],
            "name":"num.neighbors",
            "numValues":"0-1",
            "defaultValue":"50",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"output filename for analysis results - .odf file",
            "choices":[],
            "kinds":[],
            "name":"marker.list.file",
            "numValues":"0-1",
            "defaultValue":"<data.filename_basename>.markerlist",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"output filename raw data for selected markers - .gct file",
            "choices":[],
            "kinds":[],
            "name":"marker.dataset.file",
            "numValues":"0-1",
            "defaultValue":"<data.filename_basename>.markerdata",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"continuous metric for finding neighbors",
            "choices":["0=Cosine distance", "1=Euclidean distance", "2=Manhattan distance", "3=Pearson distance"],
            "kinds":[],
            "name":"distance.metric",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"if no, values below will be ignored",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"filter.data",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"minimum threshold for data",
            "choices":[],
            "kinds":[],
            "name":"min.threshold",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"maximum threshold for data",
            "choices":[],
            "kinds":[],
            "name":"max.threshold",
            "numValues":"0-1",
            "defaultValue":"16000",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"minimum fold difference for filtering genes",
            "choices":[],
            "kinds":[],
            "name":"min.fold.diff",
            "numValues":"0-1",
            "defaultValue":"5",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"minimum absolute difference for filtering genes",
            "choices":[],
            "kinds":[],
            "name":"min.abs.diff",
            "numValues":"0-1",
            "defaultValue":"50",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"GeneNeighbors",
    "write":false,
    "tags":["Gene List", "gct"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00007:3"
}, "184":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A membership.txt or member.txt file output from one of the FLAME modules.",
            "choices":[],
            "kinds":["txt"],
            "name":"FLAMEContourDataGenerator1.membership.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A parameters.txt file output from one of the FLAME modules.",
            "choices":[],
            "kinds":["txt"],
            "name":"FLAMEContourDataGenerator1.parameters.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A comma separated list of the index or names of three channels/antibodies to plot",
            "choices":[],
            "kinds":[],
            "name":"FLAMEContourDataGenerator1.channels.to.plot",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A prefix for output files",
            "choices":[],
            "kinds":[],
            "name":"FLAMEContourDataGenerator1.output.prefix",
            "numValues":"0-1",
            "defaultValue":"flame_contour",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEContourViewer.Pipeline",
    "write":false,
    "tags":[],
    "type":"pipeline",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.pipeline:00011:2"
}, "185":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset file - .res, .gct",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"expression.dataset",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Gene sets database from GSEA website.",
            "choices":["c1.all.v3.0.symbols.gmt=c1.all.v3.0.symbols.gmt [Positional]", "c2.all.v3.0.symbols.gmt=c2.all.v3.0.symbols.gmt [Curated]", "c2.cgp.v3.0.symbols.gmt=c2.cgp.v3.0.symbols.gmt [Curated]", "c2.cp.v3.0.symbols.gmt=c2.cp.v3.0.symbols.gmt [Curated]", "c2.cp.biocarta.v3.0.symbols.gmt=c2.cp.biocarta.v3.0.symbols.gmt [Curated]", "c2.cp.kegg.v3.0.symbols.gmt=c2.cp.kegg.v3.0.symbols.gmt [Curated]", "c2.cp.reactome.v3.0.symbols.gmt=c2.cp.reactome.v3.0.symbols.gmt [Curated]", "c3.all.v3.0.symbols.gmt=c3.all.v3.0.symbols.gmt [Motif]", "c3.mir.v3.0.symbols.gmt=c3.mir.v3.0.symbols.gmt [Motif]", "c3.tft.v3.0.symbols.gmt=c3.tft.v3.0.symbols.gmt [Motif]", "c4.all.v3.0.symbols.gmt=c4.all.v3.0.symbols.gmt [Computational]", "c4.cgn.v3.0.symbols.gmt=c4.cgn.v3.0.symbols.gmt [Computational]", "c4.cm.v3.0.symbols.gmt=c4.cm.v3.0.symbols.gmt [Computational]", "c5.all.v3.0.symbols.gmt=c5.all.v3.0.symbols.gmt [Gene Ontology]", "c5.bp.v3.0.symbols.gmt=c5.bp.v3.0.symbols.gmt [Gene Ontology]", "c5.cc.v3.0.symbols.gmt=c5.cc.v3.0.symbols.gmt [Gene Ontology]", "c5.mf.v3.0.symbols.gmt=c5.mf.v3.0.symbols.gmt [Gene Ontology]"],
            "kinds":[],
            "name":"gene.sets.database",
            "numValues":"0-1",
            "defaultValue":"c1.all.v3.0.symbols.gmt",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets database - .gmt, .gmx, .grp. Upload a gene set if your gene set is not listed as a choice for the gene sets database parameter.",
            "choices":[],
            "kinds":["gmt", "gmx", "grp"],
            "name":"gene.sets.database.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Number of permutations to perform",
            "choices":[],
            "kinds":[],
            "name":"number.of.permutations",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Cls file - .cls, must be binary",
            "choices":[],
            "kinds":["cls"],
            "name":"phenotype.labels",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Select true to have GSEA collapse each probe set in the expression dataset into a single vector for the gene, which gets identified by its gene symbol.",
            "choices":["false", "true"],
            "kinds":[],
            "name":"collapse.dataset",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Type of permutations to perform",
            "choices":["phenotype", "gene_set"],
            "kinds":[],
            "name":"permutation.type",
            "numValues":"0-1",
            "defaultValue":"phenotype",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Chip file from GSEA website.",
            "choices":["ftp.broadinstitute.org://pub/gsea/annotations/GENE_SYMBOL.chip=GENE_SYMBOL.chip", "ftp.broadinstitute.org://pub/gsea/annotations/SEQ_ACCESSION.chip=SEQ_ACCESSION.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubA.chip=Hu35KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubB.chip=Hu35KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubC.chip=Hu35KsubC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubD.chip=Hu35KsubD.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu6800.chip=Hu6800.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_Focus.chip=HG_Focus.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133A.chip=HG_U133A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133AAOFAV2.chip=HG_U133AAOFAV2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133A_2.chip=HG_U133A_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133B.chip=HG_U133B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133_Plus_2.chip=HG_U133_Plus_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95Av2.chip=HG_U95Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95B.chip=HG_U95B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95C.chip=HG_U95C.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95D.chip=HG_U95D.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95E.chip=HG_U95E.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AFFYMETRIX.chip=AFFYMETRIX.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AG.chip=AG.chip", "ftp.broadinstitute.org://pub/gsea/annotations/APPLERA_ABI1700.chip=APPLERA_ABI1700.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ATH1_121501.chip=ATH1_121501.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1A.chip=Agilent_Human1A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1Av2.chip=Agilent_Human1Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1B.chip=Agilent_Human1B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1_cDNA.chip=Agilent_Human1_cDNA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_HumanGenome.chip=Agilent_HumanGenome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseDev.chip=Agilent_MouseDev.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseGenome.chip=Agilent_MouseGenome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseOligo.chip=Agilent_MouseOligo.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Mouse_cDNA.chip=Agilent_Mouse_cDNA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_RatGenome_G4131A.chip=Agilent_RatGenome_G4131A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_RatOligo.chip=Agilent_RatOligo.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AtlasMouse1.2.chip=AtlasMouse1.2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AtlasRat1.2.chip=AtlasRat1.2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/BIAO.chip=BIAO.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Bovine.chip=Bovine.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CNMCMuscleChip.chip=CNMCMuscleChip.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Caltech16KMouse.chip=Caltech16KMouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Caltech16KOligoMouse.chip=Caltech16KOligoMouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Canine_2.chip=Canine_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Clontech_Atlas_13K.chip=Clontech_Atlas_13K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Clontech_BD_Atlas.chip=Clontech_BD_Atlas.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_Human_Whole_Genome.chip=CodeLink_Human_Whole_Genome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_20K_I_Bioarray.chip=CodeLink_UniSet_Human_20K_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_II_Bioarray.chip=CodeLink_UniSet_Human_II_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_I_Bioarray.chip=CodeLink_UniSet_Human_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Rat_I_Bioarray.chip=CodeLink_UniSet_Rat_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/DrosGenome1.chip=DrosGenome1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Drosophila_2.chip=Drosophila_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/G4110A.chip=G4110A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/G4110Av2.chip=G4110Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/GenosysCytokineV2.chip=GenosysCytokineV2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HC_G110.chip=HC_G110.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HPCGGCompugenAnnotations.chip=HPCGGCompugenAnnotations.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HT_HG_U133A.chip=HT_HG_U133A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HT_HG_U133A_EA.chip=HT_HG_U133A_EA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HU6800.chip=HU6800.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illimina_Mus6_v1_1.chip=Illimina_Mus6_v1_1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illimuna_Mus6_v1.chip=Illimuna_Mus6_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Hum6_v1.chip=Illumina_Hum6_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Hum6_v2.chip=Illumina_Hum6_v2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_HumRef8_v1.chip=Illumina_HumRef8_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_HumRef8_v2.chip=Illumina_HumRef8_v2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Human.chip=Illumina_Human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_MusRef8_v1.chip=Illumina_MusRef8_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_MusRef8_v1_1.chip=Illumina_MusRef8_v1_1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_RatRef12_v1.chip=Illumina_RatRef12_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Av2.chip=MG_U74Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Bv2.chip=MG_U74Bv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Cv2.chip=MG_U74Cv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MOE430A.chip=MOE430A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MOE430B.chip=MOE430B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MWG_Human_30K_A.chip=MWG_Human_30K_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MWG_Human_30K_B.chip=MWG_Human_30K_B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mouse430A_2.chip=Mouse430A_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mouse430_2.chip=Mouse430_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu11KsubA.chip=Mu11KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu11KsubB.chip=Mu11KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubA.chip=Mu19KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubB.chip=Mu19KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubC.chip=Mu19KsubC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/NIA15k.chip=NIA15k.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Netherland_cancer_institute_operon_human_35k.chip=Netherland_cancer_institute_operon_human_35k.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Netherland_cancer_institute_operon_mouse_FOOk.chip=Netherland_cancer_institute_operon_mouse_FOOk.chip", "ftp.broadinstitute.org://pub/gsea/annotations/OPERON_HUMANv2.chip=OPERON_HUMANv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/OPERON_HUMANv3.chip=OPERON_HUMANv3.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RAE230A.chip=RAE230A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RAE230B.chip=RAE230B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34A.chip=RG_U34A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34B.chip=RG_U34B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34C.chip=RG_U34C.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RN_U34.chip=RN_U34.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RT_U34.chip=RT_U34.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_Ensembl1.1.chip=RZPD_Human_Ensembl1.1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_ORF_Clones_Gateway.chip=RZPD_Human_ORF_Clones_Gateway.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_Unigene3.1.chip=RZPD_Human_Unigene3.1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rat230_2.chip=Rat230_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Human.chip=RefSeq_NP_Human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Mouse.chip=RefSeq_NP_Mouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Rat.chip=RefSeq_NP_Rat.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_human.chip=RefSeq_human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Research_Genetics.chip=Research_Genetics.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rosetta.chip=Rosetta.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rosetta50K.chip=Rosetta50K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Stanford.chip=Stanford.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Stanford_Source_Accessions.chip=Stanford_Source_Accessions.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TIGR_31K_Human_Set.chip=TIGR_31K_Human_Set.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TIGR_40K_Human_Set.chip=TIGR_40K_Human_Set.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC.chip=TRC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC_DB.chip=TRC_DB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC_DB_v1.chip=TRC_DB_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/U133_X3P.chip=U133_X3P.chip", "ftp.broadinstitute.org://pub/gsea/annotations/UCLA_NIH_33K.chip=UCLA_NIH_33K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Zebrafish.chip=Zebrafish.chip", "ftp.broadinstitute.org://pub/gsea/annotations/labonweb_human.chip=labonweb_human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/lymphochip.chip=lymphochip.chip"],
            "kinds":[],
            "name":"chip.platform",
            "numValues":"0-1",
            "defaultValue":"ftp.broadinstitute.org://pub/gsea/annotations/GENE_SYMBOL.chip",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Chip to use. Upload a chip file if your chip is not listed as a choice for the chip platform parameter.",
            "choices":[],
            "kinds":[],
            "name":"chip.platform.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The statistic used to score hits (gene set members) and misses (non-members)",
            "choices":["classic", "weighted", "weighted_p2", "weighted_p1.5"],
            "kinds":[],
            "name":"scoring.scheme",
            "numValues":"0-1",
            "defaultValue":"weighted",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Class separation metric - gene markers are ranked using this metric to produce the gene list",
            "choices":["Cosine", "Euclidean", "Manhattan", "Pearson", "FeatureVariation", "tTest", "Signal2Noise", "None", "RegressionSlope", "Bhattacharyya", "Norm.Pearson", "Diff_of_Means", "Diff_of_Medians", "Ratio_of_Means", "Ratio_of_Medians", "log2_ratio_of_means", "Feature_stddev_by_mean"],
            "kinds":[],
            "name":"metric.for.ranking.genes",
            "numValues":"0-1",
            "defaultValue":"Signal2Noise",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Direction in which the gene list should be ordered",
            "choices":["ascending", "descending"],
            "kinds":[],
            "name":"gene.list.ordering.mode",
            "numValues":"0-1",
            "defaultValue":"descending",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Mode in which scores from the gene list should be considered",
            "choices":["real", "abs"],
            "kinds":[],
            "name":"gene.list.sorting.mode",
            "numValues":"0-1",
            "defaultValue":"real",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets larger than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"max.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"500",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Gene sets smaller than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"min.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"15",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Collapsing mode",
            "choices":["Max_probe", "Median_of_probes"],
            "kinds":[],
            "name":"collapsing.mode.for.probe.sets.with.more.than.one.match",
            "numValues":"0-1",
            "defaultValue":"Max_probe",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Normalization mode",
            "choices":["meandiv", "None"],
            "kinds":[],
            "name":"normalization.mode",
            "numValues":"0-1",
            "defaultValue":"meandiv",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Type of phenotype randomization (does not apply to gene set permutations)",
            "choices":["equalize_and_balance", "no_balance"],
            "kinds":[],
            "name":"randomization.mode",
            "numValues":"0-1",
            "defaultValue":"no_balance",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"If there is no known gene symbol match for a probe set, omit it from the collapsed dataset",
            "choices":["false", "true"],
            "kinds":[],
            "name":"omit.features.with.no.symbol.match",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Create detailed gene set report (heat map, mountain plot, etc.) for every enriched gene set",
            "choices":["false", "true"],
            "kinds":[],
            "name":"make.detailed.gene.set.report",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Use the median of each class instead of the mean for the class separation metrics",
            "choices":["true", "false"],
            "kinds":[],
            "name":"median.for.class.metrics",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Number of markers",
            "choices":[],
            "kinds":[],
            "name":"number.of.markers",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Plot GSEA mountain and related plots for the top sets of each phenotype",
            "choices":[],
            "kinds":[],
            "name":"plot.graphs.for.the.top.sets.of.each.phenotype",
            "numValues":"0-1",
            "defaultValue":"20",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Seed to use for randomization",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"timestamp",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to save random ranked lists",
            "choices":["false", "true"],
            "kinds":[],
            "name":"save.random.ranked.lists",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.file.name",
            "numValues":"0-1",
            "defaultValue":"<expression.dataset_basename>.zip",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"GSEA",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"10",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00072:10"
}, "186":{
    "category":"Proteomics",
    "description":"description goes here",
     "inputs":[
        {
            "description":"List of peptide sequences (one per line, no column header)",
            "choices":[],
            "kinds":["txt", "csv"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"ESPPredictor",
    "write":false,
    "tags":["csv"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00158:2"
}, "116":{
    "category":"Proteomics",
    "description":"description goes here",
     "inputs":[
        {
            "description":"List of peptide sequences (one per line, no column header)",
            "choices":[],
            "kinds":["txt", "csv"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"ESPPredictor",
    "write":false,
    "tags":["csv"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00158:1"
}, "117":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input filename - .res, .gct, .odf type=Dataset",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"output file",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>.unique",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"whether to make the row labels unique",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"make.row.labels.unique",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"whether to make the column labels unique",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"make.column.labels.unique",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"UniquifyLabels",
    "write":false,
    "tags":["res", "gct", "Dataset"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00067:1"
}, "114":{
    "category":"Prediction",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input sequence and annotation information in .FASTA format.",
            "choices":[],
            "kinds":["FASTA"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The number of folds should be an integer greater than or equal to two.",
            "choices":[],
            "kinds":[],
            "name":"num.folds",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The name of the substitution matrix used by Blast.",
            "choices":["PAM30=PAM30", " PAM70=PAM70", " BLOSUM45=BLOSUM45", " BLOSUM62=BLOSUM62", " BLOSUM80=BLOSUM80"],
            "kinds":[],
            "name":"sub.matrix",
            "numValues":"0-1",
            "defaultValue":"PAM30",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The name of the output file for prediction results.",
            "choices":[],
            "kinds":[],
            "name":"pred.results.file",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"BlastXValidation",
    "write":false,
    "tags":["Prediction Results"],
    "type":"module",
    "version":"0.5",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00142:0.5"
}, "115":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The first prediction file in .odf format.",
            "choices":[],
            "kinds":["Prediction Results"],
            "name":"pred1.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The second prediction file in .odf format.",
            "choices":[],
            "kinds":["Prediction Results"],
            "name":"pred2.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Weight assigned to classifier that produced first prediction file.",
            "choices":[],
            "kinds":[],
            "name":"pred1.file.weight",
            "numValues":"0-1",
            "defaultValue":"0.5",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"The name of the prediction file in modified .odf format.",
            "choices":[],
            "kinds":[],
            "name":"pred.file",
            "numValues":"0-1",
            "defaultValue":"<pred1.file_basename>_<pred2.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"CombineOdf",
    "write":false,
    "tags":["Prediction Results"],
    "type":"module",
    "version":"0.4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00140:0.4"
}, "112":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The sequence information in .FASTA format",
            "choices":[],
            "kinds":["FASTA"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Use amino acid sequence length (1 feature)",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"feature.set.1",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Use amino acid composition (20 features)",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"feature.set.2",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Use reduced alphabet composition of the n terminal region (19 features)",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"feature.set.3",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Use reduced alphabet composition of the c terminal region (19 features)",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"feature.set.4",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "fileChoice":true
        },
        {
            "description":"Use the reduced alphabet for the gap pairs of amino acids (165 features)",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"feature.set.5",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The output files base name",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ProteinDatasetCreation",
    "write":false,
    "tags":["arff", "cls", "gct"],
    "type":"module",
    "version":"0.4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00139:0.4"
}, "113":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The dataset in ARFF format. Multi-label class names are separated by colons (:). - .arff",
            "choices":[],
            "kinds":["arff"],
            "name":"arff.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Name to give the .gct containing dataset features and .cls containing dataset class labels output files.",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<arff.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Arff2Gct",
    "write":false,
    "tags":["cls", "gct"],
    "type":"module",
    "version":"0.4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00137:0.4"
}, "110":{
    "category":"Prediction",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input features and class label information in .arff format",
            "choices":[],
            "kinds":["arff"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The number of folds should be an integer greater than or equal to two.",
            "choices":[],
            "kinds":[],
            "name":"num.folds",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The name of the base classifier to use",
            "choices":["0=J48 (decision tree)", "1=SMO (svm)", "2=MultiLayerPerception (Neural Net)", "3=NaiveBayes", "4=IBk (k nearest neighbor)"],
            "kinds":[],
            "name":"base.classifier",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The base classifier multiplier",
            "choices":["1=1 per class", "2=2 per class", "4=4 per class", "8=8 per class"],
            "kinds":[],
            "name":"base.multiplier",
            "numValues":"0-1",
            "defaultValue":"4",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The name of the output file for prediction results.",
            "choices":[],
            "kinds":[],
            "name":"pred.results.file",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ModEcocXValidation",
    "write":false,
    "tags":["Prediction Results"],
    "type":"module",
    "version":"0.3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00144:0.3"
}, "111":{
    "category":"Prediction",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The training features and class label information in .arff format",
            "choices":[],
            "kinds":["arff"],
            "name":"train.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The testing features and possible class label information in .arff format",
            "choices":[],
            "kinds":["arff"],
            "name":"test.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Input modEcocTrainTest model",
            "choices":[],
            "kinds":["model"],
            "name":"saved.model.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Output modEcocTrainTest model",
            "choices":[],
            "kinds":[],
            "name":"model.output.file",
            "numValues":"0-1",
            "defaultValue":"<train.file_basename>.model",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The name of the base classifier to use",
            "choices":["0=J48 (decision tree)", "1=SMO (svm)", "2=MultiLayerPerception (Neural Net)", "3=NaiveBayes", "4=IBk (k nearest neighbor)"],
            "kinds":[],
            "name":"base.classifier",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The base classifier multiplier",
            "choices":["1=1 per class", "2=2 per class", "4=4 per class", "8=8 per class"],
            "kinds":[],
            "name":"base.multiplier",
            "numValues":"0-1",
            "defaultValue":"4",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The name of the output file for prediction results.",
            "choices":[],
            "kinds":[],
            "name":"pred.results.output.file",
            "numValues":"0-1",
            "defaultValue":"<test.file_basename>",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ModEcocTrainTest",
    "write":false,
    "tags":["model", "Prediction Results"],
    "type":"module",
    "version":"0.5",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00143:0.5"
}, "118":{
    "category":"Clustering",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input data file name - .gct, .res, .odf type = Dataset",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"distance measure for column (sample) clustering",
            "choices":["0=No column clustering", "1=Uncentered correlation", "2=Pearson correlation", "3=Uncentered correlation, absolute value", "4=Pearson correlation, absolute value", "5=Spearman's rank correlation", "6=Kendall's tau", "7=Euclidean distance", "8=City-block distance"],
            "kinds":[],
            "name":"column.distance.measure",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"distance measure for row (gene) clustering NOTE: Filtering beforehand is recommended since row clustering is computationally intensive.",
            "choices":["0=No row clustering", "1=Uncentered correlation", "2=Pearson correlation", "3=Uncentered correlation, absolute value", "4=Pearson correlation, absolute value", "5=Spearman's rank correlation", "6=Kendall's tau", "7=Euclidean distance", "8=City-block distance"],
            "kinds":[],
            "name":"row.distance.measure",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"hierarchical clustering method to use",
            "choices":["m=Pairwise complete-linkage", "s=Pairwise single-linkage", "c=Pairwise centroid-linkage", "a=Pairwise average-linkage"],
            "kinds":[],
            "name":"clustering.method",
            "numValues":"0-1",
            "defaultValue":"m",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"log-transform the data before clustering",
            "choices":["=no", "-l=yes"],
            "kinds":[],
            "name":"log.transform",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"whether to center each row (gene) in the data",
            "choices":["=no", "mean.row=Subtract the mean of each row", "median.row=Subtract the median of each row"],
            "kinds":[],
            "name":"row.center",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"whether to normalize each row (gene) in the data",
            "choices":["=no", "-ng=yes"],
            "kinds":[],
            "name":"row.normalize",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"whether to center each column (sample) in the data",
            "choices":["=no", "mean.column=Subtract the mean of each column", "median.column=Subtract the median of each column"],
            "kinds":[],
            "name":"column.center",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"whether to normalize each column (sample) in the data",
            "choices":["=no", "-na=yes"],
            "kinds":[],
            "name":"column.normalize",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"base name for output files",
            "choices":[],
            "kinds":[],
            "name":"output.base.name",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"HierarchicalClustering",
    "write":false,
    "tags":["gtr", "atr", "cdt"],
    "type":"module",
    "version":"5",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00009:5"
}, "119":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Clustered data table, contains the original data, but reordered",
            "choices":[],
            "kinds":["cdt"],
            "name":"cdt.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Gene tree file, records the order in which genes (rows) were joined (at least one of gtr file and atr file is required)",
            "choices":[],
            "kinds":["gtr"],
            "name":"gtr.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Array tree file, records the order in which samples (columns) were joined (at least one of gtr file and atr file is required)",
            "choices":[],
            "kinds":["atr"],
            "name":"atr.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"HierarchicalClusteringViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"8",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00031:8"
}, "125":{
    "category":"FLAME",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A .zip file containing flow files in .txt or .fcs format. (The files should be all .txt or all .fcs, but not both.)",
            "choices":[],
            "kinds":["zip"],
            "name":"dataset",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"File type of input sample data.",
            "choices":["fcs", "txt"],
            "kinds":[],
            "name":"file.type",
            "numValues":"0-1",
            "defaultValue":"fcs",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The original data scale. 18-bit (default) or 4-decade.",
            "choices":["262144=18-bit", "10000=4-decade"],
            "kinds":[],
            "name":"data.scale",
            "numValues":"0-1",
            "defaultValue":"262144",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Whether to attempt removing dead cells from the samples.",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"remove.dead",
            "numValues":"0-1",
            "defaultValue":"F",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A comma-separated list of channel numbers indicating which columns (antibodies) to keep (e.g., 1, 2, 3, 7).",
            "choices":[],
            "kinds":[],
            "name":"channels",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A comma-separated list of channel/antibody names that corresponds to the channel numbers (e.g., FSC, SSC, CD4, CD45RA).",
            "choices":[],
            "kinds":[],
            "name":"channel.names",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A prefix for output files",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<dataset_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEPreprocess",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00159:1"
}, "126":{
    "category":"FLAME",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A .zip file containing preprocessed flow sample files in tab-delimited .txt format.",
            "choices":[],
            "kinds":["zip"],
            "name":"preprocessed.data",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"An integer; minimal number of clusters to be fit for each sample.",
            "choices":[],
            "kinds":[],
            "name":"g.min",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"An integer; maximal number of clusters to be fit for each sample. g max should be greater or equal to g min.",
            "choices":[],
            "kinds":[],
            "name":"g.max",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Density distribution to be used for clustering",
            "choices":["normal", "t", "skewn=skew normal", "skewt=skew t"],
            "kinds":[],
            "name":"density",
            "numValues":"0-1",
            "defaultValue":"skewt",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A comma-separated list of channel numbers; these denote which antibodies in the (preprocessed) data sample to be used for clustering.",
            "choices":[],
            "kinds":[],
            "name":"channels.to.cluster",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Used only for skew distributions. Step is used to calculate the number of iterations of the Expectation-Maximization(EM) algorithm to perform when computing the Maximum Likelihood(ML) estimate. The value must be greater than 0 and less than 1. The smaller the increment, the more accurate the estimation, but the slower the estimation step.",
            "choices":[],
            "kinds":[],
            "name":"estimation.increment",
            "numValues":"0-1",
            "defaultValue":"0.5",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"An integer; the seed fixes random computational processes during computation. This does not need to be changed under most circumstances.",
            "choices":[],
            "kinds":[],
            "name":"seed",
            "numValues":"0-1",
            "defaultValue":"123456",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"A prefix for output files.",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<preprocessed.data_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEMixtureModel",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00160:1"
}, "127":{
    "category":"FLAME",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A .zip file containing mixture modeling results from the FLAMEMixtureModel module",
            "choices":[],
            "kinds":["zip"],
            "name":"mixture.model",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Criterion used for determining optimal number of clusters",
            "choices":["AIC=Akaike Information Criterion (AIC)", "BIC=Bayesian Information Criterion (BIC)", "SWR=Scale-free Weighted Ratio (SWR)", "distance.ratio=distance ratio", "intercluster.distance=intercluster distance"],
            "kinds":[],
            "name":"method",
            "numValues":"0-1",
            "defaultValue":"SWR",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"An integer; the seed fixes random computational processes during computation. This does not need to be changed under most circumstances.",
            "choices":[],
            "kinds":[],
            "name":"seed",
            "numValues":"0-1",
            "defaultValue":"123456",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"A prefix for output files",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<mixture.model_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEChooseOptimalClusterNumber",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00161:1"
}, "300":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A prebuilt Bowtie 2 index. Either a prebuilt or a custom Bowtie 2 index must be specified.",
            "choices":["=", "Arabidopsis_thaliana_Ensembl_TAIR10=Arabidopsis thaliana Ensembl TAIR10", "Arabidopsis_thaliana_Ensembl_TAIR9=Arabidopsis thaliana Ensembl TAIR9", "Arabidopsis_thaliana_NCBI_TAIR10=Arabidopsis thaliana NCBI TAIR10", "Arabidopsis_thaliana_NCBI_build9_1=Arabidopsis thaliana NCBI build9 1", "Bacillus_cereus_ATCC_10987_NCBI_2004-02-13=Bacillus cereus ATCC 10987 NCBI 2004-02-13", "Bacillus_subtilis_168_Ensembl_EB2=Bacillus subtilis 168 Ensembl EB2", "Bos_taurus_NCBI_UMD_3_1=Bos taurus NCBI UMD 3.1", "Bos_taurus_UCSC_bosTau7=Bos taurus UCSC bosTau7", "Caenorhabditis_elegans_Ensembl_WBcel215=Caenorhabditis elegans Ensembl WBcel215", "Caenorhabditis_elegans_Ensembl_WS220=Caenorhabditis elegans Ensembl WS220", "Caenorhabditis_elegans_NCBI_WS195=Caenorhabditis elegans NCBI WS195", "Caenorhabditis_elegans_UCSC_ce10=Caenorhabditis elegans UCSC ce10", "Caenorhabditis_elegans_UCSC_ce6=Caenorhabditis elegans UCSC ce6", "Canis_familiaris_Ensembl_BROADD2=Canis familiaris Ensembl BROADD2", "Canis_familiaris_Ensembl_CanFam3_1=Canis familiaris Ensembl CanFam3.1", "Canis_familiaris_NCBI_build2_1=Canis familiaris NCBI build2 1", "Canis_familiaris_NCBI_build3_1=Canis familiaris NCBI build3.1", "Drosophila_melanogaster_Ensembl_BDGP5=Drosophila melanogaster Ensembl BDGP5", "Drosophila_melanogaster_NCBI_build5_41=Drosophila melanogaster NCBI build5.41", "Drosophila_melanogaster_UCSC_dm3=Drosophila melanogaster UCSC dm3", "Escherichia_coli_K_12_DH10B_Ensembl_EB1=Escherichia coli K-12 DH10B Ensembl EB1", "Escherichia_coli_K_12_DH10B_NCBI_2008-03-17=Escherichia coli K-12 DH10B NCBI 2008-03-17", "Escherichia_coli_K_12_MG1655_NCBI_2001-10-15=Escherichia coli K-12 MG1655 NCBI 2001-10-15", "Homo_sapiens_Ensembl_GRCh37=Homo sapiens Ensembl GRCh37", "Homo_sapiens_NCBI_build37_2=Homo sapiens NCBI build37.2", "Homo_sapiens_UCSC_hg18=Homo sapiens UCSC hg18", "Homo_sapiens_UCSC_hg19=Homo sapiens UCSC hg19", "Mus_musculus_Ensembl_GRCm38=Mus musculus Ensembl GRCm38", "Mus_musculus_NCBI_GRCm38=Mus musculus NCBI GRCm38", "Mus_musculus_UCSC_mm10=Mus musculus UCSC mm10", "Mus_musculus_UCSC_mm9=Mus musculus UCSC mm9", "Mycobacterium_tuberculosis_H37RV_Ensembl_H37Rv_EB1=Mycobacterium tuberculosis H37RV Ensembl H37Rv EB1", "Mycobacterium_tuberculosis_H37RV_NCBI_2001-09-07=Mycobacterium tuberculosis H37RV NCBI 2001-09-07", "Rattus_norvegicus_Ensembl_RGSC3_4=Rattus norvegicus Ensembl RGSC3 4", "Rattus_norvegicus_NCBI_RGSC_v3_4=Rattus norvegicus NCBI RGSC v3.4", "Rattus_norvegicus_NCBI_Rnor_5_0=Rattus norvegicus NCBI Rnor 5.0", "Saccharomyces_cerevisiae_Ensembl_EF4=Saccharomyces cerevisiae Ensembl EF4", "Saccharomyces_cerevisiae_NCBI_build3_1=Saccharomyces cerevisiae NCBI build3.1", "Saccharomyces_cerevisiae_UCSC_sacCer3=Saccharomyces cerevisiae UCSC sacCer3"],
            "kinds":[],
            "name":"prebuilt.bowtie.index",
            "numValues":"0-1",
            "defaultValue":"Arabidopsis_thaliana_Ensembl_TAIR10",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A ZIP archive containing Bowtie 2 index files. Either a prebuilt or a custom Bowtie 2 index must be specified.",
            "choices":[],
            "kinds":["zip"],
            "name":"custom.bowtie.index",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The format of the reads input files.",
            "choices":["-q=FASTQ", "-f=FASTA", "--qseq=QSEQ", "-r=One sequence per line"],
            "kinds":[],
            "name":"input.format",
            "numValues":"0-1",
            "defaultValue":"-q",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Unpaired reads file or first mate for paired reads. A file or zip of files containing reads in FASTA or FASTQ format (can be compressed - ie .gz).",
            "choices":[],
            "kinds":["bz2", "fa", "fa.bz2", "fa.gz", "fasta", "fasta.bz2", "fasta.gz", "fastq", "fastq.bz2", "fastq.gz", "fn", "fn.bz2", "fn.gz", "fq", "fq.bz2", "fq.gz", "gz", "zip"],
            "name":"reads.pair.1",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Second mate for paired reads. A file or zip of files in FASTA or FASTQ format (can be compressed - ie .gz).",
            "choices":[],
            "kinds":["bz2", "fa", "fa.bz2", "fa.gz", "fasta", "fasta.bz2", "fasta.gz", "fastq", "fastq.bz2", "fastq.gz", "fn", "fn.bz2", "fn.gz", "fq", "fq.bz2", "fq.gz", "gz", "zip"],
            "name":"reads.pair.2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The scale to use for quality values.",
            "choices":["=Phred", "--phred33=Phred plus 33", "--phred64=Phred quality plus 64", "--solexa-quals=Convert Solexa to Phred"],
            "kinds":[],
            "name":"quality.value.scale",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether the quality values are represented as space-separated ASCII integers (i.e 40 40 30 40 ..).",
            "choices":["=no", "--int-quals=yes"],
            "kinds":[],
            "name":"integer.quality.values",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The maximum number of reads to align.",
            "choices":[],
            "kinds":[],
            "name":"max.reads.to.align",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The alignment mode to use.",
            "choices":["--end-to-end=End to end", "--local=Local"],
            "kinds":[],
            "name":"alignment.mode",
            "numValues":"0-1",
            "defaultValue":"--end-to-end",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A combination of pre-packaged options based on speed and sensitivity/accuracy.",
            "choices":["very-fast=Very fast", "fast=Fast", "sensitive=Sensitive", "very-sensitive=Very Sensitive"],
            "kinds":[],
            "name":"preset.options",
            "numValues":"0-1",
            "defaultValue":"sensitive",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The minimum fragment length for valid paired-end alignments.",
            "choices":[],
            "kinds":[],
            "name":"min.fragment.length",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The maximum fragment length for valid paired-end alignments.",
            "choices":[],
            "kinds":[],
            "name":"max.fragment.length",
            "numValues":"0-1",
            "defaultValue":"500",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The upstream/downstream mate orientations for a valid paired-end alignment against the forward reference strand.",
            "choices":["--fr=Pair 1 and 2 upstream of reverse", "--rf=Pair 1 reverse and Pair 2 forward", "--ff=Pair 1 and 2 forward"],
            "kinds":[],
            "name":"mate.orientations",
            "numValues":"0-1",
            "defaultValue":"--fr",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The seed to use for the pseudo-random number generator.",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"123456",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The prefix to use for the output file name.",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<reads.pair.1_basename>_<reads.pair.2_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Bowtie.aligner",
    "write":false,
    "tags":["sam"],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00237:4"
}, "128":{
    "category":"FLAME",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A .zip file containing the optimal mixture modeling result of each sample from the output of the FLAMEchooseG module.",
            "choices":[],
            "kinds":["zip"],
            "name":"optimal.g.mixture.model",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"",
            "choices":[],
            "kinds":["txt"],
            "name":"sample.class",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Used only for skew distributions. Step is used to calculate the number of iterations of the Expectation-Maximization(EM) algorithm to perform when computing the Maximum Likelihood(ML) estimate. The value must be greater than 0 and less than 1. The smaller the increment, the more accurate the estimation, but the slower the estimation step. Must be the same value used in the FLAMEMixtureModel.",
            "choices":[],
            "kinds":[],
            "name":"estimation.increment",
            "numValues":"0-1",
            "defaultValue":"0.5",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Choose whether to output the intermediate metaclustering results, such as within-class matching results.",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"output.intermediate.results",
            "numValues":"0-1",
            "defaultValue":"F",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A prefix for output files.",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<optimal.g.mixture.model_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEMetacluster",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00162:1"
}, "121":{
    "category":"Survival Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input clinical data. Case ID in 1st column (.txt file)",
            "choices":[],
            "kinds":[],
            "name":"input.surv.data.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"input class information (.cls file)",
            "choices":[],
            "kinds":[],
            "name":"input.cls.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"CoxRegression_result",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Column name for survival time",
            "choices":[],
            "kinds":[],
            "name":"time",
            "numValues":"0-1",
            "defaultValue":"time",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Column name for censor (0: censored/alive, 1: event/death)",
            "choices":[],
            "kinds":[],
            "name":"status",
            "numValues":"0-1",
            "defaultValue":"status",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"(e.g. age,labdata1,...)",
            "choices":[],
            "kinds":[],
            "name":"variable.continuous",
            "numValues":"0-1",
            "defaultValue":"NA",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"(e.g. sex,cls,grade,...)",
            "choices":[],
            "kinds":[],
            "name":"variable.category",
            "numValues":"0-1",
            "defaultValue":"NA",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"(e.g. sex:cls,sex:grade,...)",
            "choices":[],
            "kinds":[],
            "name":"variable.interaction.terms",
            "numValues":"0-1",
            "defaultValue":"NA",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Fit is done for each strata",
            "choices":[],
            "kinds":[],
            "name":"strata",
            "numValues":"0-1",
            "defaultValue":"NA",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"(e.g. cls:2) *only one subgroup can be specified",
            "choices":[],
            "kinds":[],
            "name":"input.subgroup",
            "numValues":"0-1",
            "defaultValue":"NA",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"",
            "choices":["none=no", "both=Stepwise selection", "forward=Forward selection", "backward=Backward selection"],
            "kinds":[],
            "name":"variable.selection",
            "numValues":"0-1",
            "defaultValue":"none",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"CoxRegression",
    "write":false,
    "tags":["png", "txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00164:1"
}, "302":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"zip output file from GSEA - .zip. ",
            "choices":[],
            "kinds":["zip"],
            "name":"zip.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"GSEALeadingEdgeViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00073:3"
}, "122":{
    "category":"Survival Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input clinical data (.txt file)",
            "choices":[],
            "kinds":[],
            "name":"input.clin.data.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"input class information (.cls file)",
            "choices":[],
            "kinds":[],
            "name":"input.cls.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"LogisticRegression_result",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"",
            "choices":[],
            "kinds":[],
            "name":"response.variable",
            "numValues":"0-1",
            "defaultValue":"NA",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"variable.continuous",
            "choices":[],
            "kinds":[],
            "name":"variable.continuous",
            "numValues":"0-1",
            "defaultValue":"NA",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"(e.g. sex,cls,grade,...)",
            "choices":[],
            "kinds":[],
            "name":"variable.category",
            "numValues":"0-1",
            "defaultValue":"NA",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"(e.g. sex:cls,sex:grade,...)",
            "choices":[],
            "kinds":[],
            "name":"variable.interaction.terms",
            "numValues":"0-1",
            "defaultValue":"NA",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"(e.g. cls:2) *only one subgroup can be specified",
            "choices":[],
            "kinds":[],
            "name":"input.subgroup",
            "numValues":"0-1",
            "defaultValue":"NA",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"",
            "choices":["none=no", "both=Stepwise selection", "forward=Forward selection", "backward=Backward selection"],
            "kinds":[],
            "name":"variable.selection",
            "numValues":"0-1",
            "defaultValue":"none",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"LogisticRegression",
    "write":false,
    "tags":["txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00165:1"
}, "301":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset file - .res, .gct",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"expression.dataset",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Gene sets database from GSEA website.",
            "choices":["noGeneSetsDB=", "c1.all.v4.0.symbols.gmt=c1.all.v4.0.symbols.gmt [Positional]", "c2.all.v4.0.symbols.gmt=c2.all.v4.0.symbols.gmt [Curated]", "c2.cgp.v4.0.symbols.gmt=c2.cgp.v4.0.symbols.gmt [Curated]", "c2.cp.v4.0.symbols.gmt=c2.cp.v4.0.symbols.gmt [Curated]", "c2.cp.biocarta.v4.0.symbols.gmt=c2.cp.biocarta.v4.0.symbols.gmt [Curated]", "c2.cp.kegg.v4.0.symbols.gmt=c2.cp.kegg.v4.0.symbols.gmt [Curated]", "c2.cp.reactome.v4.0.symbols.gmt=c2.cp.reactome.v4.0.symbols.gmt [Curated]", "c3.all.v4.0.symbols.gmt=c3.all.v4.0.symbols.gmt [Motif]", "c3.mir.v4.0.symbols.gmt=c3.mir.v4.0.symbols.gmt [Motif]", "c3.tft.v4.0.symbols.gmt=c3.tft.v4.0.symbols.gmt [Motif]", "c4.all.v4.0.symbols.gmt=c4.all.v4.0.symbols.gmt [Computational]", "c4.cgn.v4.0.symbols.gmt=c4.cgn.v4.0.symbols.gmt [Computational]", "c4.cm.v4.0.symbols.gmt=c4.cm.v4.0.symbols.gmt [Computational]", "c5.all.v4.0.symbols.gmt=c5.all.v4.0.symbols.gmt [Gene Ontology]", "c5.bp.v4.0.symbols.gmt=c5.bp.v4.0.symbols.gmt [Gene Ontology]", "c5.cc.v4.0.symbols.gmt=c5.cc.v4.0.symbols.gmt [Gene Ontology]", "c5.mf.v4.0.symbols.gmt=c5.mf.v4.0.symbols.gmt [Gene Ontology]", "c6.all.v4.0.symbols.gmt=c6.all.v4.0.symbols.gmt [Oncogenic Signatures]", "c7.all.v4.0.symbols.gmt=c7.all.v4.0.symbols.gmt [Immunologic signatures]"],
            "kinds":[],
            "name":"gene.sets.database",
            "numValues":"0-1",
            "defaultValue":"noGeneSetsDB",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets database - .gmt, .gmx, .grp. Upload a gene set if your gene set is not listed as a choice for the gene sets database parameter.",
            "choices":[],
            "kinds":["gmt", "gmx", "grp"],
            "name":"gene.sets.database.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Number of permutations to perform",
            "choices":[],
            "kinds":[],
            "name":"number.of.permutations",
            "numValues":"0-1",
            "defaultValue":"1000",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Cls file - .cls, must be binary",
            "choices":[],
            "kinds":["cls"],
            "name":"phenotype.labels",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Name of the target phenotype profile. Only applicable if class file defines continuous labels (one or more phenotype profiles). Leave blank if class file defines a discrete phenotype.",
            "choices":[],
            "kinds":[],
            "name":"target.profile",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Select true to have GSEA collapse each probe set in the expression dataset into a single vector for the gene, which gets identified by its gene symbol.",
            "choices":["false", "true"],
            "kinds":[],
            "name":"collapse.dataset",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Type of permutations to perform",
            "choices":["phenotype", "gene_set"],
            "kinds":[],
            "name":"permutation.type",
            "numValues":"0-1",
            "defaultValue":"phenotype",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"DNA Chip (array) annotation file from GSEA website.",
            "choices":["nochip=", "ftp.broadinstitute.org://pub/gsea/annotations/AFFYMETRIX.chip=AFFYMETRIX.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AG.chip=AG.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1_cDNA.chip=Agilent_Human1_cDNA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1A.chip=Agilent_Human1A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1Av2.chip=Agilent_Human1Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1B.chip=Agilent_Human1B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_HumanGenome.chip=Agilent_HumanGenome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Mouse_cDNA.chip=Agilent_Mouse_cDNA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseDev.chip=Agilent_MouseDev.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseGenome.chip=Agilent_MouseGenome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseOligo.chip=Agilent_MouseOligo.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_RatGenome_G4131A.chip=Agilent_RatGenome_G4131A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_RatOligo.chip=Agilent_RatOligo.chip", "ftp.broadinstitute.org://pub/gsea/annotations/APPLERA_ABI1700.chip=APPLERA_ABI1700.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ATH1_121501.chip=ATH1_121501.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AtlasMouse1.2.chip=AtlasMouse1.2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AtlasRat1.2.chip=AtlasRat1.2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/BIAO.chip=BIAO.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Bovine.chip=Bovine.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Caltech16KMouse.chip=Caltech16KMouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Caltech16KOligoMouse.chip=Caltech16KOligoMouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Canine_2.chip=Canine_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Clontech_Atlas_13K.chip=Clontech_Atlas_13K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Clontech_BD_Atlas.chip=Clontech_BD_Atlas.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CNMCMuscleChip.chip=CNMCMuscleChip.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_Human_Whole_Genome.chip=CodeLink_Human_Whole_Genome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_20K_I_Bioarray.chip=CodeLink_UniSet_Human_20K_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_I_Bioarray.chip=CodeLink_UniSet_Human_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_II_Bioarray.chip=CodeLink_UniSet_Human_II_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Rat_I_Bioarray.chip=CodeLink_UniSet_Rat_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/DrosGenome1.chip=DrosGenome1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Drosophila_2.chip=Drosophila_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/G4110A.chip=G4110A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/G4110Av2.chip=G4110Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/GenosysCytokineV2.chip=GenosysCytokineV2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HC_G110.chip=HC_G110.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_Focus.chip=HG_Focus.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133_Plus_2.chip=HG_U133_Plus_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133A_2.chip=HG_U133A_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133A.chip=HG_U133A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133AAOFAV2.chip=HG_U133AAOFAV2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133B.chip=HG_U133B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95Av2.chip=HG_U95Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95B.chip=HG_U95B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95C.chip=HG_U95C.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95D.chip=HG_U95D.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95E.chip=HG_U95E.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HPCGGCompugenAnnotations.chip=HPCGGCompugenAnnotations.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HT_HG_U133A_EA.chip=HT_HG_U133A_EA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HT_HG_U133A.chip=HT_HG_U133A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubA.chip=Hu35KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubB.chip=Hu35KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubC.chip=Hu35KsubC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubD.chip=Hu35KsubD.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu6800.chip=Hu6800.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HU6800.chip=HU6800.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HuGene_1_0_st.chip=HuGene_1_0_st.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illimina_Mus6_v1_1.chip=Illimina_Mus6_v1_1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illimuna_Mus6_v1.chip=Illimuna_Mus6_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Hum6_v1.chip=Illumina_Hum6_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Hum6_v2.chip=Illumina_Hum6_v2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Human.chip=Illumina_Human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_HumRef8_v1.chip=Illumina_HumRef8_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_HumRef8_v2.chip=Illumina_HumRef8_v2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_MusRef8_v1_1.chip=Illumina_MusRef8_v1_1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_MusRef8_v1.chip=Illumina_MusRef8_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_HumanHT_12_V3_0_R3_11283641_A.chip=ilmn_HumanHT_12_V3_0_R3_11283641_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_HumanRef_8_V2_0_R4_11223162_A.chip=ilmn_HumanRef_8_V2_0_R4_11223162_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_HUMANREF_8_V3_0_R1_11282963_A_WGDASL.chip=ilmn_HUMANREF_8_V3_0_R1_11282963_A_WGDASL.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_HumanRef_8_V3_0_R3_11282963_A.chip=ilmn_HumanRef_8_V3_0_R3_11282963_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_HumanWG_6_V2_0_R4_11223189_A.chip=ilmn_HumanWG_6_V2_0_R4_11223189_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_HumanWG_6_V3_0_R3_11282955_A.chip=ilmn_HumanWG_6_V3_0_R3_11282955_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_MouseRef_8_V1_1_R4_11234312_A.chip=ilmn_MouseRef_8_V1_1_R4_11234312_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_MouseRef_8_V2_0_R3_11278551_A.chip=ilmn_MouseRef_8_V2_0_R3_11278551_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_MouseWG_6_V1_1_R4_11234304_A.chip=ilmn_MouseWG_6_V1_1_R4_11234304_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_MouseWG_6_V2_0_R3_11278593_A.chip=ilmn_MouseWG_6_V2_0_R3_11278593_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_RatRef_12_V1_0_R5_11222119_A.chip=ilmn_RatRef_12_V1_0_R5_11222119_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_RatRef12_v1.chip=Illumina_RatRef12_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/labonweb_human.chip=labonweb_human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/lymphochip.chip=lymphochip.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Av2.chip=MG_U74Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Bv2.chip=MG_U74Bv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Cv2.chip=MG_U74Cv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MOE430A.chip=MOE430A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MOE430B.chip=MOE430B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MoGene_1_0_st.chip=MoGene_1_0_st.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mouse430_2.chip=Mouse430_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mouse430A_2.chip=Mouse430A_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu11KsubA.chip=Mu11KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu11KsubB.chip=Mu11KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubA.chip=Mu19KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubB.chip=Mu19KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubC.chip=Mu19KsubC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MWG_Human_30K_A.chip=MWG_Human_30K_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MWG_Human_30K_B.chip=MWG_Human_30K_B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Netherland_cancer_institute_operon_human_35k.chip=Netherland_cancer_institute_operon_human_35k.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Netherland_cancer_institute_operon_mouse_FOOk.chip=Netherland_cancer_institute_operon_mouse_FOOk.chip", "ftp.broadinstitute.org://pub/gsea/annotations/NIA15k.chip=NIA15k.chip", "ftp.broadinstitute.org://pub/gsea/annotations/OPERON_HUMANv2.chip=OPERON_HUMANv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/OPERON_HUMANv3.chip=OPERON_HUMANv3.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RAE230A.chip=RAE230A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RAE230B.chip=RAE230B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rat230_2.chip=Rat230_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_human.chip=RefSeq_human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Human.chip=RefSeq_NP_Human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Mouse.chip=RefSeq_NP_Mouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Rat.chip=RefSeq_NP_Rat.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Research_Genetics.chip=Research_Genetics.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34A.chip=RG_U34A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34B.chip=RG_U34B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34C.chip=RG_U34C.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RN_U34.chip=RN_U34.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rosetta.chip=Rosetta.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rosetta50K.chip=Rosetta50K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RT_U34.chip=RT_U34.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_Ensembl1.1.chip=RZPD_Human_Ensembl1.1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_ORF_Clones_Gateway.chip=RZPD_Human_ORF_Clones_Gateway.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_Unigene3.1.chip=RZPD_Human_Unigene3.1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/SEQ_ACCESSION.chip=SEQ_ACCESSION.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Stanford_Source_Accessions.chip=Stanford_Source_Accessions.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Stanford.chip=Stanford.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TIGR_31K_Human_Set.chip=TIGR_31K_Human_Set.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TIGR_40K_Human_Set.chip=TIGR_40K_Human_Set.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC_DB_v1.chip=TRC_DB_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC_DB.chip=TRC_DB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC.chip=TRC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/U133_X3P.chip=U133_X3P.chip", "ftp.broadinstitute.org://pub/gsea/annotations/UCLA_NIH_33K.chip=UCLA_NIH_33K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Zebrafish.chip=Zebrafish.chip"],
            "kinds":[],
            "name":"chip.platform",
            "numValues":"0-1",
            "defaultValue":"nochip",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Chip to use. Upload a chip file if your chip is not listed as a choice for the chip platform parameter.",
            "choices":[],
            "kinds":[],
            "name":"chip.platform.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The statistic used to score hits (gene set members) and misses (non-members)",
            "choices":["classic", "weighted", "weighted_p2", "weighted_p1.5"],
            "kinds":[],
            "name":"scoring.scheme",
            "numValues":"0-1",
            "defaultValue":"weighted",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Class separation metric - gene markers are ranked using this metric to produce the gene list",
            "choices":["Signal2Noise", "tTest", "Ratio_of_Means=Ratio_of_Classes", "Diff_of_Means=Diff_of_Classes", "log2_ratio_of_means=log2_Ratio_of_Classes", "Pearson", "Cosine", "Manhatten=Manhattan", "Euclidean"],
            "kinds":[],
            "name":"metric.for.ranking.genes",
            "numValues":"0-1",
            "defaultValue":"Signal2Noise",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Mode in which scores from the gene list should be considered",
            "choices":["real", "abs"],
            "kinds":[],
            "name":"gene.list.sorting.mode",
            "numValues":"0-1",
            "defaultValue":"real",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Direction in which the gene list should be ordered",
            "choices":["ascending", "descending"],
            "kinds":[],
            "name":"gene.list.ordering.mode",
            "numValues":"0-1",
            "defaultValue":"descending",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets larger than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"max.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"500",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Gene sets smaller than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"min.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"15",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Collapsing mode",
            "choices":["Max_probe", "Median_of_probes"],
            "kinds":[],
            "name":"collapsing.mode.for.probe.sets.with.more.than.one.match",
            "numValues":"0-1",
            "defaultValue":"Max_probe",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Normalization mode",
            "choices":["meandiv", "None"],
            "kinds":[],
            "name":"normalization.mode",
            "numValues":"0-1",
            "defaultValue":"meandiv",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Type of phenotype randomization (does not apply to gene set permutations)",
            "choices":["equalize_and_balance", "no_balance"],
            "kinds":[],
            "name":"randomization.mode",
            "numValues":"0-1",
            "defaultValue":"no_balance",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"If there is no known gene symbol match for a probe set, omit it from the collapsed dataset",
            "choices":["false", "true"],
            "kinds":[],
            "name":"omit.features.with.no.symbol.match",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Create detailed gene set report (heat map, mountain plot, etc.) for every enriched gene set",
            "choices":["false", "true"],
            "kinds":[],
            "name":"make.detailed.gene.set.report",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Use the median of each class instead of the mean for the class separation metrics",
            "choices":["true", "false"],
            "kinds":[],
            "name":"median.for.class.metrics",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Number of markers",
            "choices":[],
            "kinds":[],
            "name":"number.of.markers",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Plot GSEA mountain and related plots for the top sets of each phenotype",
            "choices":[],
            "kinds":[],
            "name":"plot.graphs.for.the.top.sets.of.each.phenotype",
            "numValues":"0-1",
            "defaultValue":"20",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Seed to use for randomization",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"timestamp",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to save random ranked lists",
            "choices":["false", "true"],
            "kinds":[],
            "name":"save.random.ranked.lists",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.file.name",
            "numValues":"0-1",
            "defaultValue":"<expression.dataset_basename>.zip",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"GSEA",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"14",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00072:14"
}, "123":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset file - .res, .gct",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"expression.dataset",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Gene sets database from GSEA website.",
            "choices":["ftp.broad.mit.edu://pub/gsea/gene_sets/c1.all.v2.5.symbols.gmt=c1.all.v2.5.symbols.gmt [Positional]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c2.all.v2.5.symbols.gmt=c2.all.v2.5.symbols.gmt [Curated]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c2.biocarta.v2.5.symbols.gmt=c2.biocarta.v2.5.symbols.gmt [Curated]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c2.cgp.v2.5.symbols.gmt=c2.cgp.v2.5.symbols.gmt [Curated]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c2.cp.v2.5.symbols.gmt=c2.cp.v2.5.symbols.gmt [Curated]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c2.genmapp.v2.5.symbols.gmt=c2.genmapp.v2.5.symbols.gmt [Curated]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c2.kegg.v2.5.symbols.gmt=c2.kegg.v2.5.symbols.gmt [Curated]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c3.all.v2.5.symbols.gmt=c3.all.v2.5.symbols.gmt [Motif]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c3.mir.v2.5.symbols.gmt=c3.mir.v2.5.symbols.gmt [Motif]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c3.tft.v2.5.symbols.gmt=c3.tft.v2.5.symbols.gmt [Motif]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c4.all.v2.5.symbols.gmt=c4.all.v2.5.symbols.gmt [Computational]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c4.cgn.v2.5.symbols.gmt=c4.cgn.v2.5.symbols.gmt [Computational]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c4.cm.v2.5.symbols.gmt=c4.cm.v2.5.symbols.gmt [Computational]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c5.all.v2.5.symbols.gmt=c5.all.v2.5.symbols.gmt [Gene ontology]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c5.cc.v2.5.symbols.gmt=c5.cc.v2.5.symbols.gmt [Gene ontology]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c5.mf.v2.5.symbols.gmt=c5.mf.v2.5.symbols.gmt [Gene ontology]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c1.v2.symbols.gmt=c1.v2.symbols.gmt [Positional]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c2.v2.symbols.gmt=c2.v2.symbols.gmt [Curated]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c3.v2.symbols.gmt=c3.v2.symbols.gmt [Motif]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c4.v2.symbols.gmt=c4.v2.symbols.gmt [Computational]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c4.v1.symbols.gmt=c4.v1.symbols.gmt [Computational]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c3.v1.symbols.gmt=c3.v1.symbols.gmt [Motif]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c2.v1.symbols.gmt=c2.v1.symbols.gmt [Curated]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c1.v1.symbols.gmt=c1.v1.symbols.gmt [Positional]"],
            "kinds":[],
            "name":"gene.sets.database",
            "numValues":"0-1",
            "defaultValue":"ftp.broad.mit.edu://pub/gsea/gene_sets/c1.all.v2.5.symbols.gmt",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets database - .gmt, .gmx, .grp. Upload a gene set if your gene set is not listed as a choice for the gene sets database parameter.",
            "choices":[],
            "kinds":["gmt", "gmx", "grp"],
            "name":"gene.sets.database.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Number of permutations to perform",
            "choices":[],
            "kinds":[],
            "name":"number.of.permutations",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Cls file - .cls, must be binary",
            "choices":[],
            "kinds":["cls"],
            "name":"phenotype.labels",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Select true to have GSEA collapse each probe set in the expression dataset into a single vector for the gene, which gets identified by its gene symbol.",
            "choices":["false", "true"],
            "kinds":[],
            "name":"collapse.dataset",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Type of permutations to perform",
            "choices":["phenotype", "tag"],
            "kinds":[],
            "name":"permutation.type",
            "numValues":"0-1",
            "defaultValue":"phenotype",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Chip file from GSEA website.",
            "choices":["ftp.broad.mit.edu://pub/gsea/annotations/GENE_SYMBOL.chip=GENE_SYMBOL.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Seq_Accession.chip=Seq_Accession.chip", "ftp.broad.mit.edu://pub/gsea/annotations/SEQ_ACCESSION.chip=SEQ_ACCESSION.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Hu35KsubA.chip=Hu35KsubA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Hu35KsubB.chip=Hu35KsubB.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Hu35KsubC.chip=Hu35KsubC.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Hu35KsubD.chip=Hu35KsubD.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Hu6800.chip=Hu6800.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_Focus.chip=HG_Focus.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U133A.chip=HG_U133A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U133AAOFAV2.chip=HG_U133AAOFAV2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U133A_2.chip=HG_U133A_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U133B.chip=HG_U133B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U133_Plus_2.chip=HG_U133_Plus_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U95Av2.chip=HG_U95Av2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U95B.chip=HG_U95B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U95C.chip=HG_U95C.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U95D.chip=HG_U95D.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U95E.chip=HG_U95E.chip", "ftp.broad.mit.edu://pub/gsea/annotations/AFFYMETRIX.chip=AFFYMETRIX.chip", "ftp.broad.mit.edu://pub/gsea/annotations/AG.chip=AG.chip", "ftp.broad.mit.edu://pub/gsea/annotations/APPLERA_ABI1700.chip=APPLERA_ABI1700.chip", "ftp.broad.mit.edu://pub/gsea/annotations/ATH1_121501.chip=ATH1_121501.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_Human1A.chip=Agilent_Human1A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_Human1Av2.chip=Agilent_Human1Av2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_Human1B.chip=Agilent_Human1B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_Human1_cDNA.chip=Agilent_Human1_cDNA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_HumanGenome.chip=Agilent_HumanGenome.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_MouseDev.chip=Agilent_MouseDev.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_MouseGenome.chip=Agilent_MouseGenome.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_MouseOligo.chip=Agilent_MouseOligo.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_Mouse_cDNA.chip=Agilent_Mouse_cDNA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_RatGenome_G4131A.chip=Agilent_RatGenome_G4131A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_RatOligo.chip=Agilent_RatOligo.chip", "ftp.broad.mit.edu://pub/gsea/annotations/AtlasMouse1.2.chip=AtlasMouse1.2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/AtlasRat1.2.chip=AtlasRat1.2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/BIAO.chip=BIAO.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Bovine.chip=Bovine.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CNMCMuscleChip.chip=CNMCMuscleChip.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Caltech16KMouse.chip=Caltech16KMouse.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Caltech16KOligoMouse.chip=Caltech16KOligoMouse.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Canine_2.chip=Canine_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Clontech_Atlas_13K.chip=Clontech_Atlas_13K.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Clontech_BD_Atlas.chip=Clontech_BD_Atlas.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CodeLink_Human_Whole_Genome.chip=CodeLink_Human_Whole_Genome.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CodeLink_UniSet_Human_20K_I_Bioarray.chip=CodeLink_UniSet_Human_20K_I_Bioarray.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CodeLink_UniSet_Human_II_Bioarray.chip=CodeLink_UniSet_Human_II_Bioarray.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CodeLink_UniSet_Human_I_Bioarray.chip=CodeLink_UniSet_Human_I_Bioarray.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CodeLink_UniSet_Rat_I_Bioarray.chip=CodeLink_UniSet_Rat_I_Bioarray.chip", "ftp.broad.mit.edu://pub/gsea/annotations/DrosGenome1.chip=DrosGenome1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Drosophila_2.chip=Drosophila_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/G4110A.chip=G4110A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/G4110Av2.chip=G4110Av2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/GenosysCytokineV2.chip=GenosysCytokineV2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HC_G110.chip=HC_G110.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HPCGGCompugenAnnotations.chip=HPCGGCompugenAnnotations.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HT_HG_U133A.chip=HT_HG_U133A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HT_HG_U133A_EA.chip=HT_HG_U133A_EA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HU6800.chip=HU6800.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illimina_Mus6_v1_1.chip=Illimina_Mus6_v1_1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illimuna_Mus6_v1.chip=Illimuna_Mus6_v1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_Hum6_v1.chip=Illumina_Hum6_v1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_Hum6_v2.chip=Illumina_Hum6_v2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_HumRef8_v1.chip=Illumina_HumRef8_v1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_HumRef8_v2.chip=Illumina_HumRef8_v2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_Human.chip=Illumina_Human.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_MusRef8_v1.chip=Illumina_MusRef8_v1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_MusRef8_v1_1.chip=Illumina_MusRef8_v1_1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_RatRef12_v1.chip=Illumina_RatRef12_v1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MG_U74Av2.chip=MG_U74Av2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MG_U74Bv2.chip=MG_U74Bv2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MG_U74Cv2.chip=MG_U74Cv2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MOE430A.chip=MOE430A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MOE430B.chip=MOE430B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MWG_Human_30K_A.chip=MWG_Human_30K_A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MWG_Human_30K_B.chip=MWG_Human_30K_B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mouse430A_2.chip=Mouse430A_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mouse430_2.chip=Mouse430_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mu11KsubA.chip=Mu11KsubA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mu11KsubB.chip=Mu11KsubB.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mu19KsubA.chip=Mu19KsubA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mu19KsubB.chip=Mu19KsubB.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mu19KsubC.chip=Mu19KsubC.chip", "ftp.broad.mit.edu://pub/gsea/annotations/NIA15k.chip=NIA15k.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Netherland_cancer_institute_operon_human_35k.chip=Netherland_cancer_institute_operon_human_35k.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Netherland_cancer_institute_operon_mouse_FOOk.chip=Netherland_cancer_institute_operon_mouse_FOOk.chip", "ftp.broad.mit.edu://pub/gsea/annotations/OPERON_HUMANv2.chip=OPERON_HUMANv2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/OPERON_HUMANv3.chip=OPERON_HUMANv3.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RAE230A.chip=RAE230A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RAE230B.chip=RAE230B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RG_U34A.chip=RG_U34A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RG_U34B.chip=RG_U34B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RG_U34C.chip=RG_U34C.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RN_U34.chip=RN_U34.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RT_U34.chip=RT_U34.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RZPD_Human_Ensembl1.1.chip=RZPD_Human_Ensembl1.1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RZPD_Human_ORF_Clones_Gateway.chip=RZPD_Human_ORF_Clones_Gateway.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RZPD_Human_Unigene3.1.chip=RZPD_Human_Unigene3.1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Rat230_2.chip=Rat230_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RefSeq_NP_Human.chip=RefSeq_NP_Human.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RefSeq_NP_Mouse.chip=RefSeq_NP_Mouse.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RefSeq_NP_Rat.chip=RefSeq_NP_Rat.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RefSeq_human.chip=RefSeq_human.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Research_Genetics.chip=Research_Genetics.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Rosetta.chip=Rosetta.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Rosetta50K.chip=Rosetta50K.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Stanford.chip=Stanford.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Stanford_Source_Accessions.chip=Stanford_Source_Accessions.chip", "ftp.broad.mit.edu://pub/gsea/annotations/TIGR_31K_Human_Set.chip=TIGR_31K_Human_Set.chip", "ftp.broad.mit.edu://pub/gsea/annotations/TIGR_40K_Human_Set.chip=TIGR_40K_Human_Set.chip", "ftp.broad.mit.edu://pub/gsea/annotations/TRC.chip=TRC.chip", "ftp.broad.mit.edu://pub/gsea/annotations/TRC_DB.chip=TRC_DB.chip", "ftp.broad.mit.edu://pub/gsea/annotations/TRC_DB_v1.chip=TRC_DB_v1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/U133_X3P.chip=U133_X3P.chip", "ftp.broad.mit.edu://pub/gsea/annotations/UCLA_NIH_33K.chip=UCLA_NIH_33K.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Zebrafish.chip=Zebrafish.chip", "ftp.broad.mit.edu://pub/gsea/annotations/labonweb_human.chip=labonweb_human.chip", "ftp.broad.mit.edu://pub/gsea/annotations/lymphochip.chip=lymphochip.chip"],
            "kinds":[],
            "name":"chip.platform",
            "numValues":"0-1",
            "defaultValue":"ftp.broad.mit.edu://pub/gsea/annotations/GENE_SYMBOL.chip",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Chip to use. Upload a chip file if your chip is not listed as a choice for the chip platform parameter.",
            "choices":[],
            "kinds":[],
            "name":"chip.platform.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The statistic used to score hits (gene set members) and misses (non-members)",
            "choices":["classic", "weighted", "weighted_p2", "weighted_p1.5"],
            "kinds":[],
            "name":"scoring.scheme",
            "numValues":"0-1",
            "defaultValue":"weighted",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Class separation metric - gene markers are ranked using this metric to produce the gene list",
            "choices":["Cosine", "Euclidean", "Manhattan", "Pearson", "FeatureVariation", "tTest", "Signal2Noise", "None", "RegressionSlope", "Bhattacharyya", "Norm.Pearson", "Diff_of_Means", "Diff_of_Medians", "Ratio_of_Means", "Ratio_of_Medians", "log2_ratio_of_means", "Feature_stddev_by_mean"],
            "kinds":[],
            "name":"metric.for.ranking.genes",
            "numValues":"0-1",
            "defaultValue":"Signal2Noise",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Direction in which the gene list should be ordered",
            "choices":["ascending", "descending"],
            "kinds":[],
            "name":"gene.list.ordering.mode",
            "numValues":"0-1",
            "defaultValue":"descending",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Mode in which scores from the gene list should be considered",
            "choices":["real", "abs"],
            "kinds":[],
            "name":"gene.list.sorting.mode",
            "numValues":"0-1",
            "defaultValue":"real",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets larger than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"max.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"500",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Gene sets smaller than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"min.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"15",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Collapsing mode",
            "choices":["Max_probe", "Median_of_probes"],
            "kinds":[],
            "name":"collapsing.mode.for.probe.sets.with.more.than.one.match",
            "numValues":"0-1",
            "defaultValue":"Max_probe",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Normalization mode",
            "choices":["meandiv", "None"],
            "kinds":[],
            "name":"normalization.mode",
            "numValues":"0-1",
            "defaultValue":"meandiv",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Type of phenotype randomization (does not apply to gene set permutations)",
            "choices":["equalize_and_balance", "no_balance"],
            "kinds":[],
            "name":"randomization.mode",
            "numValues":"0-1",
            "defaultValue":"no_balance",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"If there is no known gene symbol match for a probe set, omit it from the collapsed dataset",
            "choices":["false", "true"],
            "kinds":[],
            "name":"omit.features.with.no.symbol.match",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Create detailed gene set report (heat map, mountain plot, etc.) for every enriched gene set",
            "choices":["false", "true"],
            "kinds":[],
            "name":"make.detailed.gene.set.report",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Use the median of each class instead of the mean for the class separation metrics",
            "choices":["true", "false"],
            "kinds":[],
            "name":"median.for.class.metrics",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Number of markers",
            "choices":[],
            "kinds":[],
            "name":"number.of.markers",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Plot GSEA mountain and related plots for the top sets of each phenotype",
            "choices":[],
            "kinds":[],
            "name":"plot.graphs.for.the.top.sets.of.each.phenotype",
            "numValues":"0-1",
            "defaultValue":"20",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Seed to use for randomization",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"timestamp",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to save random ranked lists",
            "choices":["false", "true"],
            "kinds":[],
            "name":"save.random.ranked.lists",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.file.name",
            "numValues":"0-1",
            "defaultValue":"<expression.dataset_basename>.zip",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"GSEA",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"5",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00072:5"
}, "304":{
    "category":"Projection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input gct file. This module does not allow missing values.",
            "choices":[],
            "kinds":["gct"],
            "name":"input.gct.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Output filename prefix. If unspecified, is set to <prefix of input.gct.file>.PROJ.",
            "choices":[],
            "kinds":[],
            "name":"output.file.prefix",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Gene sets database from GSEA website.",
            "choices":["c1.all.v4.0.symbols.gmt=c1.all.v4.0.symbols.gmt [Positional]", "c2.all.v4.0.symbols.gmt=c2.all.v4.0.symbols.gmt [Curated]", "c2.cgp.v4.0.symbols.gmt=c2.cgp.v4.0.symbols.gmt [Curated]", "c2.cp.v4.0.symbols.gmt=c2.cp.v4.0.symbols.gmt [Curated]", "c2.cp.biocarta.v4.0.symbols.gmt=c2.cp.biocarta.v4.0.symbols.gmt [Curated]", "c2.cp.kegg.v4.0.symbols.gmt=c2.cp.kegg.v4.0.symbols.gmt [Curated]", "c2.cp.reactome.v4.0.symbols.gmt=c2.cp.reactome.v4.0.symbols.gmt [Curated]", "c3.all.v4.0.symbols.gmt=c3.all.v4.0.symbols.gmt [Motif]", "c3.mir.v4.0.symbols.gmt=c3.mir.v4.0.symbols.gmt [Motif]", "c3.tft.v4.0.symbols.gmt=c3.tft.v4.0.symbols.gmt [Motif]", "c4.all.v4.0.symbols.gmt=c4.all.v4.0.symbols.gmt [Computational]", "c4.cgn.v4.0.symbols.gmt=c4.cgn.v4.0.symbols.gmt [Computational]", "c4.cm.v4.0.symbols.gmt=c4.cm.v4.0.symbols.gmt [Computational]", "c5.all.v4.0.symbols.gmt=c5.all.v4.0.symbols.gmt [Gene Ontology]", "c5.bp.v4.0.symbols.gmt=c5.bp.v4.0.symbols.gmt [Gene Ontology]", "c5.cc.v4.0.symbols.gmt=c5.cc.v4.0.symbols.gmt [Gene Ontology]", "c5.mf.v4.0.symbols.gmt=c5.mf.v4.0.symbols.gmt [Gene Ontology]", "c6.all.v4.0.symbols.gmt=c6.all.v4.0.symbols.gmt [Oncogenic Signatures]", "c7.all.v4.0.symbols.gmt=c7.all.v4.0.symbols.gmt [Immunologic signatures]"],
            "kinds":[],
            "name":"gene.sets.database",
            "numValues":"0-1",
            "defaultValue":"c1.all.v4.0.symbols.gmt",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets description file - .gmt, .gmx. Upload a gene set if your gene set is not listed as a choice for the gene sets database parameter.",
            "choices":[],
            "kinds":["gmt", "gmx"],
            "name":"gene.sets.database.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":".txt file containing list of .gmt and .gmx files. This is typically created by the ListFiles module and is used if projecting expression data to gene sets defined across multiple .gmt and .gmx files.",
            "choices":[],
            "kinds":["txt"],
            "name":"gene.sets.database.list.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Specifies the gct data column containing gene symbols. In most cases this will be \"Column 1\".",
            "choices":["Name=Column 1", "Description=Column 2"],
            "kinds":[],
            "name":"gene.symbol.column",
            "numValues":"0-1",
            "defaultValue":"Name",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Comma-separated list of gene set names on which to project expression data. Set to \"ALL\" if projecting to all defined gene sets.",
            "choices":[],
            "kinds":[],
            "name":"gene.set.selection",
            "numValues":"0-1",
            "defaultValue":"ALL",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Method used to normalize gene expression data",
            "choices":["rank", "log", "log.rank"],
            "kinds":[],
            "name":"sample.normalization.method",
            "numValues":"0-1",
            "defaultValue":"rank",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Module authors strongly recommend against changing from default.",
            "choices":[],
            "kinds":[],
            "name":"weighting.exponent",
            "numValues":"0-1",
            "defaultValue":"0.75",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Gene sets with overlap smaller than this are excluded from the analysis.",
            "choices":[],
            "kinds":[],
            "name":"min.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        }
    ],
    "name":"ssGSEAProjection",
    "write":false,
    "tags":["gct"],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00270:4"
}, "124":{
    "category":"Prediction",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Gene expression data set (.gct)",
            "choices":[],
            "kinds":[],
            "name":"input.exp.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"List of marker genes (.txt): Probe ID, Gene name, Class (1,2,...), Weight (optional)",
            "choices":[],
            "kinds":[],
            "name":"input.features.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Name for output files",
            "choices":[],
            "kinds":[],
            "name":"output.name",
            "numValues":"0-1",
            "defaultValue":"NTP",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Distance metric",
            "choices":["cosine=cosine", "correlation=correlation"],
            "kinds":[],
            "name":"distance.selection",
            "numValues":"0-1",
            "defaultValue":"cosine",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Weight genes? (by statistic, fold change, etc. only for 2 classes)",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"weight.genes",
            "numValues":"0-1",
            "defaultValue":"T",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"# resampling to generate null distribution for distance metric",
            "choices":[],
            "kinds":[],
            "name":"num.resamplings",
            "numValues":"0-1",
            "defaultValue":"1000",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Create .gct and .cls files for GenePattern",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"GenePattern.output",
            "numValues":"0-1",
            "defaultValue":"F",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Random seed",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"7392854",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        }
    ],
    "name":"NearestTemplatePrediction",
    "write":false,
    "tags":["gct", "png", "txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00166:1"
}, "303":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Rank ordered gene list - .rnk",
            "choices":[],
            "kinds":["rnk"],
            "name":"ranked.list",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Gene sets database from MSigDB website.",
            "choices":["noGeneSetsDB=", "c1.all.v4.0.symbols.gmt=c1.all.v4.0.symbols.gmt [Positional]", "c2.all.v4.0.symbols.gmt=c2.all.v4.0.symbols.gmt [Curated]", "c2.cgp.v4.0.symbols.gmt=c2.cgp.v4.0.symbols.gmt [Curated]", "c2.cp.v4.0.symbols.gmt=c2.cp.v4.0.symbols.gmt [Curated]", "c2.cp.biocarta.v4.0.symbols.gmt=c2.cp.biocarta.v4.0.symbols.gmt [Curated]", "c2.cp.kegg.v4.0.symbols.gmt=c2.cp.kegg.v4.0.symbols.gmt [Curated]", "c2.cp.reactome.v4.0.symbols.gmt=c2.cp.reactome.v4.0.symbols.gmt [Curated]", "c3.all.v4.0.symbols.gmt=c3.all.v4.0.symbols.gmt [Motif]", "c3.mir.v4.0.symbols.gmt=c3.mir.v4.0.symbols.gmt [Motif]", "c3.tft.v4.0.symbols.gmt=c3.tft.v4.0.symbols.gmt [Motif]", "c4.all.v4.0.symbols.gmt=c4.all.v4.0.symbols.gmt [Computational]", "c4.cgn.v4.0.symbols.gmt=c4.cgn.v4.0.symbols.gmt [Computational]", "c4.cm.v4.0.symbols.gmt=c4.cm.v4.0.symbols.gmt [Computational]", "c5.all.v4.0.symbols.gmt=c5.all.v4.0.symbols.gmt [Gene Ontology]", "c5.bp.v4.0.symbols.gmt=c5.bp.v4.0.symbols.gmt [Gene Ontology]", "c5.cc.v4.0.symbols.gmt=c5.cc.v4.0.symbols.gmt [Gene Ontology]", "c5.mf.v4.0.symbols.gmt=c5.mf.v4.0.symbols.gmt [Gene Ontology]", "c6.all.v4.0.symbols.gmt=c6.all.v4.0.symbols.gmt [Oncogenic Signatures]", "c7.all.v4.0.symbols.gmt=c7.all.v4.0.symbols.gmt [Immunologic signatures]"],
            "kinds":[],
            "name":"gene.sets.database",
            "numValues":"0-1",
            "defaultValue":"noGeneSetsDB",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets database - .gmt, .gmx, .grp. Upload a gene set if your gene set is not listed as a choice for the gene sets database parameter.",
            "choices":[],
            "kinds":["gmt", "gmx", "grp"],
            "name":"gene.sets.database.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Number of permutations to perform",
            "choices":[],
            "kinds":[],
            "name":"number.of.permutations",
            "numValues":"0-1",
            "defaultValue":"1000",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Select true to have GSEAPreranked collapse each feature set in the ranked list into a single vector for the gene, which gets identified by its gene symbol.",
            "choices":["false", "true"],
            "kinds":[],
            "name":"collapse.dataset",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Chip file from MSigDB website.",
            "choices":["nochip=", "ftp.broadinstitute.org://pub/gsea/annotations/AFFYMETRIX.chip=AFFYMETRIX.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AG.chip=AG.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1_cDNA.chip=Agilent_Human1_cDNA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1A.chip=Agilent_Human1A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1Av2.chip=Agilent_Human1Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1B.chip=Agilent_Human1B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_HumanGenome.chip=Agilent_HumanGenome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Mouse_cDNA.chip=Agilent_Mouse_cDNA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseDev.chip=Agilent_MouseDev.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseGenome.chip=Agilent_MouseGenome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseOligo.chip=Agilent_MouseOligo.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_RatGenome_G4131A.chip=Agilent_RatGenome_G4131A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_RatOligo.chip=Agilent_RatOligo.chip", "ftp.broadinstitute.org://pub/gsea/annotations/APPLERA_ABI1700.chip=APPLERA_ABI1700.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ATH1_121501.chip=ATH1_121501.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AtlasMouse1.2.chip=AtlasMouse1.2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AtlasRat1.2.chip=AtlasRat1.2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/BIAO.chip=BIAO.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Bovine.chip=Bovine.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Caltech16KMouse.chip=Caltech16KMouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Caltech16KOligoMouse.chip=Caltech16KOligoMouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Canine_2.chip=Canine_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Clontech_Atlas_13K.chip=Clontech_Atlas_13K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Clontech_BD_Atlas.chip=Clontech_BD_Atlas.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CNMCMuscleChip.chip=CNMCMuscleChip.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_Human_Whole_Genome.chip=CodeLink_Human_Whole_Genome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_20K_I_Bioarray.chip=CodeLink_UniSet_Human_20K_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_I_Bioarray.chip=CodeLink_UniSet_Human_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_II_Bioarray.chip=CodeLink_UniSet_Human_II_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Rat_I_Bioarray.chip=CodeLink_UniSet_Rat_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/DrosGenome1.chip=DrosGenome1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Drosophila_2.chip=Drosophila_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/G4110A.chip=G4110A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/G4110Av2.chip=G4110Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/GenosysCytokineV2.chip=GenosysCytokineV2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HC_G110.chip=HC_G110.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_Focus.chip=HG_Focus.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133_Plus_2.chip=HG_U133_Plus_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133A_2.chip=HG_U133A_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133A.chip=HG_U133A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133AAOFAV2.chip=HG_U133AAOFAV2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133B.chip=HG_U133B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95Av2.chip=HG_U95Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95B.chip=HG_U95B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95C.chip=HG_U95C.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95D.chip=HG_U95D.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95E.chip=HG_U95E.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HPCGGCompugenAnnotations.chip=HPCGGCompugenAnnotations.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HT_HG_U133A_EA.chip=HT_HG_U133A_EA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HT_HG_U133A.chip=HT_HG_U133A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubA.chip=Hu35KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubB.chip=Hu35KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubC.chip=Hu35KsubC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubD.chip=Hu35KsubD.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu6800.chip=Hu6800.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HU6800.chip=HU6800.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HuGene_1_0_st.chip=HuGene_1_0_st.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illimina_Mus6_v1_1.chip=Illimina_Mus6_v1_1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illimuna_Mus6_v1.chip=Illimuna_Mus6_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Hum6_v1.chip=Illumina_Hum6_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Hum6_v2.chip=Illumina_Hum6_v2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Human.chip=Illumina_Human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_HumRef8_v1.chip=Illumina_HumRef8_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_HumRef8_v2.chip=Illumina_HumRef8_v2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_MusRef8_v1_1.chip=Illumina_MusRef8_v1_1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_MusRef8_v1.chip=Illumina_MusRef8_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_HumanHT_12_V3_0_R3_11283641_A.chip=ilmn_HumanHT_12_V3_0_R3_11283641_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_HumanRef_8_V2_0_R4_11223162_A.chip=ilmn_HumanRef_8_V2_0_R4_11223162_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_HUMANREF_8_V3_0_R1_11282963_A_WGDASL.chip=ilmn_HUMANREF_8_V3_0_R1_11282963_A_WGDASL.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_HumanRef_8_V3_0_R3_11282963_A.chip=ilmn_HumanRef_8_V3_0_R3_11282963_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_HumanWG_6_V2_0_R4_11223189_A.chip=ilmn_HumanWG_6_V2_0_R4_11223189_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_HumanWG_6_V3_0_R3_11282955_A.chip=ilmn_HumanWG_6_V3_0_R3_11282955_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_MouseRef_8_V1_1_R4_11234312_A.chip=ilmn_MouseRef_8_V1_1_R4_11234312_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_MouseRef_8_V2_0_R3_11278551_A.chip=ilmn_MouseRef_8_V2_0_R3_11278551_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_MouseWG_6_V1_1_R4_11234304_A.chip=ilmn_MouseWG_6_V1_1_R4_11234304_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_MouseWG_6_V2_0_R3_11278593_A.chip=ilmn_MouseWG_6_V2_0_R3_11278593_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ilmn_RatRef_12_V1_0_R5_11222119_A.chip=ilmn_RatRef_12_V1_0_R5_11222119_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_RatRef12_v1.chip=Illumina_RatRef12_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/labonweb_human.chip=labonweb_human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/lymphochip.chip=lymphochip.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Av2.chip=MG_U74Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Bv2.chip=MG_U74Bv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Cv2.chip=MG_U74Cv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MOE430A.chip=MOE430A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MOE430B.chip=MOE430B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MoGene_1_0_st.chip=MoGene_1_0_st.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mouse430_2.chip=Mouse430_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mouse430A_2.chip=Mouse430A_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu11KsubA.chip=Mu11KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu11KsubB.chip=Mu11KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubA.chip=Mu19KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubB.chip=Mu19KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubC.chip=Mu19KsubC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MWG_Human_30K_A.chip=MWG_Human_30K_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MWG_Human_30K_B.chip=MWG_Human_30K_B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Netherland_cancer_institute_operon_human_35k.chip=Netherland_cancer_institute_operon_human_35k.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Netherland_cancer_institute_operon_mouse_FOOk.chip=Netherland_cancer_institute_operon_mouse_FOOk.chip", "ftp.broadinstitute.org://pub/gsea/annotations/NIA15k.chip=NIA15k.chip", "ftp.broadinstitute.org://pub/gsea/annotations/OPERON_HUMANv2.chip=OPERON_HUMANv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/OPERON_HUMANv3.chip=OPERON_HUMANv3.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RAE230A.chip=RAE230A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RAE230B.chip=RAE230B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rat230_2.chip=Rat230_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_human.chip=RefSeq_human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Human.chip=RefSeq_NP_Human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Mouse.chip=RefSeq_NP_Mouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Rat.chip=RefSeq_NP_Rat.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Research_Genetics.chip=Research_Genetics.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34A.chip=RG_U34A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34B.chip=RG_U34B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34C.chip=RG_U34C.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RN_U34.chip=RN_U34.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rosetta.chip=Rosetta.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rosetta50K.chip=Rosetta50K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RT_U34.chip=RT_U34.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_Ensembl1.1.chip=RZPD_Human_Ensembl1.1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_ORF_Clones_Gateway.chip=RZPD_Human_ORF_Clones_Gateway.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_Unigene3.1.chip=RZPD_Human_Unigene3.1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/SEQ_ACCESSION.chip=SEQ_ACCESSION.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Stanford_Source_Accessions.chip=Stanford_Source_Accessions.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Stanford.chip=Stanford.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TIGR_31K_Human_Set.chip=TIGR_31K_Human_Set.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TIGR_40K_Human_Set.chip=TIGR_40K_Human_Set.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC_DB_v1.chip=TRC_DB_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC_DB.chip=TRC_DB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC.chip=TRC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/U133_X3P.chip=U133_X3P.chip", "ftp.broadinstitute.org://pub/gsea/annotations/UCLA_NIH_33K.chip=UCLA_NIH_33K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Zebrafish.chip=Zebrafish.chip"],
            "kinds":[],
            "name":"chip.platform",
            "numValues":"0-1",
            "defaultValue":"nochip",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Chip to use. Upload a chip file if your chip is not listed as a choice for the chip platform parameter.",
            "choices":[],
            "kinds":[],
            "name":"chip.platform.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The statistic used to score hits (gene set members) and misses (non-members)",
            "choices":["classic", "weighted", "weighted_p2", "weighted_p1.5"],
            "kinds":[],
            "name":"scoring.scheme",
            "numValues":"0-1",
            "defaultValue":"weighted",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets larger than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"max.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"500",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Gene sets smaller than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"min.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"15",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Normalization mode",
            "choices":["meandiv", "None"],
            "kinds":[],
            "name":"normalization.mode",
            "numValues":"0-1",
            "defaultValue":"meandiv",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Collapsing mode",
            "choices":["Max_probe", "Median_of_probes"],
            "kinds":[],
            "name":"collapsing.mode",
            "numValues":"0-1",
            "defaultValue":"Max_probe",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"If there is no known gene symbol match for a probe set, omit it from the collapsed dataset; only relevant when collapse dataset is set to true",
            "choices":["false", "true"],
            "kinds":[],
            "name":"omit.features.with.no.symbol.match",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Create detailed gene set report (heat map, mountain plot, etc.) for every enriched gene set",
            "choices":["false", "true"],
            "kinds":[],
            "name":"make.detailed.gene.set.report",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Plot GSEA mountain and related plots for the top sets of each phenotype",
            "choices":[],
            "kinds":[],
            "name":"num.top.sets",
            "numValues":"0-1",
            "defaultValue":"20",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Seed to use for generating random permutations.",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"timestamp",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.file.name",
            "numValues":"0-1",
            "defaultValue":"<ranked.list_basename>.zip",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"GSEAPreranked",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00317:1"
}, "306":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The dataset to display - .gct, .res, .odf",
            "choices":[],
            "kinds":["res", "gct", "odf", "Dataset"],
            "name":"dataset",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"HeatMapViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"11",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00010:11"
}, "305":{
    "category":"Data Format Conversion",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The SAM or BAM file",
            "choices":[],
            "kinds":["bam", "sam"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to output a fastq file per read group",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"per.read.group",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to re-reverse bases and qualities of reads with negative strand flag set",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"re-reverse.bases",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to include non-PF reads",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"include.non.pf.reads",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Attribute that stores the position at which the SAM record should be clipped",
            "choices":[],
            "kinds":[],
            "name":"clipping.attribute",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Action to take with clipped reads when a clipping attribute is specified",
            "choices":["none=", "X=trim reads and qualities", "N=change bases to Ns", "change=change base quality values"],
            "kinds":[],
            "name":"clipping.action",
            "numValues":"0-1",
            "defaultValue":"none",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Value to set base qualities to when clipping action is \"change base quality values\"",
            "choices":[],
            "kinds":[],
            "name":"clipping.action.quality.value",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The fastq output file name for single-end fastq or first end of a paired fastq. Only specify when \"per read group\" is \"no\".",
            "choices":[],
            "kinds":[],
            "name":"fastq.output.prefix.1",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The second end of a paired fastq. Only specify when \"per read group\" is \"no\".",
            "choices":[],
            "kinds":[],
            "name":"fastq.output.prefix.2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Picard.SamToFastq",
    "write":false,
    "tags":["fastq"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00240:3"
}, "308":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"File created by MultiplotPreprocess (.zip)",
            "choices":[],
            "kinds":["zip"],
            "name":"input.file.name",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Smaller one plot visualizer or bigger two plot",
            "choices":["1=one plot", "2=two plots"],
            "kinds":[],
            "name":"number.of.plots",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"File with settings from a saved multiplot session",
            "choices":[],
            "kinds":[],
            "name":"plot.settings",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"Multiplot",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"1.3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00099:1.3"
}, "307":{
    "category":"MutSig",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Mutation list in MAF format.",
            "choices":[],
            "kinds":["maf"],
            "name":"mutation.table.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"File containing the coverage table. This should be a file with per-sample coverage as produced by MuTect from the samples' WIG files. If you do not have this level of coverage information, you can instead use the territory file for the reference human exome to direct MutSigCV to assume full coverage. This file is found using \"Add Path or URL\" under \"shared_data/example_files/MutSigCV_1.3/exome_full192.coverage.txt\".",
            "choices":[],
            "kinds":["txt"],
            "name":"coverage.table.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"File containing the covariates table. The default selection is the covariates file used in the MutSigCV paper published in Nature (see the documentation for further information and a full reference). ",
            "choices":[],
            "kinds":["txt"],
            "name":"covariates.table.file",
            "numValues":"0-1",
            "defaultValue":"ftp://ftp.broadinstitute.org/pub/genepattern/example_files/MutSigCV_1.3/gene.covariates.txt",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Base name for the output files. ",
            "choices":[],
            "kinds":[],
            "name":"output.filename.base",
            "numValues":"0-1",
            "defaultValue":"<mutation.table.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The mutation type dictionary to use for automatic category and effect discovery. This is necessary only if you are using a MAF file without the columns \"categ\" and \"effect\". A suggested dictionary can be found using \"Add Path or URL\" under \"shared_data/example_files/MutSigCV_1.3/mutation_type_dictionary_file.txt\".",
            "choices":[],
            "kinds":["txt"],
            "name":"mutation.type.dictionary",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Genome build to use for automatic category and effect discovery. This is necessary only if you are using a MAF file without the columns \"categ\" and \"effect\".",
            "choices":["=Skip category and effect discovery", "<shared.data.home>/cga/annotation/ucsc/hg19=hg19", "<shared.data.home>/cga/annotation/ucsc/hg18=hg18"],
            "kinds":[],
            "name":"genome.build",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"MutSigCV",
    "write":false,
    "tags":["txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00320:1"
}, "129":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A membership.txt file output from the FLAMEContourDataGenerator module. This membership file must match with the contour plot file.",
            "choices":[],
            "kinds":["txt"],
            "name":"membership.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The contour plot output file from the FLAMEContourDataGenerator module. This contour plot file must match with the membership file.",
            "choices":[],
            "kinds":["txt"],
            "name":"contour.plot.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"FLAMEViewer",
    "write":false,
    "tags":["txt"],
    "type":"visualizer",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00157:1"
}, "309":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A GTF file output from Cufflinks, or a TXT containing a list of paths to GTF files.",
            "choices":[],
            "kinds":["gtf"],
            "name":"input.file",
            "numValues":"1+",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A prefix for the module output",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A reference annotation GTF",
            "choices":[],
            "kinds":["gtf"],
            "name":"reference.GTF",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to ignore reference transcripts that are not overlapped by any transcript in the input files.",
            "choices":["false=no", "true=yes"],
            "kinds":[],
            "name":"exclude.transcripts",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Fasta file or zip of fasta files against which your reads were aligned",
            "choices":[],
            "kinds":["fa", "fasta", "zip"],
            "name":"custom.reference.genome.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"Cufflinks.cuffcompare",
    "write":false,
    "tags":["gtf", "tmap", "refmap", "tracking", "txt", "stats"],
    "type":"module",
    "version":"4.6",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00235:4.6"
}, "120":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Clustered data table, contains the original data, but reordered",
            "choices":[],
            "kinds":["cdt"],
            "name":"cdt.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Gene tree file, records the order in which genes (rows) were joined (at least one of gtr file and atr file is required)",
            "choices":[],
            "kinds":["gtr"],
            "name":"gtr.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Array tree file, records the order in which samples (columns) were joined (at least one of gtr file and atr file is required)",
            "choices":[],
            "kinds":["atr"],
            "name":"atr.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"HierarchicalClusteringViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"7",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00031:7"
}, "134":{
    "category":"FLAME",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A .zip file containing the optimal mixture modeling result of each sample from the output of the FLAMEChooseOptimalClusterNumber module.",
            "choices":[],
            "kinds":["zip"],
            "name":"optimal.g.mixture.model",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"",
            "choices":[],
            "kinds":["txt"],
            "name":"sample.class",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Used only for skew distributions. Whether to estimate the mode for each cluster. Must be the same value used in FLAMEMixtureModel.",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"estimate.mode",
            "numValues":"0-1",
            "defaultValue":"F",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Used only for skew distributions and when estimate mode is set to yes. The smaller the increment, the more accurate the estimation, but the slower the estimation step. Must be the same value used in FLAMEMixtureModel.",
            "choices":[],
            "kinds":[],
            "name":"estimation.increment",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Choose whether to output the intermediate metaclustering results, such as within-class matching results.",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"output.intermediate.results",
            "numValues":"0-1",
            "defaultValue":"F",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A prefix for output files.",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<optimal.g.mixture.model_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEMetacluster",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00162:2"
}, "135":{
    "category":"FLAME",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A .zip file containing mixture modeling results from the FLAMEMixtureModel module",
            "choices":[],
            "kinds":["zip"],
            "name":"mixture.model",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Criterion used for determining optimal number of clusters",
            "choices":["AIC=Akaike Information Criterion (AIC)", "BIC=Bayesian Information Criterion (BIC)", "SWR=Scale-free Weighted Ratio (SWR)", "distance.ratio=distance ratio", "intercluster.distance=intercluster distance"],
            "kinds":[],
            "name":"method",
            "numValues":"0-1",
            "defaultValue":"SWR",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"An integer; the seed fixes random computational processes during computation. This does not need to be changed under most circumstances.",
            "choices":[],
            "kinds":[],
            "name":"seed",
            "numValues":"0-1",
            "defaultValue":"123456",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"A prefix for output files",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<mixture.model_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEChooseOptimalClusterNumber",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00161:2"
}, "132":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The file you want to extract the data from. Note that this must be a Word 2007 (.docx) file -- Files saved as Word 2003 or earlier (2003) may be compatible with the Add-In, but will not work with the extractor.",
            "choices":[],
            "kinds":[],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"GenePatternDocumentExtractor",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00168:1"
}, "133":{
    "category":"FLAME",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A .zip file containing preprocessed flow sample files in tab-delimited .txt format.",
            "choices":[],
            "kinds":["zip"],
            "name":"preprocessed.data",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"An integer; minimal number of clusters to be fit for each sample.",
            "choices":[],
            "kinds":[],
            "name":"g.min",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"An integer; maximal number of clusters to be fit for each sample. g max should be greater or equal to g min.",
            "choices":[],
            "kinds":[],
            "name":"g.max",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Density distribution to be used for clustering",
            "choices":["normal", "t", "skewn=skew normal", "skewt=skew t"],
            "kinds":[],
            "name":"density",
            "numValues":"0-1",
            "defaultValue":"skewt",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A comma-separated list of either channel numbers (e.g., 1, 2, 3, 7) or channel names (e.g., CD4, CD45RA, ZAP70); these denote which antibodies in the (preprocessed) data sample to be used for clustering.",
            "choices":[],
            "kinds":[],
            "name":"channels.to.cluster",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Used only for skew distributions. Whether to estimate the mode for each cluster. Must be the same value used in FLAMEMixtureModel.",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"estimate.mode",
            "numValues":"0-1",
            "defaultValue":"F",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Used only for skew distributions and when estimate mode is set to yes. The smaller the increment, the more accurate the estimation, but the slower the estimation step. Must be the same value used in FLAMEMixtureModel.",
            "choices":[],
            "kinds":[],
            "name":"estimation.increment",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"An integer; the seed fixes random computational processes during computation. This does not need to be changed under most circumstances.",
            "choices":[],
            "kinds":[],
            "name":"seed",
            "numValues":"0-1",
            "defaultValue":"123456",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"A prefix for output files.",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<preprocessed.data_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEMixtureModel",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00160:2"
}, "138":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The dataset file - .res, .gct",
            "choices":[],
            "kinds":["Dataset", "gct", "res"],
            "name":"dataset.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"sample info file - .txt",
            "choices":[],
            "kinds":["txt"],
            "name":"sample.info.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The cutoff to determine 'outlier' status.",
            "choices":[],
            "kinds":[],
            "name":"outlier.cutoff",
            "numValues":"0-1",
            "defaultValue":"5",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The percentile to use for pre-filtering the data. All genes with a number of outlier samples less than the top (default 95th) percentile will be removed from further consideration. This value must be between 0 and 1 exclusive.",
            "choices":[],
            "kinds":[],
            "name":"pre-filter.percentile",
            "numValues":"0-1",
            "defaultValue":"0.95",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to continue analysis when the number of genes remaining after pre-filtering is greater than 1000",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"compute.large",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"",
            "fileChoice":true
        },
        {
            "description":"The maximum number of samples that can be considered 'outliers' when comparing two genes. The default is 0, indicating that there can be no overlap.",
            "choices":[],
            "kinds":[],
            "name":"max.overlap",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The number of normal samples that can be considered 'outliers'. The default is 0, meaning that no normals may be outliers.",
            "choices":[],
            "kinds":[],
            "name":"normal.outliers",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A range of gene pairs to plot. (e.g., 2-5) based on the gene pair rank. The ranks are determined by the number of outliers. The more outliers a gene pair has the greater the ranking. Specify none if no gene pair plots should be generated.",
            "choices":[],
            "kinds":[],
            "name":"gene.pairs.to.plot",
            "numValues":"0-1",
            "defaultValue":"1-5",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The name of the output files",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<dataset.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"COPA",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00113:1"
}, "139":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A .zip file containing flow files in .txt or .fcs format. (The files should be all .txt or all .fcs, but not both.)",
            "choices":[],
            "kinds":["zip"],
            "name":"dataset",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"File type of input sample data.",
            "choices":["fcs", "txt"],
            "kinds":[],
            "name":"file.type",
            "numValues":"0-1",
            "defaultValue":"fcs",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The original data scale. 18-bit (default) or 4-decade.",
            "choices":["262144=18-bit", "10000=4-decade"],
            "kinds":[],
            "name":"data.scale",
            "numValues":"0-1",
            "defaultValue":"262144",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Whether to attempt removing dead cells from the samples.",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"remove.dead",
            "numValues":"0-1",
            "defaultValue":"F",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A comma-separated list of channel numbers indicating which columns (antibodies) to keep (e.g., 1, 2, 3, 7).",
            "choices":[],
            "kinds":[],
            "name":"channels",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A comma-separated list of channel/antibody names that corresponds to the channel numbers (e.g., FSC, SSC, CD4, CD45RA).",
            "choices":[],
            "kinds":[],
            "name":"channel.names",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A comma-separated list of scatter channel numbers (e.g., 1, 2, 3).",
            "choices":[],
            "kinds":[],
            "name":"scatter.channels",
            "numValues":"0-1",
            "defaultValue":"1,2",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The transformation to apply",
            "choices":["none", "logicle", "arsinh"],
            "kinds":[],
            "name":"transformation",
            "numValues":"0-1",
            "defaultValue":"logicle",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"A cofactor that tunes the logicle transformation. The cofactor is usually greater than 0 and less than 10.",
            "choices":[],
            "kinds":[],
            "name":"logicle.cofactor",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"A cofactor that tunes the arsinh transformation. The cofactor is 0 usually between 0 exclusively and a few thousand.",
            "choices":[],
            "kinds":[],
            "name":"arsinh.cofactor",
            "numValues":"0-1",
            "defaultValue":"250",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"A prefix for output files",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<dataset_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEPreprocess",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00159:3"
}, "136":{
    "category":"FLAME",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A flow file in .txt or .fcs format for one sample.",
            "choices":[],
            "kinds":["txt", "fcs"],
            "name":"data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"File type of input sample data.",
            "choices":["fcs", "txt"],
            "kinds":[],
            "name":"file.type",
            "numValues":"0-1",
            "defaultValue":"fcs",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The original data scale. 18-bit (default) or 4-decade.",
            "choices":["262144=18-bit", "10000=4-decade"],
            "kinds":[],
            "name":"data.scale",
            "numValues":"0-1",
            "defaultValue":"262144",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"A comma-separated list of channel numbers indicating which columns (antibodies) to keep (e.g., 1, 2, 3, 7).",
            "choices":[],
            "kinds":[],
            "name":"channels",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A comma-separated list of channel or antibody names that corresponds to the channel numbers (e.g., FSC, SSC, CD4, CD45RA).",
            "choices":[],
            "kinds":[],
            "name":"channel.names",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A comma-separated list of scatter channel numbers (e.g., 1, 2, 3).",
            "choices":[],
            "kinds":[],
            "name":"scatter.channels",
            "numValues":"0-1",
            "defaultValue":"1,2",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The transformation(s) to apply",
            "choices":["none", "logicle", "arsinh", "all"],
            "kinds":[],
            "name":"transformation",
            "numValues":"0-1",
            "defaultValue":"logicle",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"The cofactor that tunes the logicle transformation is usually between 0 and 10 exclusively. Specify the lower limit of the cofactor range to examine.",
            "choices":[],
            "kinds":[],
            "name":"logicle.low",
            "numValues":"0-1",
            "defaultValue":"0.5",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The cofactor that tunes the logicle transformation is usually greater than 0 and less than 10. Specify the upper limit of the cofactor range to examine.",
            "choices":[],
            "kinds":[],
            "name":"logicle.high",
            "numValues":"0-1",
            "defaultValue":"5",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The cofactor that tunes the arsinh transformation is usually between 0 and a few thousand. Specify the lower limit of the cofactor range to examine.",
            "choices":[],
            "kinds":[],
            "name":"arsinh.low",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The cofactor that tunes the arsinh transformation is usually between 0 and a few thousand. Specify the upper limit of the cofactor range to examine.",
            "choices":[],
            "kinds":[],
            "name":"arsinh.high",
            "numValues":"0-1",
            "defaultValue":"1000",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A prefix for output files",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<data.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEPreviewTransformation",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00167:2"
}, "137":{
    "category":"FLAME",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A .zip file containing the optimal mixture modeling result of each sample from the output of the FLAMEChooseOptimalClusterNumber module.",
            "choices":[],
            "kinds":["zip"],
            "name":"optimal.g.mixture.model",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"",
            "choices":[],
            "kinds":["txt"],
            "name":"sample.class",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Used only for skew distributions. Whether to estimate the mode for each cluster. Must be the same value used in FLAMEMixtureModel.",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"estimate.mode",
            "numValues":"0-1",
            "defaultValue":"F",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Used only for skew distributions and when estimate mode is set to yes. The smaller the increment, the more accurate the estimation, but the slower the estimation step. Must be the same value used in FLAMEMixtureModel.",
            "choices":[],
            "kinds":[],
            "name":"estimation.increment",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Choose whether to output the intermediate metaclustering results, such as within-class matching results.",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"output.intermediate.results",
            "numValues":"0-1",
            "defaultValue":"F",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A prefix for output files.",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<optimal.g.mixture.model_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEMetacluster",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00162:3"
}, "131":{
    "category":"FLAME",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A flow file in .txt or .fcs format for one sample.",
            "choices":[],
            "kinds":["txt", "fcs"],
            "name":"data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"File type of input sample data.",
            "choices":["fcs", "txt"],
            "kinds":[],
            "name":"file.type",
            "numValues":"0-1",
            "defaultValue":"fcs",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The original data scale. 18-bit (default) or 4-decade.",
            "choices":["262144=18-bit", "10000=4-decade"],
            "kinds":[],
            "name":"data.scale",
            "numValues":"0-1",
            "defaultValue":"262144",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"A comma-separated list of channel numbers indicating which columns (antibodies) to keep (e.g., 1, 2, 3, 7).",
            "choices":[],
            "kinds":[],
            "name":"channels",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A comma-separated list of channel or antibody names that corresponds to the channel numbers (e.g., FSC, SSC, CD4, CD45RA).",
            "choices":[],
            "kinds":[],
            "name":"channel.names",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A comma-separated list of scatter channel numbers (e.g., 1, 2, 3).",
            "choices":[],
            "kinds":[],
            "name":"scatter.channels",
            "numValues":"0-1",
            "defaultValue":"1,2",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The transformation(s) to apply",
            "choices":["none", "logicle", "arsinh", "all"],
            "kinds":[],
            "name":"transformation",
            "numValues":"0-1",
            "defaultValue":"logicle",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"The cofactor that tunes the logicle transformation is usually between 0 and 10 exclusively. Specify the lower limit of the cofactor range to examine.",
            "choices":[],
            "kinds":[],
            "name":"logicle.low",
            "numValues":"0-1",
            "defaultValue":"0.5",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The cofactor that tunes the logicle transformation is usually greater than 0 and less than 10. Specify the upper limit of the cofactor range to examine.",
            "choices":[],
            "kinds":[],
            "name":"logicle.high",
            "numValues":"0-1",
            "defaultValue":"5",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The cofactor that tunes the arsinh transformation is usually between 0 and a few thousand. Specify the lower limit of the cofactor range to examine.",
            "choices":[],
            "kinds":[],
            "name":"arsinh.low",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The cofactor that tunes the arsinh transformation is usually between 0 and a few thousand. Specify the upper limit of the cofactor range to examine.",
            "choices":[],
            "kinds":[],
            "name":"arsinh.high",
            "numValues":"0-1",
            "defaultValue":"1000",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A prefix for output files",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<data.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEPreviewTransformation",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00167:1"
}, "130":{
    "category":"FLAME",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A .zip file containing flow files in .txt or .fcs format. (The files should be all .txt or all .fcs, but not both.)",
            "choices":[],
            "kinds":["zip"],
            "name":"dataset",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"File type of input sample data.",
            "choices":["fcs", "txt"],
            "kinds":[],
            "name":"file.type",
            "numValues":"0-1",
            "defaultValue":"fcs",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The original data scale. 18-bit (default) or 4-decade.",
            "choices":["262144=18-bit", "10000=4-decade"],
            "kinds":[],
            "name":"data.scale",
            "numValues":"0-1",
            "defaultValue":"262144",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Whether to attempt removing dead cells from the samples.",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"remove.dead",
            "numValues":"0-1",
            "defaultValue":"F",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A comma-separated list of channel numbers indicating which columns (antibodies) to keep (e.g., 1, 2, 3, 7).",
            "choices":[],
            "kinds":[],
            "name":"channels",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A comma-separated list of channel/antibody names that corresponds to the channel numbers (e.g., FSC, SSC, CD4, CD45RA).",
            "choices":[],
            "kinds":[],
            "name":"channel.names",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A prefix for output files",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<dataset_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEPreprocess",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00159:2"
}, "143":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A flow file in .txt or .fcs format for one sample.",
            "choices":[],
            "kinds":["txt", "fcs"],
            "name":"data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"File type of input sample data.",
            "choices":["fcs", "txt"],
            "kinds":[],
            "name":"file.type",
            "numValues":"0-1",
            "defaultValue":"fcs",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The original data scale. 18-bit (default) or 4-decade.",
            "choices":["262144=18-bit", "10000=4-decade"],
            "kinds":[],
            "name":"data.scale",
            "numValues":"0-1",
            "defaultValue":"262144",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"A comma-separated list of channel numbers indicating which columns (antibodies) to keep (e.g., 1, 2, 3, 7).",
            "choices":[],
            "kinds":[],
            "name":"channels",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A comma-separated list of channel or antibody names that corresponds to the channel numbers (e.g., FSC, SSC, CD4, CD45RA).",
            "choices":[],
            "kinds":[],
            "name":"channel.names",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A comma-separated list of scatter channel numbers (e.g., 1, 2, 3).",
            "choices":[],
            "kinds":[],
            "name":"scatter.channels",
            "numValues":"0-1",
            "defaultValue":"1,2",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The transformation(s) to apply",
            "choices":["none", "logicle", "arsinh", "all"],
            "kinds":[],
            "name":"transformation",
            "numValues":"0-1",
            "defaultValue":"logicle",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"The cofactor that tunes the logicle transformation is usually between 0 and 10 exclusively. Specify the lower limit of the cofactor range to examine.",
            "choices":[],
            "kinds":[],
            "name":"logicle.low",
            "numValues":"0-1",
            "defaultValue":"0.5",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The cofactor that tunes the logicle transformation is usually greater than 0 and less than 10. Specify the upper limit of the cofactor range to examine.",
            "choices":[],
            "kinds":[],
            "name":"logicle.high",
            "numValues":"0-1",
            "defaultValue":"5",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The cofactor that tunes the arsinh transformation is usually between 0 and a few thousand. Specify the lower limit of the cofactor range to examine.",
            "choices":[],
            "kinds":[],
            "name":"arsinh.low",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The cofactor that tunes the arsinh transformation is usually between 0 and a few thousand. Specify the upper limit of the cofactor range to examine.",
            "choices":[],
            "kinds":[],
            "name":"arsinh.high",
            "numValues":"0-1",
            "defaultValue":"1000",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A prefix for output files",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<data.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEPreviewTransformation",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00167:3"
}, "144":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A membership.txt or member.txt file output from one of the FLAME modules. ",
            "choices":[],
            "kinds":["txt"],
            "name":"membership.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A parameters.txt file output from one of the FLAME modules. ",
            "choices":[],
            "kinds":["txt"],
            "name":"parameters.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A comma separated list of the index or names of three channels/antibodies to plot",
            "choices":[],
            "kinds":[],
            "name":"channels.to.plot",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A prefix for output files",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<parameters.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEContourDataGenerator",
    "write":false,
    "tags":["txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00163:1"
}, "145":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset file - .res, .gct",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"expression.dataset",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Gene sets database from GSEA website.",
            "choices":["c1.all.v2.5.symbols.gmt=c1.all.v2.5.symbols.gmt [Positional]", "c2.all.v2.5.symbols.gmt=c2.all.v2.5.symbols.gmt [Curated]", "c2.biocarta.v2.5.symbols.gmt=c2.biocarta.v2.5.symbols.gmt [Curated]", "c2.cgp.v2.5.symbols.gmt=c2.cgp.v2.5.symbols.gmt [Curated]", "c2.cp.v2.5.symbols.gmt=c2.cp.v2.5.symbols.gmt [Curated]", "c2.genmapp.v2.5.symbols.gmt=c2.genmapp.v2.5.symbols.gmt [Curated]", "c2.kegg.v2.5.symbols.gmt=c2.kegg.v2.5.symbols.gmt [Curated]", "c3.all.v2.5.symbols.gmt=c3.all.v2.5.symbols.gmt [Motif]", "c3.mir.v2.5.symbols.gmt=c3.mir.v2.5.symbols.gmt [Motif]", "c3.tft.v2.5.symbols.gmt=c3.tft.v2.5.symbols.gmt [Motif]", "c4.all.v2.5.symbols.gmt=c4.all.v2.5.symbols.gmt [Computational]", "c4.cgn.v2.5.symbols.gmt=c4.cgn.v2.5.symbols.gmt [Computational]", "c4.cm.v2.5.symbols.gmt=c4.cm.v2.5.symbols.gmt [Computational]", "c5.all.v2.5.symbols.gmt=c5.all.v2.5.symbols.gmt [Gene ontology]", "c5.cc.v2.5.symbols.gmt=c5.cc.v2.5.symbols.gmt [Gene ontology]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c5.mf.v2.5.symbols.gmt=c5.mf.v2.5.symbols.gmt [Gene ontology]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c1.v2.symbols.gmt=c1.v2.symbols.gmt [Positional]", "c2.v2.symbols.gmt=c2.v2.symbols.gmt [Curated]", "c3.v2.symbols.gmt=c3.v2.symbols.gmt [Motif]", "c4.v2.symbols.gmt=c4.v2.symbols.gmt [Computational]", "c4.v1.symbols.gmt=c4.v1.symbols.gmt [Computational]", "c3.v1.symbols.gmt=c3.v1.symbols.gmt [Motif]", "c2.v1.symbols.gmt=c2.v1.symbols.gmt [Curated]", "c1.v1.symbols.gmt=c1.v1.symbols.gmt [Positional]"],
            "kinds":[],
            "name":"gene.sets.database",
            "numValues":"0-1",
            "defaultValue":"c1.all.v2.5.symbols.gmt",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets database - .gmt, .gmx, .grp. Upload a gene set if your gene set is not listed as a choice for the gene sets database parameter.",
            "choices":[],
            "kinds":["gmt", "gmx", "grp"],
            "name":"gene.sets.database.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Number of permutations to perform",
            "choices":[],
            "kinds":[],
            "name":"number.of.permutations",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Cls file - .cls, must be binary",
            "choices":[],
            "kinds":["cls"],
            "name":"phenotype.labels",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Select true to have GSEA collapse each probe set in the expression dataset into a single vector for the gene, which gets identified by its gene symbol.",
            "choices":["false", "true"],
            "kinds":[],
            "name":"collapse.dataset",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Type of permutations to perform",
            "choices":["phenotype", "tag"],
            "kinds":[],
            "name":"permutation.type",
            "numValues":"0-1",
            "defaultValue":"phenotype",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Chip file from GSEA website.",
            "choices":["ftp.broad.mit.edu://pub/gsea/annotations/GENE_SYMBOL.chip=GENE_SYMBOL.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Seq_Accession.chip=Seq_Accession.chip", "ftp.broad.mit.edu://pub/gsea/annotations/SEQ_ACCESSION.chip=SEQ_ACCESSION.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Hu35KsubA.chip=Hu35KsubA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Hu35KsubB.chip=Hu35KsubB.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Hu35KsubC.chip=Hu35KsubC.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Hu35KsubD.chip=Hu35KsubD.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Hu6800.chip=Hu6800.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_Focus.chip=HG_Focus.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U133A.chip=HG_U133A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U133AAOFAV2.chip=HG_U133AAOFAV2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U133A_2.chip=HG_U133A_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U133B.chip=HG_U133B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U133_Plus_2.chip=HG_U133_Plus_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U95Av2.chip=HG_U95Av2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U95B.chip=HG_U95B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U95C.chip=HG_U95C.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U95D.chip=HG_U95D.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U95E.chip=HG_U95E.chip", "ftp.broad.mit.edu://pub/gsea/annotations/AFFYMETRIX.chip=AFFYMETRIX.chip", "ftp.broad.mit.edu://pub/gsea/annotations/AG.chip=AG.chip", "ftp.broad.mit.edu://pub/gsea/annotations/APPLERA_ABI1700.chip=APPLERA_ABI1700.chip", "ftp.broad.mit.edu://pub/gsea/annotations/ATH1_121501.chip=ATH1_121501.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_Human1A.chip=Agilent_Human1A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_Human1Av2.chip=Agilent_Human1Av2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_Human1B.chip=Agilent_Human1B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_Human1_cDNA.chip=Agilent_Human1_cDNA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_HumanGenome.chip=Agilent_HumanGenome.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_MouseDev.chip=Agilent_MouseDev.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_MouseGenome.chip=Agilent_MouseGenome.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_MouseOligo.chip=Agilent_MouseOligo.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_Mouse_cDNA.chip=Agilent_Mouse_cDNA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_RatGenome_G4131A.chip=Agilent_RatGenome_G4131A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_RatOligo.chip=Agilent_RatOligo.chip", "ftp.broad.mit.edu://pub/gsea/annotations/AtlasMouse1.2.chip=AtlasMouse1.2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/AtlasRat1.2.chip=AtlasRat1.2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/BIAO.chip=BIAO.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Bovine.chip=Bovine.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CNMCMuscleChip.chip=CNMCMuscleChip.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Caltech16KMouse.chip=Caltech16KMouse.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Caltech16KOligoMouse.chip=Caltech16KOligoMouse.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Canine_2.chip=Canine_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Clontech_Atlas_13K.chip=Clontech_Atlas_13K.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Clontech_BD_Atlas.chip=Clontech_BD_Atlas.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CodeLink_Human_Whole_Genome.chip=CodeLink_Human_Whole_Genome.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CodeLink_UniSet_Human_20K_I_Bioarray.chip=CodeLink_UniSet_Human_20K_I_Bioarray.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CodeLink_UniSet_Human_II_Bioarray.chip=CodeLink_UniSet_Human_II_Bioarray.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CodeLink_UniSet_Human_I_Bioarray.chip=CodeLink_UniSet_Human_I_Bioarray.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CodeLink_UniSet_Rat_I_Bioarray.chip=CodeLink_UniSet_Rat_I_Bioarray.chip", "ftp.broad.mit.edu://pub/gsea/annotations/DrosGenome1.chip=DrosGenome1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Drosophila_2.chip=Drosophila_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/G4110A.chip=G4110A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/G4110Av2.chip=G4110Av2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/GenosysCytokineV2.chip=GenosysCytokineV2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HC_G110.chip=HC_G110.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HPCGGCompugenAnnotations.chip=HPCGGCompugenAnnotations.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HT_HG_U133A.chip=HT_HG_U133A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HT_HG_U133A_EA.chip=HT_HG_U133A_EA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HU6800.chip=HU6800.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illimina_Mus6_v1_1.chip=Illimina_Mus6_v1_1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illimuna_Mus6_v1.chip=Illimuna_Mus6_v1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_Hum6_v1.chip=Illumina_Hum6_v1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_Hum6_v2.chip=Illumina_Hum6_v2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_HumRef8_v1.chip=Illumina_HumRef8_v1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_HumRef8_v2.chip=Illumina_HumRef8_v2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_Human.chip=Illumina_Human.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_MusRef8_v1.chip=Illumina_MusRef8_v1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_MusRef8_v1_1.chip=Illumina_MusRef8_v1_1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_RatRef12_v1.chip=Illumina_RatRef12_v1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MG_U74Av2.chip=MG_U74Av2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MG_U74Bv2.chip=MG_U74Bv2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MG_U74Cv2.chip=MG_U74Cv2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MOE430A.chip=MOE430A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MOE430B.chip=MOE430B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MWG_Human_30K_A.chip=MWG_Human_30K_A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MWG_Human_30K_B.chip=MWG_Human_30K_B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mouse430A_2.chip=Mouse430A_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mouse430_2.chip=Mouse430_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mu11KsubA.chip=Mu11KsubA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mu11KsubB.chip=Mu11KsubB.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mu19KsubA.chip=Mu19KsubA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mu19KsubB.chip=Mu19KsubB.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mu19KsubC.chip=Mu19KsubC.chip", "ftp.broad.mit.edu://pub/gsea/annotations/NIA15k.chip=NIA15k.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Netherland_cancer_institute_operon_human_35k.chip=Netherland_cancer_institute_operon_human_35k.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Netherland_cancer_institute_operon_mouse_FOOk.chip=Netherland_cancer_institute_operon_mouse_FOOk.chip", "ftp.broad.mit.edu://pub/gsea/annotations/OPERON_HUMANv2.chip=OPERON_HUMANv2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/OPERON_HUMANv3.chip=OPERON_HUMANv3.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RAE230A.chip=RAE230A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RAE230B.chip=RAE230B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RG_U34A.chip=RG_U34A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RG_U34B.chip=RG_U34B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RG_U34C.chip=RG_U34C.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RN_U34.chip=RN_U34.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RT_U34.chip=RT_U34.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RZPD_Human_Ensembl1.1.chip=RZPD_Human_Ensembl1.1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RZPD_Human_ORF_Clones_Gateway.chip=RZPD_Human_ORF_Clones_Gateway.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RZPD_Human_Unigene3.1.chip=RZPD_Human_Unigene3.1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Rat230_2.chip=Rat230_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RefSeq_NP_Human.chip=RefSeq_NP_Human.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RefSeq_NP_Mouse.chip=RefSeq_NP_Mouse.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RefSeq_NP_Rat.chip=RefSeq_NP_Rat.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RefSeq_human.chip=RefSeq_human.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Research_Genetics.chip=Research_Genetics.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Rosetta.chip=Rosetta.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Rosetta50K.chip=Rosetta50K.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Stanford.chip=Stanford.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Stanford_Source_Accessions.chip=Stanford_Source_Accessions.chip", "ftp.broad.mit.edu://pub/gsea/annotations/TIGR_31K_Human_Set.chip=TIGR_31K_Human_Set.chip", "ftp.broad.mit.edu://pub/gsea/annotations/TIGR_40K_Human_Set.chip=TIGR_40K_Human_Set.chip", "ftp.broad.mit.edu://pub/gsea/annotations/TRC.chip=TRC.chip", "ftp.broad.mit.edu://pub/gsea/annotations/TRC_DB.chip=TRC_DB.chip", "ftp.broad.mit.edu://pub/gsea/annotations/TRC_DB_v1.chip=TRC_DB_v1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/U133_X3P.chip=U133_X3P.chip", "ftp.broad.mit.edu://pub/gsea/annotations/UCLA_NIH_33K.chip=UCLA_NIH_33K.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Zebrafish.chip=Zebrafish.chip", "ftp.broad.mit.edu://pub/gsea/annotations/labonweb_human.chip=labonweb_human.chip", "ftp.broad.mit.edu://pub/gsea/annotations/lymphochip.chip=lymphochip.chip"],
            "kinds":[],
            "name":"chip.platform",
            "numValues":"0-1",
            "defaultValue":"ftp.broad.mit.edu://pub/gsea/annotations/GENE_SYMBOL.chip",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Chip to use. Upload a chip file if your chip is not listed as a choice for the chip platform parameter.",
            "choices":[],
            "kinds":[],
            "name":"chip.platform.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The statistic used to score hits (gene set members) and misses (non-members)",
            "choices":["classic", "weighted", "weighted_p2", "weighted_p1.5"],
            "kinds":[],
            "name":"scoring.scheme",
            "numValues":"0-1",
            "defaultValue":"weighted",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Class separation metric - gene markers are ranked using this metric to produce the gene list",
            "choices":["Cosine", "Euclidean", "Manhattan", "Pearson", "FeatureVariation", "tTest", "Signal2Noise", "None", "RegressionSlope", "Bhattacharyya", "Norm.Pearson", "Diff_of_Means", "Diff_of_Medians", "Ratio_of_Means", "Ratio_of_Medians", "log2_ratio_of_means", "Feature_stddev_by_mean"],
            "kinds":[],
            "name":"metric.for.ranking.genes",
            "numValues":"0-1",
            "defaultValue":"Signal2Noise",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Direction in which the gene list should be ordered",
            "choices":["ascending", "descending"],
            "kinds":[],
            "name":"gene.list.ordering.mode",
            "numValues":"0-1",
            "defaultValue":"descending",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Mode in which scores from the gene list should be considered",
            "choices":["real", "abs"],
            "kinds":[],
            "name":"gene.list.sorting.mode",
            "numValues":"0-1",
            "defaultValue":"real",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets larger than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"max.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"500",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Gene sets smaller than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"min.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"15",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Collapsing mode",
            "choices":["Max_probe", "Median_of_probes"],
            "kinds":[],
            "name":"collapsing.mode.for.probe.sets.with.more.than.one.match",
            "numValues":"0-1",
            "defaultValue":"Max_probe",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Normalization mode",
            "choices":["meandiv", "None"],
            "kinds":[],
            "name":"normalization.mode",
            "numValues":"0-1",
            "defaultValue":"meandiv",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Type of phenotype randomization (does not apply to gene set permutations)",
            "choices":["equalize_and_balance", "no_balance"],
            "kinds":[],
            "name":"randomization.mode",
            "numValues":"0-1",
            "defaultValue":"no_balance",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"If there is no known gene symbol match for a probe set, omit it from the collapsed dataset",
            "choices":["false", "true"],
            "kinds":[],
            "name":"omit.features.with.no.symbol.match",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Create detailed gene set report (heat map, mountain plot, etc.) for every enriched gene set",
            "choices":["false", "true"],
            "kinds":[],
            "name":"make.detailed.gene.set.report",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Use the median of each class instead of the mean for the class separation metrics",
            "choices":["true", "false"],
            "kinds":[],
            "name":"median.for.class.metrics",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Number of markers",
            "choices":[],
            "kinds":[],
            "name":"number.of.markers",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Plot GSEA mountain and related plots for the top sets of each phenotype",
            "choices":[],
            "kinds":[],
            "name":"plot.graphs.for.the.top.sets.of.each.phenotype",
            "numValues":"0-1",
            "defaultValue":"20",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Seed to use for randomization",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"timestamp",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to save random ranked lists",
            "choices":["false", "true"],
            "kinds":[],
            "name":"save.random.ranked.lists",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.file.name",
            "numValues":"0-1",
            "defaultValue":"<expression.dataset_basename>.zip",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"GSEA",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"6",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00072:6"
}, "146":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"cn file that contains sorted SNPs and raw copy number value per probe. (note: data should not be in log2)",
            "choices":[],
            "kinds":["cn"],
            "name":"copy.number.input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "numValues":"0-1",
            "defaultValue":"<copy.number.input.file_basename>.glad",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"GLAD",
    "write":false,
    "tags":["glad"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00087:2"
}, "147":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset file - .res, .gct",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"expression.dataset",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Gene sets database from GSEA website.",
            "choices":["c1.all.v2.5.symbols.gmt=c1.all.v2.5.symbols.gmt [Positional]", "c2.all.v2.5.symbols.gmt=c2.all.v2.5.symbols.gmt [Curated]", "c2.biocarta.v2.5.symbols.gmt=c2.biocarta.v2.5.symbols.gmt [Curated]", "c2.cgp.v2.5.symbols.gmt=c2.cgp.v2.5.symbols.gmt [Curated]", "c2.cp.v2.5.symbols.gmt=c2.cp.v2.5.symbols.gmt [Curated]", "c2.genmapp.v2.5.symbols.gmt=c2.genmapp.v2.5.symbols.gmt [Curated]", "c2.kegg.v2.5.symbols.gmt=c2.kegg.v2.5.symbols.gmt [Curated]", "c3.all.v2.5.symbols.gmt=c3.all.v2.5.symbols.gmt [Motif]", "c3.mir.v2.5.symbols.gmt=c3.mir.v2.5.symbols.gmt [Motif]", "c3.tft.v2.5.symbols.gmt=c3.tft.v2.5.symbols.gmt [Motif]", "c4.all.v2.5.symbols.gmt=c4.all.v2.5.symbols.gmt [Computational]", "c4.cgn.v2.5.symbols.gmt=c4.cgn.v2.5.symbols.gmt [Computational]", "c4.cm.v2.5.symbols.gmt=c4.cm.v2.5.symbols.gmt [Computational]", "c5.all.v2.5.symbols.gmt=c5.all.v2.5.symbols.gmt [Gene ontology]", "c5.cc.v2.5.symbols.gmt=c5.cc.v2.5.symbols.gmt [Gene ontology]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c5.mf.v2.5.symbols.gmt=c5.mf.v2.5.symbols.gmt [Gene ontology]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c1.v2.symbols.gmt=c1.v2.symbols.gmt [Positional]", "c2.v2.symbols.gmt=c2.v2.symbols.gmt [Curated]", "c3.v2.symbols.gmt=c3.v2.symbols.gmt [Motif]", "c4.v2.symbols.gmt=c4.v2.symbols.gmt [Computational]", "c4.v1.symbols.gmt=c4.v1.symbols.gmt [Computational]", "c3.v1.symbols.gmt=c3.v1.symbols.gmt [Motif]", "c2.v1.symbols.gmt=c2.v1.symbols.gmt [Curated]", "c1.v1.symbols.gmt=c1.v1.symbols.gmt [Positional]"],
            "kinds":[],
            "name":"gene.sets.database",
            "numValues":"0-1",
            "defaultValue":"c1.all.v2.5.symbols.gmt",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets database - .gmt, .gmx, .grp. Upload a gene set if your gene set is not listed as a choice for the gene sets database parameter.",
            "choices":[],
            "kinds":["gmt", "gmx", "grp"],
            "name":"gene.sets.database.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Number of permutations to perform",
            "choices":[],
            "kinds":[],
            "name":"number.of.permutations",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Cls file - .cls, must be binary",
            "choices":[],
            "kinds":["cls"],
            "name":"phenotype.labels",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Select true to have GSEA collapse each probe set in the expression dataset into a single vector for the gene, which gets identified by its gene symbol.",
            "choices":["false", "true"],
            "kinds":[],
            "name":"collapse.dataset",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Type of permutations to perform",
            "choices":["phenotype", "tag"],
            "kinds":[],
            "name":"permutation.type",
            "numValues":"0-1",
            "defaultValue":"phenotype",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Chip file from GSEA website.",
            "choices":["ftp.broad.mit.edu://pub/gsea/annotations/GENE_SYMBOL.chip=GENE_SYMBOL.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Seq_Accession.chip=Seq_Accession.chip", "ftp.broad.mit.edu://pub/gsea/annotations/SEQ_ACCESSION.chip=SEQ_ACCESSION.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Hu35KsubA.chip=Hu35KsubA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Hu35KsubB.chip=Hu35KsubB.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Hu35KsubC.chip=Hu35KsubC.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Hu35KsubD.chip=Hu35KsubD.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Hu6800.chip=Hu6800.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_Focus.chip=HG_Focus.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U133A.chip=HG_U133A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U133AAOFAV2.chip=HG_U133AAOFAV2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U133A_2.chip=HG_U133A_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U133B.chip=HG_U133B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U133_Plus_2.chip=HG_U133_Plus_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U95Av2.chip=HG_U95Av2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U95B.chip=HG_U95B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U95C.chip=HG_U95C.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U95D.chip=HG_U95D.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U95E.chip=HG_U95E.chip", "ftp.broad.mit.edu://pub/gsea/annotations/AFFYMETRIX.chip=AFFYMETRIX.chip", "ftp.broad.mit.edu://pub/gsea/annotations/AG.chip=AG.chip", "ftp.broad.mit.edu://pub/gsea/annotations/APPLERA_ABI1700.chip=APPLERA_ABI1700.chip", "ftp.broad.mit.edu://pub/gsea/annotations/ATH1_121501.chip=ATH1_121501.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_Human1A.chip=Agilent_Human1A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_Human1Av2.chip=Agilent_Human1Av2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_Human1B.chip=Agilent_Human1B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_Human1_cDNA.chip=Agilent_Human1_cDNA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_HumanGenome.chip=Agilent_HumanGenome.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_MouseDev.chip=Agilent_MouseDev.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_MouseGenome.chip=Agilent_MouseGenome.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_MouseOligo.chip=Agilent_MouseOligo.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_Mouse_cDNA.chip=Agilent_Mouse_cDNA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_RatGenome_G4131A.chip=Agilent_RatGenome_G4131A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_RatOligo.chip=Agilent_RatOligo.chip", "ftp.broad.mit.edu://pub/gsea/annotations/AtlasMouse1.2.chip=AtlasMouse1.2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/AtlasRat1.2.chip=AtlasRat1.2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/BIAO.chip=BIAO.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Bovine.chip=Bovine.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CNMCMuscleChip.chip=CNMCMuscleChip.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Caltech16KMouse.chip=Caltech16KMouse.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Caltech16KOligoMouse.chip=Caltech16KOligoMouse.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Canine_2.chip=Canine_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Clontech_Atlas_13K.chip=Clontech_Atlas_13K.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Clontech_BD_Atlas.chip=Clontech_BD_Atlas.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CodeLink_Human_Whole_Genome.chip=CodeLink_Human_Whole_Genome.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CodeLink_UniSet_Human_20K_I_Bioarray.chip=CodeLink_UniSet_Human_20K_I_Bioarray.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CodeLink_UniSet_Human_II_Bioarray.chip=CodeLink_UniSet_Human_II_Bioarray.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CodeLink_UniSet_Human_I_Bioarray.chip=CodeLink_UniSet_Human_I_Bioarray.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CodeLink_UniSet_Rat_I_Bioarray.chip=CodeLink_UniSet_Rat_I_Bioarray.chip", "ftp.broad.mit.edu://pub/gsea/annotations/DrosGenome1.chip=DrosGenome1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Drosophila_2.chip=Drosophila_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/G4110A.chip=G4110A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/G4110Av2.chip=G4110Av2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/GenosysCytokineV2.chip=GenosysCytokineV2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HC_G110.chip=HC_G110.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HPCGGCompugenAnnotations.chip=HPCGGCompugenAnnotations.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HT_HG_U133A.chip=HT_HG_U133A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HT_HG_U133A_EA.chip=HT_HG_U133A_EA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HU6800.chip=HU6800.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illimina_Mus6_v1_1.chip=Illimina_Mus6_v1_1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illimuna_Mus6_v1.chip=Illimuna_Mus6_v1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_Hum6_v1.chip=Illumina_Hum6_v1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_Hum6_v2.chip=Illumina_Hum6_v2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_HumRef8_v1.chip=Illumina_HumRef8_v1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_HumRef8_v2.chip=Illumina_HumRef8_v2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_Human.chip=Illumina_Human.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_MusRef8_v1.chip=Illumina_MusRef8_v1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_MusRef8_v1_1.chip=Illumina_MusRef8_v1_1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_RatRef12_v1.chip=Illumina_RatRef12_v1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MG_U74Av2.chip=MG_U74Av2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MG_U74Bv2.chip=MG_U74Bv2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MG_U74Cv2.chip=MG_U74Cv2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MOE430A.chip=MOE430A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MOE430B.chip=MOE430B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MWG_Human_30K_A.chip=MWG_Human_30K_A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MWG_Human_30K_B.chip=MWG_Human_30K_B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mouse430A_2.chip=Mouse430A_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mouse430_2.chip=Mouse430_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mu11KsubA.chip=Mu11KsubA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mu11KsubB.chip=Mu11KsubB.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mu19KsubA.chip=Mu19KsubA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mu19KsubB.chip=Mu19KsubB.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mu19KsubC.chip=Mu19KsubC.chip", "ftp.broad.mit.edu://pub/gsea/annotations/NIA15k.chip=NIA15k.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Netherland_cancer_institute_operon_human_35k.chip=Netherland_cancer_institute_operon_human_35k.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Netherland_cancer_institute_operon_mouse_FOOk.chip=Netherland_cancer_institute_operon_mouse_FOOk.chip", "ftp.broad.mit.edu://pub/gsea/annotations/OPERON_HUMANv2.chip=OPERON_HUMANv2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/OPERON_HUMANv3.chip=OPERON_HUMANv3.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RAE230A.chip=RAE230A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RAE230B.chip=RAE230B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RG_U34A.chip=RG_U34A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RG_U34B.chip=RG_U34B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RG_U34C.chip=RG_U34C.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RN_U34.chip=RN_U34.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RT_U34.chip=RT_U34.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RZPD_Human_Ensembl1.1.chip=RZPD_Human_Ensembl1.1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RZPD_Human_ORF_Clones_Gateway.chip=RZPD_Human_ORF_Clones_Gateway.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RZPD_Human_Unigene3.1.chip=RZPD_Human_Unigene3.1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Rat230_2.chip=Rat230_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RefSeq_NP_Human.chip=RefSeq_NP_Human.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RefSeq_NP_Mouse.chip=RefSeq_NP_Mouse.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RefSeq_NP_Rat.chip=RefSeq_NP_Rat.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RefSeq_human.chip=RefSeq_human.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Research_Genetics.chip=Research_Genetics.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Rosetta.chip=Rosetta.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Rosetta50K.chip=Rosetta50K.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Stanford.chip=Stanford.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Stanford_Source_Accessions.chip=Stanford_Source_Accessions.chip", "ftp.broad.mit.edu://pub/gsea/annotations/TIGR_31K_Human_Set.chip=TIGR_31K_Human_Set.chip", "ftp.broad.mit.edu://pub/gsea/annotations/TIGR_40K_Human_Set.chip=TIGR_40K_Human_Set.chip", "ftp.broad.mit.edu://pub/gsea/annotations/TRC.chip=TRC.chip", "ftp.broad.mit.edu://pub/gsea/annotations/TRC_DB.chip=TRC_DB.chip", "ftp.broad.mit.edu://pub/gsea/annotations/TRC_DB_v1.chip=TRC_DB_v1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/U133_X3P.chip=U133_X3P.chip", "ftp.broad.mit.edu://pub/gsea/annotations/UCLA_NIH_33K.chip=UCLA_NIH_33K.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Zebrafish.chip=Zebrafish.chip", "ftp.broad.mit.edu://pub/gsea/annotations/labonweb_human.chip=labonweb_human.chip", "ftp.broad.mit.edu://pub/gsea/annotations/lymphochip.chip=lymphochip.chip"],
            "kinds":[],
            "name":"chip.platform",
            "numValues":"0-1",
            "defaultValue":"ftp.broad.mit.edu://pub/gsea/annotations/GENE_SYMBOL.chip",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Chip to use. Upload a chip file if your chip is not listed as a choice for the chip platform parameter.",
            "choices":[],
            "kinds":[],
            "name":"chip.platform.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The statistic used to score hits (gene set members) and misses (non-members)",
            "choices":["classic", "weighted", "weighted_p2", "weighted_p1.5"],
            "kinds":[],
            "name":"scoring.scheme",
            "numValues":"0-1",
            "defaultValue":"weighted",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Class separation metric - gene markers are ranked using this metric to produce the gene list",
            "choices":["Cosine", "Euclidean", "Manhattan", "Pearson", "FeatureVariation", "tTest", "Signal2Noise", "None", "RegressionSlope", "Bhattacharyya", "Norm.Pearson", "Diff_of_Means", "Diff_of_Medians", "Ratio_of_Means", "Ratio_of_Medians", "log2_ratio_of_means", "Feature_stddev_by_mean"],
            "kinds":[],
            "name":"metric.for.ranking.genes",
            "numValues":"0-1",
            "defaultValue":"Signal2Noise",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Direction in which the gene list should be ordered",
            "choices":["ascending", "descending"],
            "kinds":[],
            "name":"gene.list.ordering.mode",
            "numValues":"0-1",
            "defaultValue":"descending",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Mode in which scores from the gene list should be considered",
            "choices":["real", "abs"],
            "kinds":[],
            "name":"gene.list.sorting.mode",
            "numValues":"0-1",
            "defaultValue":"real",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets larger than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"max.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"500",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Gene sets smaller than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"min.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"15",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Collapsing mode",
            "choices":["Max_probe", "Median_of_probes"],
            "kinds":[],
            "name":"collapsing.mode.for.probe.sets.with.more.than.one.match",
            "numValues":"0-1",
            "defaultValue":"Max_probe",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Normalization mode",
            "choices":["meandiv", "None"],
            "kinds":[],
            "name":"normalization.mode",
            "numValues":"0-1",
            "defaultValue":"meandiv",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Type of phenotype randomization (does not apply to gene set permutations)",
            "choices":["equalize_and_balance", "no_balance"],
            "kinds":[],
            "name":"randomization.mode",
            "numValues":"0-1",
            "defaultValue":"no_balance",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"If there is no known gene symbol match for a probe set, omit it from the collapsed dataset",
            "choices":["false", "true"],
            "kinds":[],
            "name":"omit.features.with.no.symbol.match",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Create detailed gene set report (heat map, mountain plot, etc.) for every enriched gene set",
            "choices":["false", "true"],
            "kinds":[],
            "name":"make.detailed.gene.set.report",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Use the median of each class instead of the mean for the class separation metrics",
            "choices":["true", "false"],
            "kinds":[],
            "name":"median.for.class.metrics",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Number of markers",
            "choices":[],
            "kinds":[],
            "name":"number.of.markers",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Plot GSEA mountain and related plots for the top sets of each phenotype",
            "choices":[],
            "kinds":[],
            "name":"plot.graphs.for.the.top.sets.of.each.phenotype",
            "numValues":"0-1",
            "defaultValue":"20",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Seed to use for randomization",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"timestamp",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to save random ranked lists",
            "choices":["false", "true"],
            "kinds":[],
            "name":"save.random.ranked.lists",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.file.name",
            "numValues":"0-1",
            "defaultValue":"<expression.dataset_basename>.zip",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"GSEA",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"7",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00072:7"
}, "148":{
    "category":"caBIG",
    "description":"description goes here",
     "inputs":[
        {
            "description":"URL for caArray server.",
            "choices":[],
            "kinds":[],
            "name":"url",
            "numValues":"0-1",
            "defaultValue":"http://array.nci.nih.gov:8080",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Title or identifier of the caArray experiment to import data from.",
            "choices":[],
            "kinds":[],
            "name":"experiment",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Type of bioassay data to be retrieved.",
            "choices":["RAW", "DERIVED"],
            "kinds":[],
            "name":"type",
            "numValues":"0-1",
            "defaultValue":"RAW",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Data file extension to be retrieved.",
            "choices":[],
            "kinds":[],
            "name":"extension",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Name of the zip file to be created.",
            "choices":[],
            "kinds":[],
            "name":"zipFileName",
            "numValues":"0-1",
            "defaultValue":"<experiment>.zip",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Username for caArray server",
            "choices":[],
            "kinds":[],
            "name":"username",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Password for caArray server",
            "choices":[],
            "kinds":[],
            "name":"password",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"PASSWORD",
            "fileChoice":false
        }
    ],
    "name":"CaArray2.3.0Importer",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00171:2"
}, "149":{
    "category":"caBIG",
    "description":"description goes here",
     "inputs":[
        {
            "description":"URL for caArray server.",
            "choices":[],
            "kinds":[],
            "name":"url",
            "numValues":"0-1",
            "defaultValue":"https://array.nci.nih.gov:8080",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Title or identifier of the caArray experiment to import data from.",
            "choices":[],
            "kinds":[],
            "name":"experiment",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Type of bioassay data to be retrieved.",
            "choices":["RAW", "DERIVED"],
            "kinds":[],
            "name":"type",
            "numValues":"0-1",
            "defaultValue":"RAW",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Data file extension to be retrieved.",
            "choices":[],
            "kinds":[],
            "name":"extension",
            "numValues":"0-1",
            "defaultValue":"CEL",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Name of the zip file to be created.",
            "choices":[],
            "kinds":[],
            "name":"zipFileName",
            "numValues":"0-1",
            "defaultValue":"<experiment>.zip",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Username for caArray server",
            "choices":[],
            "kinds":[],
            "name":"username",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Password for caArray server",
            "choices":[],
            "kinds":[],
            "name":"password",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"PASSWORD",
            "fileChoice":false
        },
        {
            "description":"Use generated temporary filenames for downloaded files.",
            "choices":["true", "false"],
            "kinds":[],
            "name":"useGeneratedTempNames",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"CaArray2.1.0Importer",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00171:1"
}, "140":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A .zip file containing mixture modeling results from the FLAMEMixtureModel module",
            "choices":[],
            "kinds":["zip"],
            "name":"mixture.model",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Criterion used for determining optimal number of clusters",
            "choices":["AIC=Akaike Information Criterion (AIC)", "BIC=Bayesian Information Criterion (BIC)", "SWR=Scale-free Weighted Ratio (SWR)", "distance.ratio=distance ratio", "intercluster.distance=intercluster distance"],
            "kinds":[],
            "name":"method",
            "numValues":"0-1",
            "defaultValue":"SWR",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"An integer; the seed fixes random computational processes during computation. This does not need to be changed under most circumstances.",
            "choices":[],
            "kinds":[],
            "name":"seed",
            "numValues":"0-1",
            "defaultValue":"123456",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"A prefix for output files",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<mixture.model_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEChooseOptimalClusterNumber",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00161:3"
}, "142":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A .zip file containing the optimal mixture modeling result of each sample from the output of the FLAMEChooseOptimalClusterNumber module.",
            "choices":[],
            "kinds":["zip"],
            "name":"optimal.g.mixture.model",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"",
            "choices":[],
            "kinds":["txt"],
            "name":"sample.class",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Used only for skew distributions. Whether to estimate the mode for each cluster. Must be the same value used in FLAMEMixtureModel.",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"estimate.mode",
            "numValues":"0-1",
            "defaultValue":"F",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Used only for skew distributions and when estimate mode is set to yes. The smaller the increment, the more accurate the estimation, but the slower the estimation step. Must be the same value used in FLAMEMixtureModel.",
            "choices":[],
            "kinds":[],
            "name":"estimation.increment",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Choose whether to output the intermediate metaclustering results, such as within-class matching results.",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"output.intermediate.results",
            "numValues":"0-1",
            "defaultValue":"F",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A prefix for output files.",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<optimal.g.mixture.model_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEMetacluster",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00162:4"
}, "141":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A .zip file containing preprocessed flow sample files in tab-delimited .txt format.",
            "choices":[],
            "kinds":["zip"],
            "name":"preprocessed.data",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"An integer; minimal number of clusters to be fit for each sample.",
            "choices":[],
            "kinds":[],
            "name":"g.min",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"An integer; maximal number of clusters to be fit for each sample. g max should be greater or equal to g min.",
            "choices":[],
            "kinds":[],
            "name":"g.max",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Density distribution to be used for clustering",
            "choices":["normal", "t", "skewn=skew normal", "skewt=skew t"],
            "kinds":[],
            "name":"density",
            "numValues":"0-1",
            "defaultValue":"skewt",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A comma-separated list of either channel numbers (e.g., 1, 2, 3, 7) or channel names (e.g., CD4, CD45RA, ZAP70); these denote which antibodies in the (preprocessed) data sample to be used for clustering.",
            "choices":[],
            "kinds":[],
            "name":"channels.to.cluster",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Used only for skew distributions. Whether to estimate the mode for each cluster. Must be the same value used in FLAMEMixtureModel.",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"estimate.mode",
            "numValues":"0-1",
            "defaultValue":"F",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Used only for skew distributions and when estimate mode is set to yes. The smaller the increment, the more accurate the estimation, but the slower the estimation step. Must be the same value used in FLAMEMixtureModel.",
            "choices":[],
            "kinds":[],
            "name":"estimation.increment",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"An integer; the seed fixes random computational processes during computation. This does not need to be changed under most circumstances.",
            "choices":[],
            "kinds":[],
            "name":"seed",
            "numValues":"0-1",
            "defaultValue":"123456",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"A prefix for output files.",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<preprocessed.data_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEMixtureModel",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00160:3"
}, "195":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input file - .res, .gct, .odf type=Dataset",
            "choices":[],
            "kinds":["Dataset", "gct", "res"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The class file - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The class file containing the confounding variable.",
            "choices":[],
            "kinds":["cls"],
            "name":"confounding.variable.cls.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The test to perform",
            "choices":["0=Class 0", "1=Class 1", "2=2 Sided"],
            "kinds":[],
            "name":"test.direction",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The statistic to use",
            "choices":["1=SNR", "0=T-Test", "3=SNR (median)", "2=T-Test (median)", "4=T-Test (min std)", "5=SNR (min std)", "6=SNR (median, min std)", "7=T-Test (median, min std)", "8=Paired T-Test"],
            "kinds":[],
            "name":"test.statistic",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"The minimum standard deviation if test statistic includes min std option",
            "choices":[],
            "kinds":[],
            "name":"min.std",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The number of permutations to perform (use 0 to calculate asymptotic p-values using the standard independent two-sample t-test)",
            "choices":[],
            "kinds":[],
            "name":"number.of.permutations",
            "numValues":"0-1",
            "defaultValue":"1000",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to perform all possible permutations",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"complete",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to perform balanced permutations",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"balanced",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The seed of the random number generator used to produce permutations",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"779948241",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Whether to smooth p-values",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"smooth.p.values",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Tests to perform when cls file has more than two classes (Note: not fully corrected for multiple hypothesis testing)",
            "choices":["one versus all", "all pairs"],
            "kinds":[],
            "name":"phenotype.test",
            "numValues":"0-1",
            "defaultValue":"one versus all",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>.comp.marker.odf",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ComparativeMarkerSelection",
    "write":false,
    "tags":["Comparative Marker Selection"],
    "type":"module",
    "version":"7",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00044:7"
}, "194":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The results from ComparativeMarkerSelection - .odf",
            "choices":[],
            "kinds":["Comparative Marker Selection"],
            "name":"comparative.marker.selection.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The dataset file used to select markers - .gct, .res, Dataset",
            "choices":[],
            "kinds":["gct", "res", "Dataset"],
            "name":"dataset.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The field to filter features on",
            "choices":["Bonferroni", "FDR(BH)", "Feature P", "Feature P High", "Feature P Low", "Fold Change", "FWER", "maxT", "Q Value", "Rank", "Score"],
            "kinds":[],
            "name":"field",
            "numValues":"0-1",
            "defaultValue":"Bonferroni",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Select features with field >= min",
            "choices":[],
            "kinds":[],
            "name":"min",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Select features with field <= max",
            "choices":[],
            "kinds":[],
            "name":"max",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Number of neighbors to select by score in each direction",
            "choices":[],
            "kinds":[],
            "name":"number.of.neighbors",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The base name for the output files",
            "choices":[],
            "kinds":[],
            "name":"base.output.name",
            "numValues":"0-1",
            "defaultValue":"<comparative.marker.selection.filename_basename>.filt",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ExtractComparativeMarkerResults",
    "write":false,
    "tags":["gct", "res", "Dataset", "txt"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00046:3"
}, "197":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A zip file of CEL files",
            "choices":[],
            "kinds":["zip"],
            "name":"ExpressionFileCreator1.input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"PWRGPTestAuto_InheritType_Vis",
    "write":false,
    "tags":[],
    "type":"pipeline",
    "version":"2",
    "lsid":"urn:lsid:8080.genepatt.genepattern.broadinstitute.org:genepatternmodules:2660:2"
}, "196":{
    "category":"Clustering",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A GCT file containing data to cluster",
            "choices":[],
            "kinds":["gct"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The type of linkage to use in the hierarchical clustering - \"single\", \"complete\", \"centroid\", or \"average.\"",
            "choices":["average", "complete", "single", "centroid"],
            "kinds":[],
            "name":"method",
            "numValues":"0-1",
            "defaultValue":"average",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The sum of gene weights; this is the tuning parameter for sparse hierarchical clustering. If a non-negative number is given, then this tuning parameter is used. Otherwise, a tuning parameter is selected via a permutation approach. Note: The program runs much more quickly if wbound is specified rather than left at -1.",
            "choices":[],
            "kinds":[],
            "name":"wbound",
            "numValues":"0-1",
            "defaultValue":"-1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"By default, only the 5000 genes with highest variance will be used (for computational reasons). To use all the genes, set to -1. Warning: using all genes will be slow if there are many genes in the data set.",
            "choices":[],
            "kinds":[],
            "name":"maxnumgenes",
            "numValues":"0-1",
            "defaultValue":"5000",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"If a clustering of the genes with non-zero weights is desired, set to TRUE.",
            "choices":["true", "false"],
            "kinds":[],
            "name":"cluster.features",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The type of linkage used to cluster the features (if desired) - \"single\", \"complete\", \"centroid\", or \"average\". Used only if cluster features is set to \"TRUE\"",
            "choices":["average", "complete", "single", "centroid"],
            "kinds":[],
            "name":"method.features",
            "numValues":"0-1",
            "defaultValue":"average",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether or not the arrays should be standardized to have mean zero and standard deviation one before clustering is performed.",
            "choices":["true", "false"],
            "kinds":[],
            "name":"standardize.arrays",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"SparseHierarchicalClustering",
    "write":false,
    "tags":["atr", "gtr"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00227:1"
}, "191":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[
        {
            "description":"file with one sample per line, one Sentrix Position, DAP#, and Sentrix ID per DAP",
            "choices":[],
            "kinds":["txt"],
            "name":"IlluminaScanExtractor1.sample.description.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"outlier detection method (only applies to extraction using bead-level data)",
            "choices":["> 3 Std. Deviations=> 3 Std. Deviations", "none=none"],
            "kinds":[],
            "name":"IlluminaScanExtractor1.outlier.method",
            "numValues":"0-1",
            "defaultValue":"> 3 Std. Deviations",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"correction method. Note that mean background subtraction does not apply when the input is a single GCT file.",
            "choices":["MeanBackground=mean background subtraction", "CubicSpline=cubic spline", "Quantile=quantile", "Median=median"],
            "kinds":[],
            "name":"IlluminaNormalizer2.normalization.method",
            "numValues":"0-1",
            "defaultValue":"CubicSpline",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"discard top 2 and bottom 2 negative controls (applies to mean background subtraction only)",
            "choices":["yes=yes", "no=no"],
            "kinds":[],
            "name":"IlluminaNormalizer2.discard.controls",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to concatenate the data or detection scores",
            "choices":["_data=data", "_dscores=detection scores"],
            "kinds":[],
            "name":"IlluminaConcatenator3.output.file.type",
            "numValues":"0-1",
            "defaultValue":"_data",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"IlluminaDASLPipeline",
    "write":false,
    "tags":[],
    "type":"pipeline",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.pipeline:00010:2"
}, "190":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"a zip of GCT files output by IlluminaScanExtractor (6k DASL) or a GCT file (whole-genome DASL)",
            "choices":[],
            "kinds":["zip", "gct"],
            "name":"zip.or.gct.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"correction method. Note that mean background subtraction does not apply when the input is a single GCT file.",
            "choices":["MeanBackground=mean background subtraction", "CubicSpline=cubic spline", "Quantile=quantile", "Median=median"],
            "kinds":[],
            "name":"normalization.method",
            "numValues":"0-1",
            "defaultValue":"CubicSpline",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<zip.or.gct.file_basename>_<normalization.method>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"discard top 2 and bottom 2 negative controls (applies to mean background subtraction only)",
            "choices":["yes=yes", "no=no"],
            "kinds":[],
            "name":"discard.controls",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"IlluminaNormalizer",
    "write":false,
    "tags":["gct", "zip"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00128:2"
}, "193":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset file - .res, .gct",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"expression.dataset",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Gene sets database from GSEA website.",
            "choices":["c1.all.v3.0.symbols.gmt=c1.all.v3.0.symbols.gmt [Positional]", "c2.all.v3.0.symbols.gmt=c2.all.v3.0.symbols.gmt [Curated]", "c2.cgp.v3.0.symbols.gmt=c2.cgp.v3.0.symbols.gmt [Curated]", "c2.cp.v3.0.symbols.gmt=c2.cp.v3.0.symbols.gmt [Curated]", "c2.cp.biocarta.v3.0.symbols.gmt=c2.cp.biocarta.v3.0.symbols.gmt [Curated]", "c2.cp.kegg.v3.0.symbols.gmt=c2.cp.kegg.v3.0.symbols.gmt [Curated]", "c2.cp.reactome.v3.0.symbols.gmt=c2.cp.reactome.v3.0.symbols.gmt [Curated]", "c3.all.v3.0.symbols.gmt=c3.all.v3.0.symbols.gmt [Motif]", "c3.mir.v3.0.symbols.gmt=c3.mir.v3.0.symbols.gmt [Motif]", "c3.tft.v3.0.symbols.gmt=c3.tft.v3.0.symbols.gmt [Motif]", "c4.all.v3.0.symbols.gmt=c4.all.v3.0.symbols.gmt [Computational]", "c4.cgn.v3.0.symbols.gmt=c4.cgn.v3.0.symbols.gmt [Computational]", "c4.cm.v3.0.symbols.gmt=c4.cm.v3.0.symbols.gmt [Computational]", "c5.all.v3.0.symbols.gmt=c5.all.v3.0.symbols.gmt [Gene Ontology]", "c5.bp.v3.0.symbols.gmt=c5.bp.v3.0.symbols.gmt [Gene Ontology]", "c5.cc.v3.0.symbols.gmt=c5.cc.v3.0.symbols.gmt [Gene Ontology]", "c5.mf.v3.0.symbols.gmt=c5.mf.v3.0.symbols.gmt [Gene Ontology]"],
            "kinds":[],
            "name":"gene.sets.database",
            "numValues":"0-1",
            "defaultValue":"c1.all.v3.0.symbols.gmt",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets database - .gmt, .gmx, .grp. Upload a gene set if your gene set is not listed as a choice for the gene sets database parameter.",
            "choices":[],
            "kinds":["gmt", "gmx", "grp"],
            "name":"gene.sets.database.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Number of permutations to perform",
            "choices":[],
            "kinds":[],
            "name":"number.of.permutations",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Cls file - .cls, must be binary",
            "choices":[],
            "kinds":["cls"],
            "name":"phenotype.labels",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Select true to have GSEA collapse each probe set in the expression dataset into a single vector for the gene, which gets identified by its gene symbol.",
            "choices":["false", "true"],
            "kinds":[],
            "name":"collapse.dataset",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Type of permutations to perform",
            "choices":["phenotype", "gene_set"],
            "kinds":[],
            "name":"permutation.type",
            "numValues":"0-1",
            "defaultValue":"phenotype",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Chip file from GSEA website.",
            "choices":["ftp.broadinstitute.org://pub/gsea/annotations/GENE_SYMBOL.chip=GENE_SYMBOL.chip", "ftp.broadinstitute.org://pub/gsea/annotations/SEQ_ACCESSION.chip=SEQ_ACCESSION.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubA.chip=Hu35KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubB.chip=Hu35KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubC.chip=Hu35KsubC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu35KsubD.chip=Hu35KsubD.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Hu6800.chip=Hu6800.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_Focus.chip=HG_Focus.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133A.chip=HG_U133A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133AAOFAV2.chip=HG_U133AAOFAV2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133A_2.chip=HG_U133A_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133B.chip=HG_U133B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U133_Plus_2.chip=HG_U133_Plus_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95Av2.chip=HG_U95Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95B.chip=HG_U95B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95C.chip=HG_U95C.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95D.chip=HG_U95D.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HG_U95E.chip=HG_U95E.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AFFYMETRIX.chip=AFFYMETRIX.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AG.chip=AG.chip", "ftp.broadinstitute.org://pub/gsea/annotations/APPLERA_ABI1700.chip=APPLERA_ABI1700.chip", "ftp.broadinstitute.org://pub/gsea/annotations/ATH1_121501.chip=ATH1_121501.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1A.chip=Agilent_Human1A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1Av2.chip=Agilent_Human1Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1B.chip=Agilent_Human1B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Human1_cDNA.chip=Agilent_Human1_cDNA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_HumanGenome.chip=Agilent_HumanGenome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseDev.chip=Agilent_MouseDev.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseGenome.chip=Agilent_MouseGenome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_MouseOligo.chip=Agilent_MouseOligo.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_Mouse_cDNA.chip=Agilent_Mouse_cDNA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_RatGenome_G4131A.chip=Agilent_RatGenome_G4131A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Agilent_RatOligo.chip=Agilent_RatOligo.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AtlasMouse1.2.chip=AtlasMouse1.2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/AtlasRat1.2.chip=AtlasRat1.2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/BIAO.chip=BIAO.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Bovine.chip=Bovine.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CNMCMuscleChip.chip=CNMCMuscleChip.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Caltech16KMouse.chip=Caltech16KMouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Caltech16KOligoMouse.chip=Caltech16KOligoMouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Canine_2.chip=Canine_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Clontech_Atlas_13K.chip=Clontech_Atlas_13K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Clontech_BD_Atlas.chip=Clontech_BD_Atlas.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_Human_Whole_Genome.chip=CodeLink_Human_Whole_Genome.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_20K_I_Bioarray.chip=CodeLink_UniSet_Human_20K_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_II_Bioarray.chip=CodeLink_UniSet_Human_II_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Human_I_Bioarray.chip=CodeLink_UniSet_Human_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/CodeLink_UniSet_Rat_I_Bioarray.chip=CodeLink_UniSet_Rat_I_Bioarray.chip", "ftp.broadinstitute.org://pub/gsea/annotations/DrosGenome1.chip=DrosGenome1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Drosophila_2.chip=Drosophila_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/G4110A.chip=G4110A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/G4110Av2.chip=G4110Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/GenosysCytokineV2.chip=GenosysCytokineV2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HC_G110.chip=HC_G110.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HPCGGCompugenAnnotations.chip=HPCGGCompugenAnnotations.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HT_HG_U133A.chip=HT_HG_U133A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HT_HG_U133A_EA.chip=HT_HG_U133A_EA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/HU6800.chip=HU6800.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illimina_Mus6_v1_1.chip=Illimina_Mus6_v1_1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illimuna_Mus6_v1.chip=Illimuna_Mus6_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Hum6_v1.chip=Illumina_Hum6_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Hum6_v2.chip=Illumina_Hum6_v2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_HumRef8_v1.chip=Illumina_HumRef8_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_HumRef8_v2.chip=Illumina_HumRef8_v2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_Human.chip=Illumina_Human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_MusRef8_v1.chip=Illumina_MusRef8_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_MusRef8_v1_1.chip=Illumina_MusRef8_v1_1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Illumina_RatRef12_v1.chip=Illumina_RatRef12_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Av2.chip=MG_U74Av2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Bv2.chip=MG_U74Bv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MG_U74Cv2.chip=MG_U74Cv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MOE430A.chip=MOE430A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MOE430B.chip=MOE430B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MWG_Human_30K_A.chip=MWG_Human_30K_A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/MWG_Human_30K_B.chip=MWG_Human_30K_B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mouse430A_2.chip=Mouse430A_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mouse430_2.chip=Mouse430_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu11KsubA.chip=Mu11KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu11KsubB.chip=Mu11KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubA.chip=Mu19KsubA.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubB.chip=Mu19KsubB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Mu19KsubC.chip=Mu19KsubC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/NIA15k.chip=NIA15k.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Netherland_cancer_institute_operon_human_35k.chip=Netherland_cancer_institute_operon_human_35k.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Netherland_cancer_institute_operon_mouse_FOOk.chip=Netherland_cancer_institute_operon_mouse_FOOk.chip", "ftp.broadinstitute.org://pub/gsea/annotations/OPERON_HUMANv2.chip=OPERON_HUMANv2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/OPERON_HUMANv3.chip=OPERON_HUMANv3.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RAE230A.chip=RAE230A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RAE230B.chip=RAE230B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34A.chip=RG_U34A.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34B.chip=RG_U34B.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RG_U34C.chip=RG_U34C.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RN_U34.chip=RN_U34.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RT_U34.chip=RT_U34.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_Ensembl1.1.chip=RZPD_Human_Ensembl1.1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_ORF_Clones_Gateway.chip=RZPD_Human_ORF_Clones_Gateway.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RZPD_Human_Unigene3.1.chip=RZPD_Human_Unigene3.1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rat230_2.chip=Rat230_2.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Human.chip=RefSeq_NP_Human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Mouse.chip=RefSeq_NP_Mouse.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_NP_Rat.chip=RefSeq_NP_Rat.chip", "ftp.broadinstitute.org://pub/gsea/annotations/RefSeq_human.chip=RefSeq_human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Research_Genetics.chip=Research_Genetics.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rosetta.chip=Rosetta.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Rosetta50K.chip=Rosetta50K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Stanford.chip=Stanford.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Stanford_Source_Accessions.chip=Stanford_Source_Accessions.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TIGR_31K_Human_Set.chip=TIGR_31K_Human_Set.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TIGR_40K_Human_Set.chip=TIGR_40K_Human_Set.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC.chip=TRC.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC_DB.chip=TRC_DB.chip", "ftp.broadinstitute.org://pub/gsea/annotations/TRC_DB_v1.chip=TRC_DB_v1.chip", "ftp.broadinstitute.org://pub/gsea/annotations/U133_X3P.chip=U133_X3P.chip", "ftp.broadinstitute.org://pub/gsea/annotations/UCLA_NIH_33K.chip=UCLA_NIH_33K.chip", "ftp.broadinstitute.org://pub/gsea/annotations/Zebrafish.chip=Zebrafish.chip", "ftp.broadinstitute.org://pub/gsea/annotations/labonweb_human.chip=labonweb_human.chip", "ftp.broadinstitute.org://pub/gsea/annotations/lymphochip.chip=lymphochip.chip"],
            "kinds":[],
            "name":"chip.platform",
            "numValues":"0-1",
            "defaultValue":"ftp.broadinstitute.org://pub/gsea/annotations/GENE_SYMBOL.chip",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Chip to use. Upload a chip file if your chip is not listed as a choice for the chip platform parameter.",
            "choices":[],
            "kinds":[],
            "name":"chip.platform.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The statistic used to score hits (gene set members) and misses (non-members)",
            "choices":["classic", "weighted", "weighted_p2", "weighted_p1.5"],
            "kinds":[],
            "name":"scoring.scheme",
            "numValues":"0-1",
            "defaultValue":"weighted",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Class separation metric - gene markers are ranked using this metric to produce the gene list",
            "choices":["Cosine", "Euclidean", "Manhattan", "Pearson", "FeatureVariation", "tTest", "Signal2Noise", "None", "RegressionSlope", "Bhattacharyya", "Norm.Pearson", "Diff_of_Means", "Diff_of_Medians", "Ratio_of_Means", "Ratio_of_Medians", "log2_ratio_of_means", "Feature_stddev_by_mean"],
            "kinds":[],
            "name":"metric.for.ranking.genes",
            "numValues":"0-1",
            "defaultValue":"Signal2Noise",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Direction in which the gene list should be ordered",
            "choices":["ascending", "descending"],
            "kinds":[],
            "name":"gene.list.ordering.mode",
            "numValues":"0-1",
            "defaultValue":"descending",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Mode in which scores from the gene list should be considered",
            "choices":["real", "abs"],
            "kinds":[],
            "name":"gene.list.sorting.mode",
            "numValues":"0-1",
            "defaultValue":"real",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets larger than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"max.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"500",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Gene sets smaller than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"min.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"15",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Collapsing mode",
            "choices":["Max_probe", "Median_of_probes"],
            "kinds":[],
            "name":"collapsing.mode.for.probe.sets.with.more.than.one.match",
            "numValues":"0-1",
            "defaultValue":"Max_probe",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Normalization mode",
            "choices":["meandiv", "None"],
            "kinds":[],
            "name":"normalization.mode",
            "numValues":"0-1",
            "defaultValue":"meandiv",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Type of phenotype randomization (does not apply to gene set permutations)",
            "choices":["equalize_and_balance", "no_balance"],
            "kinds":[],
            "name":"randomization.mode",
            "numValues":"0-1",
            "defaultValue":"no_balance",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"If there is no known gene symbol match for a probe set, omit it from the collapsed dataset",
            "choices":["false", "true"],
            "kinds":[],
            "name":"omit.features.with.no.symbol.match",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Create detailed gene set report (heat map, mountain plot, etc.) for every enriched gene set",
            "choices":["false", "true"],
            "kinds":[],
            "name":"make.detailed.gene.set.report",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Use the median of each class instead of the mean for the class separation metrics",
            "choices":["true", "false"],
            "kinds":[],
            "name":"median.for.class.metrics",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Number of markers",
            "choices":[],
            "kinds":[],
            "name":"number.of.markers",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Plot GSEA mountain and related plots for the top sets of each phenotype",
            "choices":[],
            "kinds":[],
            "name":"plot.graphs.for.the.top.sets.of.each.phenotype",
            "numValues":"0-1",
            "defaultValue":"20",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Seed to use for randomization",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"timestamp",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to save random ranked lists",
            "choices":["false", "true"],
            "kinds":[],
            "name":"save.random.ranked.lists",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.file.name",
            "numValues":"0-1",
            "defaultValue":"<expression.dataset_basename>.zip",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"GSEA",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"11",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00072:11"
}, "192":{
    "category":"Proteomics",
    "description":"description goes here",
     "inputs":[
        {
            "description":"List of peptide sequences (one per line, no column header)",
            "choices":[],
            "kinds":["txt", "csv"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"ESPPredictor",
    "write":false,
    "tags":["csv"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00158:3"
}, "198":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input SAM file to read and evaluate - .sam",
            "choices":[],
            "kinds":["sam"],
            "name":"sam.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A flag to indicate whether to run the average gene statistics. This is a long process.",
            "choices":["0=don't run,default", "1=run"],
            "kinds":[],
            "name":"average.gene.stats",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A flag to indicate whether the data is flipped, so a forward gene would appear as a reverse one",
            "choices":["0=don't flip, default", "1=flip"],
            "kinds":[],
            "name":"flip.strands",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A prefix for the output files",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<sam.file_basename>",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"StrandSpecRNAseqEval",
    "write":false,
    "tags":["F.bedGraph", "R.bedGraph", "norm.F.bedGraph", "norm.R.bedGraph", "PooledVSlib.qqplot.png", "PooledVSlib.png", "controlVSlib.qqplot.png", "controlVSlib.png", "ExpressionProfile.tab", "pooled.tab", "RNAvsDNAArraysVSlib.qqplot.png", "RNAvsDNAArraysVSlib.png", "zeroCoverage_SUB_pooledXaxis.png", "mat", "allExpression.mat", "zeroCov.mat", "segmentedGenes_pooled.mat", "xls "],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00206:1"
}, "199":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file in SAM or BAM format",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Sort order.",
            "choices":["coordinate=coordinate", "queryname=queryname", "unsorted=unsorted"],
            "kinds":[],
            "name":"sort.order",
            "numValues":"0-1",
            "defaultValue":"coordinate",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Name of output SAM or BAM file",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>.sorted.<input.file_extension>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"SortSam",
    "write":false,
    "tags":["sam", "bam", "bai"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00245:2"
}, "35":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Feature list one - .grp, .txt",
            "choices":[],
            "kinds":["grp", "txt"],
            "name":"feature.list.one",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Feature list two - .grp, .txt",
            "choices":[],
            "kinds":["grp", "txt"],
            "name":"feature.list.two",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Feature list three - .grp, .txt",
            "choices":[],
            "kinds":["grp", "txt"],
            "name":"feature.list.three",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"VennDiagram",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00105:1"
}, "36":{
    "category":"Image Creators",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input dataset - .res, .gct, .odf",
            "choices":[],
            "kinds":["gct", "res", "Dataset"],
            "name":"input.dataset",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The output file name -.jpeg, .png, .tiff, .bmp, .eps",
            "choices":[],
            "kinds":[],
            "name":"output",
            "numValues":"0-1",
            "defaultValue":"<input.dataset_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The output file format",
            "choices":["jpeg", "png", "tiff", "bmp", "eps"],
            "kinds":[],
            "name":"output.format",
            "numValues":"0-1",
            "defaultValue":"jpeg",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The size in pixels of an element along the horizontal axis",
            "choices":[],
            "kinds":[],
            "name":"column.size",
            "numValues":"0-1",
            "defaultValue":"8",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The size in pixels of an element along the vertical axis",
            "choices":[],
            "kinds":[],
            "name":"row.size",
            "numValues":"0-1",
            "defaultValue":"8",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Whether to show a grid between elements",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"show.grid",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The grid color",
            "choices":["0:0:0=black", "128:128:128=grey", "255:255:255=white"],
            "kinds":[],
            "name":"grid.color",
            "numValues":"0-1",
            "defaultValue":"0:0:0",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to show row descriptions",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"show.row.descriptions",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to show row names",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"show.row.names",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Rows to highlight in the heat map",
            "choices":[],
            "kinds":[],
            "name":"rows.to.highlight",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The color to highlight the rows if a rows to highlight file is provided",
            "choices":["255:0:0=red", "255:255:0=yellow", "0:0:255=blue"],
            "kinds":[],
            "name":"row.highlight.color",
            "numValues":"0-1",
            "defaultValue":"255:0:0",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The color scheme",
            "choices":["row normalized", "global"],
            "kinds":[],
            "name":"color.scheme",
            "numValues":"0-1",
            "defaultValue":"row normalized",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Color palette consisting of one r:g:b triplet or one hex value per line",
            "choices":[],
            "kinds":[],
            "name":"color.palette",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to use a linear color gradient or discrete colors",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"use.color.gradient",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"HeatMapImage",
    "write":false,
    "tags":["jpeg", "png", "tiff", "bmp", "eps"],
    "type":"module",
    "version":"6",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00032:6"
}, "33":{
    "category":"Prediction",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset input data file - res, gct, odf",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"data.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Class input file - cls",
            "choices":[],
            "kinds":["cls"],
            "name":"class.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"number of selected features",
            "choices":[],
            "kinds":[],
            "name":"num.features",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"statistic to use to perform feature selection",
            "choices":["0=SNR", "1=T-Test", "2=SNR (median)", "3=T-Test (median)", "4=SNR (min std)", "5=T-Test (min std)", "6=SNR (median, min std)", "7=T-Test (median, min std)"],
            "kinds":[],
            "name":"feature.selection.statistic",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"minimum standard deviation if feature selection statistic includes min std option",
            "choices":[],
            "kinds":[],
            "name":"min.std",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Prediction results output file name - odf",
            "choices":[],
            "kinds":[],
            "name":"pred.results.file",
            "numValues":"0-1",
            "defaultValue":"<data.filename_basename>.pred.odf",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Feature summary output file name - odf",
            "choices":[],
            "kinds":[],
            "name":"feature.summary.file",
            "numValues":"0-1",
            "defaultValue":"<data.filename_basename>.feat.odf",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"WeightedVotingXValidation",
    "write":false,
    "tags":["Prediction Results", "Prediction Features"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00028:3"
}, "34":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Summarized probe intensity data in .snp format",
            "choices":[],
            "kinds":["snp"],
            "name":"snp.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A Sample information file that contains gender information",
            "choices":[],
            "kinds":[],
            "name":"sample.info.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<snp.filename_basename>.xcorrected.snp",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"XChromosomeCorrect",
    "write":false,
    "tags":["snp"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00093:3"
}, "39":{
    "category":"Sequence Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"filename of subject FASTA file",
            "choices":[],
            "kinds":[],
            "name":"subject.fasta.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"> 0",
            "choices":[],
            "kinds":[],
            "name":"match",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"< 0",
            "choices":[],
            "kinds":[],
            "name":"mismatch",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"< 0",
            "choices":[],
            "kinds":[],
            "name":"gapopen",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"< 0",
            "choices":[],
            "kinds":[],
            "name":"gapextend",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"FASTA file",
            "choices":[],
            "kinds":[],
            "name":"query.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"filename of output",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<subject.fasta.filename_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"GlobalAlignment",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"0",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00008:0"
}, "37":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The dataset to display - .gct, .res, odf type=Dataset",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"dataset",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"HeatMapViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"8",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00010:8"
}, "38":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input file (any non-binary file format)",
            "choices":[],
            "kinds":[],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The output file",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>.cvt.<input.filename_extension>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ConvertLineEndings",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00002:1"
}, "43":{
    "category":"Prediction",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The training data file - .gct, .res, ignored if a saved model (saved.model.filename) is used",
            "choices":[],
            "kinds":["gct", "res"],
            "name":"train.data.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The training class file - .cls, ignored if a saved model (saved.model.filename) is used",
            "choices":[],
            "kinds":["cls"],
            "name":"train.cls.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"input CART model",
            "choices":[],
            "kinds":["model"],
            "name":"saved.model.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"name of output CART model file ",
            "choices":[],
            "kinds":[],
            "name":"model.output.file",
            "numValues":"0-1",
            "defaultValue":"<train.data.filename_basename>.cart.model",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The test data file - .gct, .res",
            "choices":[],
            "kinds":["gct", "res"],
            "name":"test.data.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The test class file - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"test.cls.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The name of the output file for prediction results",
            "choices":[],
            "kinds":[],
            "name":"pred.results.file",
            "numValues":"0-1",
            "defaultValue":"<test.data.filename_basename>.pred.odf",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The name of the file containing a plot of the classification tree",
            "choices":[],
            "kinds":[],
            "name":"tree.output.file",
            "numValues":"0-1",
            "defaultValue":"<test.data.filename_basename>.tree.pdf",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"CART",
    "write":false,
    "tags":["Prediction Results", "pdf", "model"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00056:2"
}, "42":{
    "category":"Proteomics",
    "description":"description goes here",
     "inputs":[
        {
            "description":"spectrum data file - .csv",
            "choices":[],
            "kinds":["csv"],
            "name":"spectrum.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"minimum M/Z to include",
            "choices":[],
            "kinds":[],
            "name":"low.Da",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"maximum M/Z to include",
            "choices":[],
            "kinds":[],
            "name":"high.Da",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"discard spectra with quality < quality threshold",
            "choices":[],
            "kinds":[],
            "name":"quality.threshold",
            "numValues":"0-1",
            "defaultValue":"0.45",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"window filter size",
            "choices":[],
            "kinds":[],
            "name":"window.filter",
            "numValues":"0-1",
            "defaultValue":"5",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"factor to multiply standard deviation by",
            "choices":[],
            "kinds":[],
            "name":"factor",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"averaging function",
            "choices":["median", "mean"],
            "kinds":[],
            "name":"smooth",
            "numValues":"0-1",
            "defaultValue":"median",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"output file",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<spectrum.filename_basename>.area.odf",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"AreaChange",
    "write":false,
    "tags":["Spectrum Area Change"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00049:2"
}, "41":{
    "category":"Reverse Engineering",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset file - .res, .gct",
            "choices":[],
            "kinds":["gct", "res"],
            "name":"dataset.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The name of a gene whose network interactions you want to reconstruct",
            "choices":[],
            "kinds":[],
            "name":"hub.gene",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A file containing a list of hub genes with one gene per line - .txt",
            "choices":[],
            "kinds":["txt"],
            "name":"hub.genes.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A file containing a list of genes with one gene per line that encode transcription factors - .txt",
            "choices":[],
            "kinds":["txt"],
            "name":"transcription.factor.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The kernel width (or window width) of the Gaussian Kernel Estimator",
            "choices":[],
            "kinds":[],
            "name":"kernel.width",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Threshold for the mutual information (MI) estimate to be considered statistically significant",
            "choices":[],
            "kinds":[],
            "name":"mi.threshold",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Threshold for the p-value of a MI estimate to be considered statistically significant",
            "choices":[],
            "kinds":[],
            "name":"p.value",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"The percentage of MI estimation considered as sampling error",
            "choices":[],
            "kinds":[],
            "name":"dpi.tolerance",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Filter out non-informative genes whose mean expression value is smaller than mean filter",
            "choices":[],
            "kinds":[],
            "name":"mean.filter",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Filter out non-informative genes whose coefficient of variance is smaller than cv filter",
            "choices":[],
            "kinds":[],
            "name":"cv.filter",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<dataset.file_basename>.output.adj",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ARACNE",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00090:1"
}, "40":{
    "category":"Proteomics",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input filename - .mzXML",
            "choices":[],
            "kinds":["mzXML"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"output file containing zip of csv files",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>.zip",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"mzXMLToCsv",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00069:1"
}, "22":{
    "category":"Proteomics",
    "description":"description goes here",
     "inputs":[
        {
            "description":"zip file of LC-MS runs in mzXML format.",
            "choices":[],
            "kinds":["zip"],
            "name":"input.zip.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"output filename",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.zip.filename_basename>.prot",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ProteoArray",
    "write":false,
    "tags":["gct"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00068:1"
}, "23":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Expression data - .res, .gct, .odf",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"expression.data.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Class file - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"class.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Name of expression data output file",
            "choices":[],
            "kinds":[],
            "name":"expression.data.file.output.name",
            "numValues":"0-1",
            "defaultValue":"<expression.data.filename_basename>_reordered",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Name of class output file",
            "choices":[],
            "kinds":[],
            "name":"class.file.output.name",
            "numValues":"0-1",
            "defaultValue":"<class.filename>_reordered",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ReorderByClass",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00033:2"
}, "24":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input file - .res, .gct, .snp, .cn, .loh, .odf, or .cls file from which the slice is extracted",
            "choices":[],
            "kinds":["gct", "res", "Dataset", "snp", "cn", "loh", "cls"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"columns to select (e.g. 0-3, 5, 9). Either columns or a list file must be provided.",
            "choices":[],
            "kinds":[],
            "name":"columns",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"text file containing one identifier per line that specifies the columns to select. Either columns or a list file must be provided.",
            "choices":[],
            "kinds":[],
            "name":"list.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"output filename - .res, .gct, .snp, .cn, .loh, .odf, .cls",
            "choices":[],
            "kinds":[],
            "name":"output",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>.slice",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"SelectFeaturesColumns",
    "write":false,
    "tags":["gct", "res", "Dataset", "snp", "cn", "cls"],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00021:4"
}, "25":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input file - .res, .gct, .snp, .cn, .loh, or .odf file from which the slice is extracted",
            "choices":[],
            "kinds":["gct", "res", "Dataset", "snp", "cn", "loh"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"text file containing one identifier per line that specifies the rows to select. ",
            "choices":[],
            "kinds":[],
            "name":"list.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"output filename - .res, .gct, .snp, .cn, .loh, .odf",
            "choices":[],
            "kinds":[],
            "name":"output",
            "numValues":"0-1",
            "defaultValue":"<list.filename_basename>.slice",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"SelectFeaturesRows",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00022:4"
}, "26":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"snp file to sort",
            "choices":[],
            "kinds":["snp"],
            "name":"snp.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"output file name",
            "choices":[],
            "kinds":["snp"],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<snp.filename_basename>.sorted.snp",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"SNPFileSorter",
    "write":false,
    "tags":["snp"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00096:1"
}, "27":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"",
            "choices":[],
            "kinds":[],
            "name":"java.max.memory",
            "numValues":"0-1",
            "defaultValue":"512m",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The input file to analyze - .cn, .xcn, .snp, .txt",
            "choices":[],
            "kinds":["txt"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Directory to save to",
            "choices":[],
            "kinds":[],
            "name":"save.dir",
            "numValues":"0-1",
            "defaultValue":"./",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Number of permutations to use",
            "choices":[],
            "kinds":[],
            "name":"permutations",
            "numValues":"0-1",
            "defaultValue":"500",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Number of MSA tests to use",
            "choices":[],
            "kinds":[],
            "name":"num.tests",
            "numValues":"0-1",
            "defaultValue":"9",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Number of positions per bin",
            "choices":[],
            "kinds":[],
            "name":"num.positions.bin",
            "numValues":"0-1",
            "defaultValue":"6",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The size of the plotted chromosome diagram",
            "choices":[],
            "kinds":[],
            "name":"resolution",
            "numValues":"0-1",
            "defaultValue":"250000",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Comma delimited list of chromosomes to analyze",
            "choices":[],
            "kinds":[],
            "name":"chromosomes",
            "numValues":"0-1",
            "defaultValue":"chr22",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Saves images to the specified directory",
            "choices":[],
            "kinds":[],
            "name":"save.images",
            "numValues":"0-1",
            "defaultValue":"./",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The value at which a region is called significant",
            "choices":[],
            "kinds":[],
            "name":"significance.level",
            "numValues":"0-1",
            "defaultValue":".05",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The name of the job",
            "choices":[],
            "kinds":[],
            "name":"run.name",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"",
            "choices":["true=arms", "false=chromosomes"],
            "kinds":[],
            "name":"analyze.by",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Cytoband file to use",
            "choices":[],
            "kinds":[],
            "name":"cytoband.filename",
            "numValues":"0-1",
            "defaultValue":"<libdir>CytoBands.txt",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"SNPMultipleSampleAnalysis",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00106:1"
}, "28":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The dataset to display - .snp, .cn, .xcn",
            "choices":[],
            "kinds":["snp", "xcn", "cn"],
            "name":"dataset.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Sample information file",
            "choices":[],
            "kinds":[],
            "name":"sample.info.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Sample list file",
            "choices":[],
            "kinds":[],
            "name":"sample.list.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Maximum memory",
            "choices":[],
            "kinds":[],
            "name":"max.memory",
            "numValues":"0-1",
            "defaultValue":"700m",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"SnpViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00084:3"
}, "29":{
    "category":"Clustering",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset (res, gct, or odf dataset)",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"dataset.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The base output file name - .odf",
            "choices":[],
            "kinds":[],
            "name":"output.stub",
            "numValues":"0-1",
            "defaultValue":"<dataset.filename_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Range of values can be entered and the program will automatically run the algorithm for each number of clusters in the range.",
            "choices":[],
            "kinds":[],
            "name":"cluster.range",
            "numValues":"0-1",
            "defaultValue":"2-3",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The seed for the random number generator, is exposed to allow the user to recreate a given session at a later time, (as opposed to allowing the program to generate a random initial seed which could result in different outcomes even if all the other parameters are identical).",
            "choices":[],
            "kinds":[],
            "name":"seed.range",
            "numValues":"0-1",
            "defaultValue":"42",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"How many times the algorithm should try to refine the clusters. Initially, this value can be set low for faster exploration, but should be set high (e.g., 50,000) for good convergence.",
            "choices":[],
            "kinds":[],
            "name":"iterations",
            "numValues":"0-1",
            "defaultValue":"50000",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Whether to cluster by rows or columns",
            "choices":["rows", "columns"],
            "kinds":[],
            "name":"cluster.by",
            "numValues":"0-1",
            "defaultValue":"rows",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Setting this and som.cols to a non zero value will override cluster.range and the computation will be for the specified geometry",
            "choices":[],
            "kinds":[],
            "name":"som.rows",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Setting this and som.rows to a non zero value will override cluster.range and the computation will be for the specified geometry",
            "choices":[],
            "kinds":[],
            "name":"som.cols",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"How to select inital random centroids",
            "choices":["Random_Vectors", "Random_Datapoints"],
            "kinds":[],
            "name":"initialization",
            "numValues":"0-1",
            "defaultValue":"Random_Vectors",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Neighborhood function determining how centroids near the target centroid are updated",
            "choices":["Bubble", "Gaussian"],
            "kinds":[],
            "name":"neighborhood",
            "numValues":"0-1",
            "defaultValue":"Bubble",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Initial learning weight for centroid updates",
            "choices":[],
            "kinds":[],
            "name":"alpha.initial",
            "numValues":"0-1",
            "defaultValue":"0.1",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Final learning weight for centroid updates",
            "choices":[],
            "kinds":[],
            "name":"alpha.final",
            "numValues":"0-1",
            "defaultValue":"0.005",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Initial sigma to determine update neighborhood size around the target centroid",
            "choices":[],
            "kinds":[],
            "name":"sigma.initial",
            "numValues":"0-1",
            "defaultValue":"5.0",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Final sigma to determine update neighborhood size around the target centroid",
            "choices":[],
            "kinds":[],
            "name":"sigma.final",
            "numValues":"0-1",
            "defaultValue":"0.5",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        }
    ],
    "name":"SOMClustering",
    "write":false,
    "tags":["SOM Cluster"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00029:2"
}, "30":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"SOM Properties ODF file",
            "choices":[],
            "kinds":["SOM Cluster"],
            "name":"som.cluster.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"SOMClusterViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"5",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00023:5"
}, "32":{
    "category":"Prediction",
    "description":"description goes here",
     "inputs":[
        {
            "description":"training data file name - .gct, .res, .odf type = Dataset, ignored if a saved model (saved.model.filename) is used",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"train.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"class file for training data - .cls, ignored if a saved model (saved.model.filename) is used",
            "choices":[],
            "kinds":["cls"],
            "name":"train.class.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"input Weighted Voting model file - .odf type = Weighted Voting Prediction Model",
            "choices":[],
            "kinds":["Weighted Voting Prediction Model"],
            "name":"saved.model.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"name of output Weighted Voting model file - .odf type = Weighted Voting Prediction Model",
            "choices":[],
            "kinds":[],
            "name":"model.file",
            "numValues":"0-1",
            "defaultValue":"<train.filename_basename>.model.odf",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"test data file name - .gct, .res, .odf type = Dataset",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"test.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"class file for test data - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"test.class.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"number of selected features if feature list filename is not specified",
            "choices":[],
            "kinds":[],
            "name":"num.features",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"statistic to use to perform feature selection",
            "choices":["0=SNR", "1=T-Test", "2=SNR (median)", "3=T-Test (median)", "4=SNR (min std)", "5=T-Test (min std)", "6=SNR (median, min std)", "7=T-Test (median, min std)"],
            "kinds":[],
            "name":"feature.selection.statistic",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"minimum standard deviation if feature selection statistic includes min std option",
            "choices":[],
            "kinds":[],
            "name":"min.std",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"features to use for prediction",
            "choices":[],
            "kinds":[],
            "name":"feature.list.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"name of prediction results output file - .odf type = Prediction Results",
            "choices":[],
            "kinds":[],
            "name":"pred.results.file",
            "numValues":"0-1",
            "defaultValue":"<test.filename_basename>.pred.odf",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"WeightedVoting",
    "write":false,
    "tags":["Prediction Results"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00027:3"
}, "31":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset - .res .gct, .odf",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The output file format",
            "choices":["gct", "odf"],
            "kinds":[],
            "name":"output.file.format",
            "numValues":"0-1",
            "defaultValue":"gct",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.file.name",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>.transposed",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"TransposeDataset",
    "write":false,
    "tags":["gct", "Dataset"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00026:3"
}, "19":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"first file to merge",
            "choices":[],
            "kinds":["gct", "res", "Dataset", "snp", "cn", "loh"],
            "name":"input.filename1",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"second file to merge",
            "choices":[],
            "kinds":["gct", "res", "Dataset", "snp", "cn", "loh"],
            "name":"input.filename2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"zip file containing files to merge. Either a zip file or the input files above must be provided.",
            "choices":[],
            "kinds":["zip"],
            "name":"zip.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"name of the merged file",
            "choices":[],
            "kinds":[],
            "name":"output",
            "numValues":"0-1",
            "defaultValue":"<input.filename1_basename><zip.filename_basename>.merged",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"MergeRows",
    "write":false,
    "tags":["gct", "res", "Dataset", "snp", "cn", "loh"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00064:1"
}, "17":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input filename - .res",
            "choices":[],
            "kinds":[],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Name of the look up table file with the feature mapping",
            "choices":[],
            "kinds":[],
            "name":"lookup.table.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Table format",
            "choices":["0=2 column", "1=4-column"],
            "kinds":[],
            "name":"table.format",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Direction of look up",
            "choices":["1=direct", "0=reverse"],
            "kinds":[],
            "name":"direction",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"MapChipFeaturesGeneral",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00015:1"
}, "18":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"first file to merge",
            "choices":[],
            "kinds":["gct", "res", "Dataset", "snp", "cn", "loh"],
            "name":"input.filename1",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"second file to merge",
            "choices":[],
            "kinds":["gct", "res", "Dataset", "snp", "cn", "loh"],
            "name":"input.filename2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"zip file containing files to merge. Either a zip file or the input files above must be provided.",
            "choices":[],
            "kinds":["zip"],
            "name":"zip.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"name of the merged file",
            "choices":[],
            "kinds":[],
            "name":"output",
            "numValues":"0-1",
            "defaultValue":"<input.filename1_basename><zip.filename_basename>.merged",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"MergeColumns",
    "write":false,
    "tags":["gct", "res", "Dataset", "snp", "cn", "loh"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00070:1"
}, "15":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A .snp file that contains genotypes",
            "choices":[],
            "kinds":["snp"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A sample info file with the paired information",
            "choices":[],
            "kinds":[],
            "name":"sample.info.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Output file",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>.loh",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"LOHPaired",
    "write":false,
    "tags":["snp"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00094:2"
}, "16":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The archive file containing the MAGE-ML files - .tar, .tgz, .tar.gz, .zip, .gz",
            "choices":[],
            "kinds":["zip", "tar", "tar.gz", "tgz", "gz"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"MAGEMLImportViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00055:2"
}, "13":{
    "category":"Prediction",
    "description":"description goes here",
     "inputs":[
        {
            "description":"data file - .gct, .res, .odf type = Dataset",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"data.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"class file - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"class.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"number of selected features",
            "choices":[],
            "kinds":[],
            "name":"num.features",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"statistic to use to perform feature selection",
            "choices":["0=SNR", "1=T-Test", "2=SNR (median)", "3=T-Test (median)", "4=SNR (min std)", "5=T-Test (min std)", "6=SNR (median, min std)", "7=T-Test (median, min std)"],
            "kinds":[],
            "name":"feature.selection.statistic",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"minimum standard deviation if feature selection statistic includes min std option",
            "choices":[],
            "kinds":[],
            "name":"min.std",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"number of neighbors for KNN",
            "choices":[],
            "kinds":[],
            "name":"num.neighbors",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"weighting type for neighbors",
            "choices":["1=none", "2=One-over-k", "3=distance"],
            "kinds":[],
            "name":"weighting.type",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"distance measure",
            "choices":["2=Cosine Distance", "1=Euclidean Distance"],
            "kinds":[],
            "name":"distance.measure",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"prediction results output file name .odf type = Prediction Results",
            "choices":[],
            "kinds":[],
            "name":"pred.results.file",
            "numValues":"0-1",
            "defaultValue":"<data.filename_basename>.pred.odf",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"feature summary output file name - .odf type = Prediction Features",
            "choices":[],
            "kinds":[],
            "name":"feature.summary.file",
            "numValues":"0-1",
            "defaultValue":"<data.filename_basename>.feat.odf",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"KNNXValidation",
    "write":false,
    "tags":["Prediction Results", "Prediction Features"],
    "type":"module",
    "version":"5",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00013:5"
}, "14":{
    "category":"Statistical Methods",
    "description":"description goes here",
     "inputs":[
        {
            "description":"query gene set file containing one identifier per line",
            "choices":[],
            "kinds":[],
            "name":"query.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"file containing an ordered list of genes (.pol format)",
            "choices":[],
            "kinds":[],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"output file name (a .pol extension will be appended)",
            "choices":[],
            "kinds":[],
            "name":"output",
            "numValues":"0-1",
            "defaultValue":"<query.filename_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"KSscore",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00014:1"
}, "11":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"the .pol, .tag or .grp file to be converted",
            "choices":[],
            "kinds":[],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"name of the output file (same format as input file)",
            "choices":[],
            "kinds":[],
            "name":"output",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>.U95",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Hu68kHu35kAtoU95",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00011:1"
}, "12":{
    "category":"Clustering",
    "description":"description goes here",
     "inputs":[
        {
            "description":"File containing data to cluster - .res, .gct, .odf",
            "choices":[],
            "kinds":["gct,res,odf"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The base output file name - .gct",
            "choices":[],
            "kinds":[],
            "name":"output.base.name",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>_KMcluster_output",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Number of centroids (clusters)",
            "choices":[],
            "kinds":[],
            "name":"number.of.clusters",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Seed value for random number generator",
            "choices":[],
            "kinds":[],
            "name":"seed.value",
            "numValues":"0-1",
            "defaultValue":"12345",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Whether to cluster by rows or columns",
            "choices":["0=rows", "1=columns"],
            "kinds":[],
            "name":"cluster.by",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"How to compute distance between points",
            "choices":["0=Euclidean", "1="],
            "kinds":[],
            "name":"distance.metric",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"KMeansClustering",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00081:1"
}, "21":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Prediction results - .odf",
            "choices":[],
            "kinds":["Prediction Results"],
            "name":"prediction.results.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"PredictionResultsViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00019:4"
}, "20":{
    "category":"Projection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file in GCT format with input data (V matrix) (GCT format only). e.g. ALL_vs_AML.gct",
            "choices":[],
            "kinds":["gct"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Output log file. e.g. NMF.log",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>.log",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Number of NMF factors. e.g. 2, 4, 10",
            "choices":[],
            "kinds":[],
            "name":"nfact",
            "numValues":"0-1",
            "defaultValue":"4",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Number of NMF iterations. e.g. 100, 250, 500",
            "choices":[],
            "kinds":[],
            "name":"niter",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Print matrices in output for debug",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"print.dump",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Column normalization flag",
            "choices":["0=no normalization", "1=normalization"],
            "kinds":[],
            "name":"cnorm.flag",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Row normalization flag",
            "choices":["0=no normalization", "1=normalization"],
            "kinds":[],
            "name":"rnorm.flag",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Global additive shift after normalization. e.g. 1, 4",
            "choices":[],
            "kinds":[],
            "name":"gshift",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Type of normalization",
            "choices":["0=standardize", "1=rescale: min=0, max=1"],
            "kinds":[],
            "name":"norm.type",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Random seed used to initialize W and H matrices by the randon number generator. e.g. 4585, 4567, 5980",
            "choices":[],
            "kinds":[],
            "name":"seed",
            "numValues":"0-1",
            "defaultValue":"12345",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        }
    ],
    "name":"NMF",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00016:2"
}, "10":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"zip output file from GSEA - .zip. Either a zip file or the inputs below are required.",
            "choices":[],
            "kinds":["zip"],
            "name":"zip.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"edb output file from GSEA - .edb",
            "choices":[],
            "kinds":["edb"],
            "name":"edb.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"rnk output file from GSEA - .rnk",
            "choices":[],
            "kinds":["rnk"],
            "name":"rnk.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"gene sets database - .gmt, .gmx, .grp",
            "choices":[],
            "kinds":["gmt", "gmx", "grp"],
            "name":"gene.sets.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"cls file - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"phenotype.labels",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"GSEALeadingEdgeViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00073:1"
}, "79":{
    "category":"Pathway Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset file - .res, .gct",
            "choices":[],
            "kinds":["gct", "res"],
            "name":"dataset.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The name of a gene whose network interactions you want to reconstruct",
            "choices":[],
            "kinds":[],
            "name":"hub.gene",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A file containing a list of hub genes with one gene per line - .txt",
            "choices":[],
            "kinds":["txt"],
            "name":"hub.genes.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A file containing a list of genes with one gene per line that encode transcription factors - .txt",
            "choices":[],
            "kinds":["txt"],
            "name":"transcription.factor.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The kernel width (or window width) of the Gaussian Kernel Estimator",
            "choices":[],
            "kinds":[],
            "name":"kernel.width",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Threshold for the mutual information (MI) estimate to be considered statistically significant",
            "choices":[],
            "kinds":[],
            "name":"mi.threshold",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Threshold for the p-value of a MI estimate to be considered statistically significant",
            "choices":[],
            "kinds":[],
            "name":"p.value",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"The percentage of MI estimation considered as sampling error",
            "choices":[],
            "kinds":[],
            "name":"dpi.tolerance",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Filter out non-informative genes whose mean expression value is smaller than mean filter",
            "choices":[],
            "kinds":[],
            "name":"mean.filter",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Filter out non-informative genes whose coefficient of variance is smaller than cv filter",
            "choices":[],
            "kinds":[],
            "name":"cv.filter",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<dataset.file_basename>.output.adj",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ARACNE",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00090:2"
}, "78":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The dataset file - .res, .gct",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"dataset.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Output from MINDY- .mindy",
            "choices":[],
            "kinds":["mindy"],
            "name":"mindy.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"MINDYViewer",
    "write":false,
    "tags":["mindy"],
    "type":"visualizer",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00110:1"
}, "77":{
    "category":"Pathway Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The dataset file - .res, .gct",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A list of possible modulator genes to analyze - .txt",
            "choices":[],
            "kinds":["txt"],
            "name":"modulator.list",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"List of transcription factors in dataset - .txt",
            "choices":[],
            "kinds":["txt"],
            "name":"dpi.transcription.factor.list",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Transcription factor",
            "choices":[],
            "kinds":[],
            "name":"transcription.factor",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Percentage of samples to use in analysis (must be <=50)",
            "choices":[],
            "kinds":[],
            "name":"sample.percentage",
            "numValues":"0-1",
            "defaultValue":"35.0",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Conditional mutual information (MI) score threshold (number between 0 and 1)",
            "choices":[],
            "kinds":[],
            "name":"conditional.mi.threshold",
            "numValues":"0-1",
            "defaultValue":"0.0",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Conditional mutual info p-value threshold (ignored if conditonal MI threshold >0)",
            "choices":[],
            "kinds":[],
            "name":"conditional.mi.p.value",
            "numValues":"0-1",
            "defaultValue":"1.0",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"The data processing inequality tolerance (number between 0 and 1)",
            "choices":[],
            "kinds":[],
            "name":"dpi.tolerance",
            "numValues":"0-1",
            "defaultValue":"1.0",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Unconditional mutual information (MI) score threshold (number between 0 and 1)",
            "choices":[],
            "kinds":[],
            "name":"unconditional.mi.threshold",
            "numValues":"0-1",
            "defaultValue":"0.0",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Unconditional mutual information p-value threshold (ignored if unconditonal MI threshold >0)",
            "choices":[],
            "kinds":[],
            "name":"unconditional.mi.p.value",
            "numValues":"0-1",
            "defaultValue":"1.0",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>.mindy",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"MINDY",
    "write":false,
    "tags":["res", "gct"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00107:1"
}, "82":{
    "category":"Survival Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input clinical data including survival time & censor status -.txt",
            "choices":[],
            "kinds":["txt"],
            "name":"input.surv.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Class information file -.cls",
            "choices":[],
            "kinds":["cls"],
            "name":"input.cls.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Name of survival time field",
            "choices":[],
            "kinds":[],
            "name":"time.field",
            "numValues":"0-1",
            "defaultValue":"time",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Name of survival time field (value should be \"event:1, censor:0\")",
            "choices":[],
            "kinds":[],
            "name":"censor.field",
            "numValues":"0-1",
            "defaultValue":"status",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Name of class field in survival data file (optional)",
            "choices":[],
            "kinds":[],
            "name":"cls.field",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Output file name for survival fit results",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"print.fit.results",
            "numValues":"0-1",
            "defaultValue":"F",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Assign line type/color automatically/manually?",
            "choices":["automatic=automatic", "manual=manual"],
            "kinds":[],
            "name":"line.type.color.assign",
            "numValues":"0-1",
            "defaultValue":"automatic",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"e.g. 1,2,3,... (1: solid, 2: dashed, 3: dotted, 4: dot-dashed)",
            "choices":[],
            "kinds":[],
            "name":"manual.line.type",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"e.g. black, blue, red, ...",
            "choices":[],
            "kinds":[],
            "name":"manual.line.color",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Line width",
            "choices":["1=thin", "2=thick", "3=thickest"],
            "kinds":[],
            "name":"line.width",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Survival time conversion",
            "choices":["1=none", "365.25=days to years", "12=months to years"],
            "kinds":[],
            "name":"time.conversion",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":true
        },
        {
            "description":"Maximum survival time (in original scale)",
            "choices":[],
            "kinds":[],
            "name":"max.time",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Lower limit of y axis range",
            "choices":[],
            "kinds":[],
            "name":"surv.function.lower",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Upper limit of y axis range",
            "choices":[],
            "kinds":[],
            "name":"surv.function.higher",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Type of survival curve",
            "choices":["log=survival", "event=event", "cumhaz=cumulative hazard", "cloglog=complimentary log-log survival"],
            "kinds":[],
            "name":"curve.type",
            "numValues":"0-1",
            "defaultValue":"log",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Show confidence inteval?",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"show.conf.interval",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Show legend?",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"add.legend",
            "numValues":"0-1",
            "defaultValue":"T",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Position of legend",
            "choices":["left-bottom", "left-top", "right-bottom", "right-top"],
            "kinds":[],
            "name":"legend.position",
            "numValues":"0-1",
            "defaultValue":"left-bottom",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Name for output files",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "numValues":"0-1",
            "defaultValue":"<input.surv.data.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"SurvivalCurve",
    "write":false,
    "tags":["png", "txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00103:1"
}, "83":{
    "category":"Survival Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input clinical data including survival time & censor status -.txt",
            "choices":[],
            "kinds":["txt"],
            "name":"input.surv.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"class information file (.cls format)",
            "choices":[],
            "kinds":["cls"],
            "name":"input.cls.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Name of survival time field",
            "choices":[],
            "kinds":[],
            "name":"time.field",
            "numValues":"0-1",
            "defaultValue":"time",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Name of censor field (value should be \"event:1, no event: 0\")",
            "choices":[],
            "kinds":[],
            "name":"censor.field",
            "numValues":"0-1",
            "defaultValue":"status",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Name of class field in survival data file (optional)",
            "choices":[],
            "kinds":[],
            "name":"cls.field",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Type of test",
            "choices":["0=log-rank test", "1=generalized Wilcoxon test"],
            "kinds":[],
            "name":"test.type",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Suggroups (classes) to be compared (e.g., A, C as in 3rd line of cls file)",
            "choices":[],
            "kinds":[],
            "name":"subgroup",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Output file name",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "numValues":"0-1",
            "defaultValue":"<input.surv.data.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"SurvivalDifference",
    "write":false,
    "tags":["png", "txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00104:1"
}, "80":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[],
    "name":"Golub.Slonim.1999.Science.all.aml.pipeline",
    "write":false,
    "tags":[],
    "type":"pipeline",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.pipeline:00001:1"
}, "81":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A .snp file that contains genotypes",
            "choices":[],
            "kinds":["snp"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A sample info file with the paired information",
            "choices":[],
            "kinds":["txt"],
            "name":"sample.info.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Output file",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>.loh",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"LOHPaired",
    "write":false,
    "tags":["loh"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00094:3"
}, "86":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset file - .res, .gct",
            "choices":[],
            "kinds":["gct", "res", "Dataset"],
            "name":"dataset.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Adjacency matrix - .adj",
            "choices":[],
            "kinds":["adj"],
            "name":"adjacency.matrix.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"CytoscapeViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00097:2"
}, "87":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"SNP file containing both normal and target samples.",
            "choices":[],
            "kinds":["snp"],
            "name":"snp.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"dChip format sample info file containing Ploidy(numeric) and Sample columns",
            "choices":[],
            "kinds":["txt", "xls"],
            "name":"sample.info.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to include genotype calls from the input snp file if they exist.",
            "choices":["xcn=yes (create xcn file)", "cn=no (create cn file)"],
            "kinds":[],
            "name":"include.genotype.calls",
            "numValues":"0-1",
            "defaultValue":"cn",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file.name",
            "numValues":"0-1",
            "defaultValue":"<snp.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"CopyNumberDivideByNormals",
    "write":false,
    "tags":["cn", "xcn"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00085:2"
}, "84":{
    "category":"Clustering",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input dataset A - .gct, should have common gene ID with dataset B",
            "choices":[],
            "kinds":["gct"],
            "name":"datasetA.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Input dataset B - .gct, should have common gene ID with dataset A",
            "choices":[],
            "kinds":["gct"],
            "name":"datasetB.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Input class label A - .cls, 3rd line should be numeric, +1 if starts from \"0\"",
            "choices":[],
            "kinds":["cls"],
            "name":"classA.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Input class label B - .cls, 3rd line should be numeric, +1 if starts from \"0\"",
            "choices":[],
            "kinds":["cls"],
            "name":"classB.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Number of marker genes to be mapped",
            "choices":[],
            "kinds":[],
            "name":"num.marker.genes",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Number of random permutations for ES in each cell of SA matrix",
            "choices":[],
            "kinds":[],
            "name":"num.perm",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Number of random permutations for Fisher's statistics",
            "choices":[],
            "kinds":[],
            "name":"num.perm.fisher",
            "numValues":"0-1",
            "defaultValue":"1000",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Weight enrichment by correlation vector (SNR)",
            "choices":["1=yes", "0=no"],
            "kinds":[],
            "name":"weighted.score.type",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Choice of null distribution",
            "choices":["pool=pool", "each=each"],
            "kinds":[],
            "name":"null.distribution",
            "numValues":"0-1",
            "defaultValue":"pool",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"p-value correction method",
            "choices":["FDR=FDR", "Bonferroni=Bonferroni", "both=both"],
            "kinds":[],
            "name":"p.value.correction",
            "numValues":"0-1",
            "defaultValue":"FDR",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Cluster dataset A's subclass in heatmap of SA matrix",
            "choices":["1=yes", "NA=no"],
            "kinds":[],
            "name":"cluster.rows",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Cluster dataset B's subclass in heatmap of SA matrix",
            "choices":["1=yes", "NA=no"],
            "kinds":[],
            "name":"cluster.columns",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Create heatmap of each nominal-p matrix",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"nominal.p.value.matrix",
            "numValues":"0-1",
            "defaultValue":"F",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Create legend for heatmap",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"create.legend",
            "numValues":"0-1",
            "defaultValue":"T",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Random seed",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"47365321",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Name of output files containing heatmap of SA matrices, summary of ES matrix, nominal p-values, and corrected p-values",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "numValues":"0-1",
            "defaultValue":"SubMap",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"SubMap",
    "write":false,
    "tags":["png", "txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00101:1"
}, "85":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A zip file containing CEL files",
            "choices":[],
            "kinds":["zip"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The method to use",
            "choices":["dChip", "GCRMA", "MAS5", "RMA"],
            "kinds":[],
            "name":"method",
            "numValues":"0-1",
            "defaultValue":"RMA",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(GCRMA and RMA only) Whether to normalize data using quantile normalization",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"quantile.normalization",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(RMA only) Whether to background correct using RMA background correction",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"background.correct",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to compute Present/Absent calls",
            "choices":["yes=yes (create res file)", "no=no (create gct file)"],
            "kinds":[],
            "name":"compute.present.absent.calls",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(MAS5 only) The normalization method to apply after expression values are computed. The column having the median of the means is used as the reference unless the parameter value to scale to is given.",
            "choices":["linear fit", "mean scaling", "median scaling", "none", "quantile normalization"],
            "kinds":[],
            "name":"normalization.method",
            "numValues":"0-1",
            "defaultValue":"median scaling",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(median/mean scaling only) The value to scale to.",
            "choices":[],
            "kinds":[],
            "name":"value.to.scale.to",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A tab-delimited text file containing one scan, sample, and class per line",
            "choices":[],
            "kinds":["clm"],
            "name":"clm.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to annotate probes with the gene symbol and description",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"annotate.probes",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The base name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ExpressionFileCreator",
    "write":false,
    "tags":["res", "gct", "cls"],
    "type":"module",
    "version":"5",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00041:5"
}, "67":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input filename - .res, .gct, .odf",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Output file with preprocessed dataset",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>.preprocessed",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"output file format",
            "choices":["0=gct", "1=res", "2=odf", "3=same as input"],
            "kinds":[],
            "name":"output.file.format",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Variation filter and thresholding flag",
            "choices":["0=no filter", "1=filter"],
            "kinds":[],
            "name":"filter.flag",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Discretization or normalization flag",
            "choices":["1=discretize", "0=no disc or norm", "2=row normalization"],
            "kinds":[],
            "name":"preprocessing.flag",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Minimum fold change for filter",
            "choices":[],
            "kinds":[],
            "name":"minchange",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Minimum delta for filter",
            "choices":[],
            "kinds":[],
            "name":"mindelta",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Value for thresholding",
            "choices":[],
            "kinds":[],
            "name":"threshold",
            "numValues":"0-1",
            "defaultValue":"20",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Value for ceiling",
            "choices":[],
            "kinds":[],
            "name":"ceiling",
            "numValues":"0-1",
            "defaultValue":"20000",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Maximum sigma for binning",
            "choices":[],
            "kinds":[],
            "name":"max.sigma.binning",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Value for uniform probability threshold filter: 1 (default)",
            "choices":[],
            "kinds":[],
            "name":"prob.thres",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Number of experiments to exclude (max & min) before applying variation filter",
            "choices":[],
            "kinds":[],
            "name":"num.excl",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to take the log base two after thresholding",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"log.base.two",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Remove row if n columns not >= than given threshold",
            "choices":[],
            "kinds":[],
            "name":"number.of.columns.above.threshold",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Threshold for removing rows",
            "choices":[],
            "kinds":[],
            "name":"column.threshold",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        }
    ],
    "name":"PreprocessDataset",
    "write":false,
    "tags":["res", "gct", "Dataset"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00020:3"
}, "66":{
    "category":"Prediction",
    "description":"description goes here",
     "inputs":[
        {
            "description":"training data file name - .gct, .res, .odf type = Dataset, ignored if a saved model (saved.model.filename) is used",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"train.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"class file for training data - .cls, ignored if a saved model (saved.model.filename) is used",
            "choices":[],
            "kinds":["cls"],
            "name":"train.class.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"input KNN model file - .odf type = KNN Prediction Model",
            "choices":[],
            "kinds":["KNN Prediction Model"],
            "name":"saved.model.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"name of output KNN model file - .odf type = KNN Prediction Model",
            "choices":[],
            "kinds":[],
            "name":"model.file",
            "numValues":"0-1",
            "defaultValue":"<train.filename_basename>.model",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"test data file name - .gct, .res, .odf type = Dataset",
            "choices":[],
            "kinds":["gct", "res", "Dataset"],
            "name":"test.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"class file for test data - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"test.class.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"number of selected features if feature list filename is not specified",
            "choices":[],
            "kinds":[],
            "name":"num.features",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"statistic to use to perform feature selection",
            "choices":["0=SNR", "1=T-Test", "2=SNR (median)", "3=T-Test (median)", "4=SNR (min std)", "5=T-Test (min std)", "6=SNR (median, min std)", "7=T-Test (median, min std)"],
            "kinds":[],
            "name":"feature.selection.statistic",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"minimum standard deviation if feature selection statistic includes min std option",
            "choices":[],
            "kinds":[],
            "name":"min.std",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"features to use for prediction",
            "choices":[],
            "kinds":[],
            "name":"feature.list.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"number of neighbors for KNN",
            "choices":[],
            "kinds":[],
            "name":"num.neighbors",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"weighting type for neighbors",
            "choices":["1=none", "2=One-over-k", "3=distance"],
            "kinds":[],
            "name":"weighting.type",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"distance measure",
            "choices":["2=Cosine Distance", "1=Euclidean Distance"],
            "kinds":[],
            "name":"distance.measure",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"name of output file for prediction results - .odf",
            "choices":[],
            "kinds":[],
            "name":"pred.results.file",
            "numValues":"0-1",
            "defaultValue":"<test.filename_basename>.pred.odf",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"KNN",
    "write":false,
    "tags":["Prediction Results", "KNN Prediction Model"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00012:3"
}, "69":{
    "category":"Prediction",
    "description":"description goes here",
     "inputs":[
        {
            "description":"training data file name - .gct, .res, .odf type = Dataset, ignored if a saved model (saved.model.filename) is used",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"train.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"class file for training data - .cls, ignored if a saved model (saved.model.filename) is used",
            "choices":[],
            "kinds":["cls"],
            "name":"train.class.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"input KNN model file - .odf type = KNN Prediction Model",
            "choices":[],
            "kinds":["KNN Prediction Model"],
            "name":"saved.model.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"name of output KNN model file - .odf type = KNN Prediction Model",
            "choices":[],
            "kinds":[],
            "name":"model.file",
            "numValues":"0-1",
            "defaultValue":"<train.filename_basename>.model",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"test data file name - .gct, .res, .odf type = Dataset",
            "choices":[],
            "kinds":["gct", "res", "Dataset"],
            "name":"test.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"class file for test data - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"test.class.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"number of signal-to-noise selected features if feature list filename is not specified",
            "choices":[],
            "kinds":[],
            "name":"num.features",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"features to use for prediction",
            "choices":[],
            "kinds":[],
            "name":"feature.list.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"number of neighbors for KNN",
            "choices":[],
            "kinds":[],
            "name":"num.neighbors",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"weighting type for neighbors",
            "choices":["1=none", "2=One-over-k", "3=distance"],
            "kinds":[],
            "name":"weighting.type",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"distance measure to use",
            "choices":["2=Cosine Distance", "1=Euclidean Distance"],
            "kinds":[],
            "name":"distance.measure",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"name of output file for prediction results - .odf",
            "choices":[],
            "kinds":[],
            "name":"pred.results.file",
            "numValues":"0-1",
            "defaultValue":"<test.filename_basename>.pred.odf",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"KNN",
    "write":false,
    "tags":["Prediction Results", "KNN Prediction Model"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00012:2"
}, "68":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The results from ComparativeMarkerSelection - .odf",
            "choices":[],
            "kinds":["Comparative Marker Selection"],
            "name":"comparative.marker.selection.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The dataset file that the markers were selected from - .gct, .res, Dataset",
            "choices":[],
            "kinds":["gct", "res", "Dataset"],
            "name":"dataset.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The field to filter features on",
            "choices":["Rank", "Score", "Feature P", "FWER", "FDR(BH)", "Bonferroni", "Q Value", "maxT"],
            "kinds":[],
            "name":"field",
            "numValues":"0-1",
            "defaultValue":"Rank",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Select features with field >= min",
            "choices":[],
            "kinds":[],
            "name":"min",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Select features with field <= max",
            "choices":[],
            "kinds":[],
            "name":"max",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Number of neighbors to select by score in each direction",
            "choices":[],
            "kinds":[],
            "name":"number.of.neighbors",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The base name for the output files",
            "choices":[],
            "kinds":[],
            "name":"base.output.name",
            "numValues":"0-1",
            "defaultValue":"<comparative.marker.selection.filename_basename>.filt",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ExtractComparativeMarkerResults",
    "write":false,
    "tags":["gct", "res", "Dataset", "txt"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00046:2"
}, "70":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input filename - .res, .gct, .odf",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Output file with preprocessed dataset",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>.preprocessed",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"output file format",
            "choices":["0=gct", "1=res", "2=odf", "3=same as input"],
            "kinds":[],
            "name":"output.file.format",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Variation filter and thresholding flag",
            "choices":["0=no filter", "1=filter"],
            "kinds":[],
            "name":"filter.flag",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Discretization or normalization flag",
            "choices":["1=discretize", "0=no disc or norm", "2=row normalization"],
            "kinds":[],
            "name":"preprocessing.flag",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Minimum fold change for filter",
            "choices":[],
            "kinds":[],
            "name":"minchange",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Minimum delta for filter",
            "choices":[],
            "kinds":[],
            "name":"mindelta",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Value for thresholding",
            "choices":[],
            "kinds":[],
            "name":"threshold",
            "numValues":"0-1",
            "defaultValue":"20",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Value for ceiling",
            "choices":[],
            "kinds":[],
            "name":"ceiling",
            "numValues":"0-1",
            "defaultValue":"16000",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Maximum sigma for binning",
            "choices":[],
            "kinds":[],
            "name":"max.sigma.binning",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Value for uniform probability threshold filter: 1 (default)",
            "choices":[],
            "kinds":[],
            "name":"prob.thres",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Number of experiments to exclude (max & min) before applying variation filter",
            "choices":[],
            "kinds":[],
            "name":"num.excl",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to take the log base two after thresholding",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"log.base.two",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Remove row if n columns not >= than given threshold",
            "choices":[],
            "kinds":[],
            "name":"number.of.columns.above.threshold",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Threshold for removing rows",
            "choices":[],
            "kinds":[],
            "name":"column.threshold",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        }
    ],
    "name":"PreprocessDataset",
    "write":false,
    "tags":["res", "gct", "Dataset"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00020:2"
}, "71":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input file - .res, .gct, .odf, or .cls file from which the slice is extracted",
            "choices":[],
            "kinds":["res", "gct", "Dataset", "cls"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"(e.g. 0-3, 5, 9)",
            "choices":[],
            "kinds":[],
            "name":"columns",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"output filename - .res, .gct, .odf, .cls",
            "choices":[],
            "kinds":[],
            "name":"output",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>.slice",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"SelectFeaturesColumns",
    "write":false,
    "tags":["res", "gct", "Dataset", "cls"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00021:3"
}, "72":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"odf file with or without features to summarize",
            "choices":[],
            "kinds":[],
            "name":"feature.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"FeatureSummaryViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00005:1"
}, "73":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"odf format file from marker analysis",
            "choices":[],
            "kinds":[],
            "name":"inputfilename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"GeneListSignificanceViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00006:2"
}, "74":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"file containing prediction results - .odf",
            "choices":[],
            "kinds":[],
            "name":"prediction.results.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"PredictionResultsViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00019:1"
}, "75":{
    "category":"Prediction",
    "description":"description goes here",
     "inputs":[
        {
            "description":"training data file name (gct, res, odf format)",
            "choices":[],
            "kinds":[],
            "name":"train.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"class file for training data (cls, odf format)",
            "choices":[],
            "kinds":[],
            "name":"train.class.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"test data file name (gct, res, odf format)",
            "choices":[],
            "kinds":[],
            "name":"test.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"class file for test data (cls, odf format)",
            "choices":[],
            "kinds":[],
            "name":"test.class.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"name of output file for prediction results - .odf file",
            "choices":[],
            "kinds":[],
            "name":"pred.results.file",
            "numValues":"0-1",
            "defaultValue":"<test.filename_basename>.pred.odf",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"number of signal-to-noise selected features",
            "choices":[],
            "kinds":[],
            "name":"num.features",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"if no, values below will be ignored",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"filter.data",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"minimum threshold for data",
            "choices":[],
            "kinds":[],
            "name":"thresh.min",
            "numValues":"0-1",
            "defaultValue":"20",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"maximum threshold for data",
            "choices":[],
            "kinds":[],
            "name":"thresh.max",
            "numValues":"0-1",
            "defaultValue":"16000",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"min fold difference for gene filtering",
            "choices":[],
            "kinds":[],
            "name":"fold.diff",
            "numValues":"0-1",
            "defaultValue":"5",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"minimum absolute difference for gene filtering",
            "choices":[],
            "kinds":[],
            "name":"absolute.diff",
            "numValues":"0-1",
            "defaultValue":"50",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"WeightedVoting",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00027:1"
}, "76":{
    "category":"Prediction",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset input data file - res, gct, odf",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"data.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Class input file - cls",
            "choices":[],
            "kinds":["cls"],
            "name":"class.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"number of signal-to-noise ranked features for the prediction",
            "choices":[],
            "kinds":[],
            "name":"num.features",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Prediction results output file name - odf",
            "choices":[],
            "kinds":[],
            "name":"pred.results.file",
            "numValues":"0-1",
            "defaultValue":"<data.filename_basename>.pred.odf",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Feature summary output file name - odf",
            "choices":[],
            "kinds":[],
            "name":"feature.summary.file",
            "numValues":"0-1",
            "defaultValue":"<data.filename_basename>.feat.odf",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"WeightedVotingXValidation",
    "write":false,
    "tags":["Prediction Results", "Prediction Features"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00028:2"
}, "59":{
    "category":"Proteomics",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Zip file containing spectra data. Spectra data are stored as M/Z,Intensity",
            "choices":[],
            "kinds":["zip"],
            "name":"zip.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The base name for output files",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<zip.filename_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"discard spectra with quality < quality threshold",
            "choices":[],
            "kinds":[],
            "name":"quality.threshold",
            "numValues":"0-1",
            "defaultValue":"0.45",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"whether to fill missing peaks",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"fill.na",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"normalization strategy",
            "choices":["tan", "tin", "01", "none"],
            "kinds":[],
            "name":"normalize",
            "numValues":"0-1",
            "defaultValue":"tan",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"peak detection method",
            "choices":["detect", "input", "random"],
            "kinds":[],
            "name":"peak.detection.method",
            "numValues":"0-1",
            "defaultValue":"detect",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"filter peaks based on peak intensity / noise ",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"filter.peaks",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"retains peaks if peak intensity >= filter.peaks.factor * stdev(noise)",
            "choices":[],
            "kinds":[],
            "name":"filter.peaks.factor",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"file containing one M/Z per line when peaks=input",
            "choices":[],
            "kinds":[],
            "name":"peak.list.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"random seed when peaks=random",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"number of random M/Z's selected when peaks=random",
            "choices":[],
            "kinds":[],
            "name":"random.n.peaks",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Minimum M/Z to include",
            "choices":[],
            "kinds":[],
            "name":"low.Da",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Maximum M/Z to include",
            "choices":[],
            "kinds":[],
            "name":"high.Da",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"After applying filters, threshold above which peaks are located",
            "choices":[],
            "kinds":[],
            "name":"percentile",
            "numValues":"0-1",
            "defaultValue":"0.65",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Size of the smoothing filter",
            "choices":[],
            "kinds":[],
            "name":"smoothing.size",
            "numValues":"0-1",
            "defaultValue":"21",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Strength of the adaptive background correction filter",
            "choices":[],
            "kinds":[],
            "name":"adaptive.background.correction.strength",
            "numValues":"0-1",
            "defaultValue":"0.75",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Size of the adaptive background correction filter",
            "choices":[],
            "kinds":[],
            "name":"adaptive.background.correction.size",
            "numValues":"0-1",
            "defaultValue":"21",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Strength of the high pass filter",
            "choices":[],
            "kinds":[],
            "name":"high.pass.filter.strength",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Filter factor for the high pass filter",
            "choices":[],
            "kinds":[],
            "name":"high.pass.filter.factor",
            "numValues":"0-1",
            "defaultValue":"5",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        }
    ],
    "name":"ProteomicsAnalysis",
    "write":false,
    "tags":["gct", "EM Gaussian Mixtures", "Actual Peaks to EM-matched Peaks", "Actual Peaks", "Proteomics Analysis Statistics"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00048:2"
}, "58":{
    "category":"Proteomics",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The output from the Peaks module",
            "choices":[],
            "kinds":["Spectrum Peaks"],
            "name":"peaks.output.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<peaks.output.filename_basename>.pdf",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"PlotPeaks",
    "write":false,
    "tags":["pdf"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00053:2"
}, "57":{
    "category":"Proteomics",
    "description":"description goes here",
     "inputs":[
        {
            "description":"spectrum data file - .csv",
            "choices":[],
            "kinds":["csv"],
            "name":"spectrum.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Minimum M/Z to include",
            "choices":[],
            "kinds":[],
            "name":"low.Da",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Maximum M/Z to include",
            "choices":[],
            "kinds":[],
            "name":"high.Da",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"After applying filters, threshold above which peaks are located",
            "choices":[],
            "kinds":[],
            "name":"percentile",
            "numValues":"0-1",
            "defaultValue":"0.65",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Size of the smoothing filter",
            "choices":[],
            "kinds":[],
            "name":"smoothing.size",
            "numValues":"0-1",
            "defaultValue":"21",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Strength of the adaptive background correction filter",
            "choices":[],
            "kinds":[],
            "name":"adaptive.background.correction.strength",
            "numValues":"0-1",
            "defaultValue":"0.75",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Size of the adaptive background correction filter",
            "choices":[],
            "kinds":[],
            "name":"adaptive.background.correction.size",
            "numValues":"0-1",
            "defaultValue":"21",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Strength of the high pass filter",
            "choices":[],
            "kinds":[],
            "name":"high.pass.filter.strength",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Filter factor for the high pass filter",
            "choices":[],
            "kinds":[],
            "name":"high.pass.filter.factor",
            "numValues":"0-1",
            "defaultValue":"5",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<spectrum.filename_basename>.peaks.odf",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Peaks",
    "write":false,
    "tags":["Spectrum Peaks"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00050:2"
}, "56":{
    "category":"Proteomics",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Zip file containing peak lists",
            "choices":[],
            "kinds":["zip"],
            "name":"peakList.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"CSV file with header: experiment, sample, class",
            "choices":[],
            "kinds":["csv"],
            "name":"sampleInfo.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Zip file containing the output from landmark matching.",
            "choices":[],
            "kinds":["zip"],
            "name":"LandmarkMatchOutput.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"m/z tolerance (ppm). Used if landmark match output is not supplied. Defaults to 10 ppm.",
            "choices":[],
            "kinds":[],
            "name":"MZ.tolerance",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"retention time tolerance (min). Used if landmark match is not supplied. Defaults to 2 min.",
            "choices":[],
            "kinds":[],
            "name":"RT.tolerance",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"File name prefix for the output files",
            "choices":[],
            "kinds":[],
            "name":"outputName",
            "numValues":"0-1",
            "defaultValue":"PeakMatchOutput",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Number of processess when running in parallel. Defaults to 1 (sequential).",
            "choices":[],
            "kinds":[],
            "name":"numberProcesses",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Whether you are running on an LSF cluster version of GenePattern",
            "choices":["no", "yes"],
            "kinds":[],
            "name":"running.on.LSF",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"PeakMatch",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00082:2"
}, "55":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The dataset - .res, .gct",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"dataset.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The s matrix - .odf",
            "choices":[],
            "kinds":["Matrix"],
            "name":"s.matrix.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The t matrix - .odf",
            "choices":[],
            "kinds":["Matrix"],
            "name":"t.matrix.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The u matrix - .odf",
            "choices":[],
            "kinds":["Matrix"],
            "name":"u.matrix.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A cls or sample info file - .cls, .txt",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.or.sample.info.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The name of the class column to use in the sample info file (required if sample info file provided)",
            "choices":[],
            "kinds":[],
            "name":"sample.info.class",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"",
            "fileChoice":false
        },
        {
            "description":"The feature set file - .gmt, .gmx, .grp",
            "choices":[],
            "kinds":["gmt", "gmx", "grp"],
            "name":"featureset.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"PCAViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00018:4"
}, "64":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Specify the chip type.",
            "choices":["Mapping50K_Hind240.cdf=50K Hind", "Mapping50K_Xba240.cdf=50K Xba", "Mapping250K_Sty.cdf=250K Sty", "Mapping250K_Nsp.cdf=250K NSP"],
            "kinds":["cdf"],
            "name":"chip.type",
            "numValues":"0-1",
            "defaultValue":"Mapping50K_Hind240.cdf",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Networked directory name where the CEL ( and optionally TXT) files reside.",
            "choices":[],
            "kinds":[],
            "name":"network.directory.name",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A zip file containing CEL and optionally TXT files.",
            "choices":[],
            "kinds":["zip"],
            "name":"zip.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The normalization method to apply.",
            "choices":["1=Quantile Normalization(dChip)", "2=Invariant Set Normalization(dChip)"],
            "kinds":[],
            "name":"normalization.method",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Reference method to use in normalization",
            "choices":["median=Median", "reference=Reference Supplied"],
            "kinds":[],
            "name":"reference.method",
            "numValues":"0-1",
            "defaultValue":"median",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Reference file to use. Leave blank if reference method is median.",
            "choices":[],
            "kinds":[],
            "name":"reference.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The summarization method to apply.",
            "choices":["1=Average Difference", "2=PM/MM Difference Model (dChip)", "3=Median Probe", "4=Trimmed Mean"],
            "kinds":[],
            "name":"model.method",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Create Allele Specific probe intensities",
            "choices":["yes=Allele-Specific", "no=Non Allele-Specific"],
            "kinds":[],
            "name":"allele.specific",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Sorts output file by Chromosome and location. Filters out probesets without location information",
            "choices":["yes=Sort", "no=Do no sort"],
            "kinds":[],
            "name":"sort.snp.file",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The name of the output file.",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"SNPFileCreator",
    "write":false,
    "tags":["snp"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00086:1"
}, "65":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Clustered data table, contains the original data, but reordered",
            "choices":[],
            "kinds":["cdt"],
            "name":"cdt.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Gene Tree file, records the order in which genes (rows) were joined (at least one of gtr filename and atr filename is required)",
            "choices":[],
            "kinds":["gtr"],
            "name":"gtr.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Array Tree file, records the order in which samples (columns) were joined (at least one of gtr filename and atr filename is required)",
            "choices":[],
            "kinds":["atr"],
            "name":"atr.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"JavaTreeView",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00063:2"
}, "62":{
    "category":"Clustering",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input data file name - .gct, .res, .odf type = Dataset",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"distance measure for column (sample) clustering",
            "choices":["0=No column clustering", "1=Uncentered correlation", "2=Pearson correlation", "3=Uncentered correlation, absolute value", "4=Pearson correlation, absolute value", "5=Spearman's rank correlation", "6=Kendall's tau", "7=Euclidean distance", "8=City-block distance"],
            "kinds":[],
            "name":"column.distance.measure",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"distance measure for row (gene) clustering",
            "choices":["0=No row clustering", "1=Uncentered correlation", "2=Pearson correlation", "3=Uncentered correlation, absolute value", "4=Pearson correlation, absolute value", "5=Spearman's rank correlation", "6=Kendall's tau", "7=Euclidean distance", "8=City-block distance"],
            "kinds":[],
            "name":"row.distance.measure",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"hierarchical clustering method to use",
            "choices":["m=Pairwise complete-linkage", "s=Pairwise single-linkage", "c=Pairwise centroid-linkage", "a=Pairwise average-linkage"],
            "kinds":[],
            "name":"clustering.method",
            "numValues":"0-1",
            "defaultValue":"m",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"log-transform the data before clustering",
            "choices":["=no", "-l=yes"],
            "kinds":[],
            "name":"log.transform",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"whether to center each row (gene) in the data",
            "choices":["=no", "mean.row=Subtract the mean of each row", "median.row=Subtract the median of each row"],
            "kinds":[],
            "name":"row.center",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"whether to normalize each row (gene) in the data",
            "choices":["=no", "-ng=yes"],
            "kinds":[],
            "name":"row.normalize",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"whether to center each column (sample) in the data",
            "choices":["=no", "mean.column=Subtract the mean of each column", "median.column=Subtract the median of each column"],
            "kinds":[],
            "name":"column.center",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"whether to normalize each column (sample) in the data",
            "choices":["=no", "-na=yes"],
            "kinds":[],
            "name":"column.normalize",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"base name for output files",
            "choices":[],
            "kinds":[],
            "name":"output.base.name",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"HierarchicalClustering",
    "write":false,
    "tags":["gtr", "atr", "cdt"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00009:3"
}, "63":{
    "category":"Image Creators",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Clustered data table, contains the original data, but reordered",
            "choices":[],
            "kinds":["cdt"],
            "name":"cdt",
            "numValues":"0-1",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Gene Tree file, records the order in which genes (rows) were joined (at least one of gtr and atr files are required)",
            "choices":[],
            "kinds":["gtr"],
            "name":"gtr",
            "numValues":"0-1",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Array Tree file, records the order in which samples (columns) were joined (at least one of gtr and atr files are required)",
            "choices":[],
            "kinds":["atr"],
            "name":"atr",
            "numValues":"0-1",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The output file name - .bmp, .jpeg, .png, .tiff",
            "choices":[],
            "kinds":[],
            "name":"output",
            "numValues":"0-1",
            "defaultValue":"<cdt_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The output file format",
            "choices":["bmp", "jpeg", "png", "tiff"],
            "kinds":[],
            "name":"output.format",
            "numValues":"0-1",
            "defaultValue":"jpeg",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The size in pixels of an element along the horizontal axis",
            "choices":[],
            "kinds":[],
            "name":"column.size",
            "numValues":"0-1",
            "defaultValue":"8",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The size in pixels of an element along the vertical axis",
            "choices":[],
            "kinds":[],
            "name":"row.size",
            "numValues":"0-1",
            "defaultValue":"8",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Whether to show a grid between elements",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"show.grid",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The grid color",
            "choices":["0:0:0=black", "128:128:128=grey", "255:255:255=white"],
            "kinds":[],
            "name":"grid.color",
            "numValues":"0-1",
            "defaultValue":"0:0:0",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to show row descriptions",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"show.row.descriptions",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to show row names",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"show.row.names",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Rows to highlight in the heat map",
            "choices":[],
            "kinds":[],
            "name":"rows.to.highlight",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The color to highlight the rows if a rows to highlight file is provided",
            "choices":["255:0:0=red", "255:255:0=yellow", "0:0:255=blue"],
            "kinds":[],
            "name":"row.highlight.color",
            "numValues":"0-1",
            "defaultValue":"255:0:0",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The color scheme",
            "choices":["row normalized", "global"],
            "kinds":[],
            "name":"color.scheme",
            "numValues":"0-1",
            "defaultValue":"row normalized",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Color palette consisting of one r:g:b triplet or one hex value per line",
            "choices":[],
            "kinds":[],
            "name":"color.palette",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to use a linear color gradient or discrete colors",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"use.color.gradient",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"HierarchicalClusteringImage",
    "write":false,
    "tags":["jpeg", "png", "tiff", "bmp", "eps"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00071:2"
}, "60":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input dataset - .gct, .res",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"input.dataset.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"class template - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"whether to split the data using a percentage split or cross validation approach",
            "choices":["random=percentage split", "CV=cross-validation"],
            "kinds":[],
            "name":"split.method",
            "numValues":"0-1",
            "defaultValue":"random",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"whether to create splits stratified with respect to the class template",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"stratified",
            "numValues":"0-1",
            "defaultValue":"T",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"number of train/test splits to generate",
            "choices":[],
            "kinds":[],
            "name":"folds",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"proportion of data to be allocated to train file when split method is percentage split (ignored when split method is cross-validation)",
            "choices":[],
            "kinds":[],
            "name":"percentage.split.proportion",
            "numValues":"0-1",
            "defaultValue":"0.5",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"random number generator seed",
            "choices":[],
            "kinds":[],
            "name":"seed",
            "numValues":"0-1",
            "defaultValue":"123456",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"output saved to output.prefix.{train,test}.n.{gct|res,cls}, where n is the fold index",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.dataset.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"SplitDatasetTrainTest",
    "write":false,
    "tags":["gct", "cls", "res"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00024:3"
}, "61":{
    "category":"Prediction",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The training data file - .gct, .res",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"train.data.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The training class file - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"train.cls.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A saved model from a previous run of SVM",
            "choices":[],
            "kinds":["model"],
            "name":"saved.model.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The test data file - .gct, .res",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"test.data.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The test class file - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"test.cls.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The name of the output file for prediction results",
            "choices":[],
            "kinds":[],
            "name":"pred.results.output.file",
            "numValues":"0-1",
            "defaultValue":"<test.data.filename_basename>.pred.odf",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The name of the file containing the saved model",
            "choices":[],
            "kinds":[],
            "name":"model.output.file",
            "numValues":"0-1",
            "defaultValue":"<train.data.filename_basename>.model",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"SVM",
    "write":false,
    "tags":["Prediction Results", "model"],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00025:4"
}, "49":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[],
    "name":"Lu.Getz.Miska.Nature.June.2005.mouse.lung.pipeline",
    "write":false,
    "tags":[],
    "type":"pipeline",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.pipeline:00004:1"
}, "48":{
    "category":"Proteomics",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The output from the Peaks module",
            "choices":[],
            "kinds":["Spectrum Peaks"],
            "name":"peaks.output.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<peaks.output.filename_basename>.locate.odf",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"max-location of maximum filtered value, area-center of area of the peak",
            "choices":["max", "area"],
            "kinds":[],
            "name":"locate.peaks.as",
            "numValues":"0-1",
            "defaultValue":"max",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"LocatePeaks",
    "write":false,
    "tags":["Spectrum Peaks Locate"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00051:2"
}, "45":{
    "category":"Proteomics",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Spectrum file -.csv",
            "choices":[],
            "kinds":["csv"],
            "name":"spectrum1.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Spectrum file - .csv",
            "choices":[],
            "kinds":["csv"],
            "name":"spectrum2.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Output file name - .odf",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<spectrum1.filename_basename>spectrum2.filename_compare.odf",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Minimum M/Z to include",
            "choices":[],
            "kinds":[],
            "name":"low.Da",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Maximum M/Z to include",
            "choices":[],
            "kinds":[],
            "name":"high.Da",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"CompareSpectra",
    "write":false,
    "tags":["Spectra Similarity"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00052:2"
}, "44":{
    "category":"Prediction",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The data file - .gct, .res",
            "choices":[],
            "kinds":["gct", "res"],
            "name":"data.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The class file - .cls ",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The name of the output file for prediction results",
            "choices":[],
            "kinds":[],
            "name":"prediction.results.file",
            "numValues":"0-1",
            "defaultValue":"<data.filename_basename>.pred.odf",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"CARTXValidation",
    "write":false,
    "tags":["Prediction Results"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00062:2"
}, "47":{
    "category":"Proteomics",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Zip file containing peak lists",
            "choices":[],
            "kinds":[],
            "name":"peakList.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Zip file containing retention time (in this case from mapquant)",
            "choices":[],
            "kinds":[],
            "name":"retentionTime.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"CSV file with header: experiment, sample, class",
            "choices":[],
            "kinds":[],
            "name":"sampleInfo.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Global list of identified peptides",
            "choices":[],
            "kinds":[],
            "name":"globalID.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"OPTIONAL: Specify the accurate mass table",
            "choices":[],
            "kinds":["txt"],
            "name":"accurateMass.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"OPTIONAL: Specify the prefit coefficients in a file",
            "choices":[],
            "kinds":["txt"],
            "name":"prefitCoef.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Use bootstrapping to calculate landmark match statistics",
            "choices":["0=No", "1=Yes"],
            "kinds":[],
            "name":"Bootstrap",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether you are running on an LSF cluster version of GenePattern",
            "choices":["no", "yes"],
            "kinds":[],
            "name":"running.on.LSF",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"LandmarkMatch",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00083:2"
}, "46":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"GEO Series record (GSExxx) or a GEO Dataset (GDSxxx). Either a GEO accession or a GEO SOFT file must be given.",
            "choices":[],
            "kinds":[],
            "name":"GEO.accession",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A previously downloaded GEO SOFT file or its gzipped representation. Either a GEO SOFT file or a GEO accession must be given.",
            "choices":[],
            "kinds":["soft", "gz"],
            "name":"GEO.SOFT.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The name of the column that contains the expression values",
            "choices":[],
            "kinds":[],
            "name":"data.column.name",
            "numValues":"0-1",
            "defaultValue":"VALUE",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "numValues":"0-1",
            "defaultValue":"<GEO.accession><GEO.SOFT.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"FTP Proxy server",
            "choices":[],
            "kinds":[],
            "name":"ftp.proxy.server",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"FTP Proxy username",
            "choices":[],
            "kinds":[],
            "name":"ftp.proxy.username",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"FTP Proxy password",
            "choices":[],
            "kinds":[],
            "name":"ftp.proxy.password",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"PASSWORD",
            "fileChoice":false
        },
        {
            "description":"HTTP Proxy server",
            "choices":[],
            "kinds":[],
            "name":"http.proxy.server",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"HTTP Proxy username",
            "choices":[],
            "kinds":[],
            "name":"http.proxy.username",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"HTTP Proxy password",
            "choices":[],
            "kinds":[],
            "name":"http.proxy.password",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"PASSWORD",
            "fileChoice":false
        }
    ],
    "name":"GEOImporter",
    "write":false,
    "tags":["gct"],
    "type":"module",
    "version":"5",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00042:5"
}, "51":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"File created by MultiplotPreprocess (.zip)",
            "choices":[],
            "kinds":["zip"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"MultiplotExtractor",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00100:1"
}, "52":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"File with data to prepare for plotting (gct)",
            "choices":[],
            "kinds":["gct", "res"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Class file for this data (cls)",
            "choices":[],
            "kinds":["cls"],
            "name":"class.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Name of file to create for use in Multiplot visualizer",
            "choices":[],
            "kinds":["zip"],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>.zip",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to compute fold changes between each replicate (turning this on can slow your work).",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"replicateFC",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Whether to create random expression data (and fold changes, etc for this data). Turning this on can slow your work",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"randomData",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Remove outlier replicate values of genes from processing (see \"Help\" for details)",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"outlierElimination",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Perform t-test, Hochberg p-value adjustment, and significance comparison to randomized data",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"doStats",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"MultiplotPreprocess",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00098:1"
}, "53":{
    "category":"Clustering",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input dataset (gct or res)",
            "choices":[],
            "kinds":[],
            "name":"dataset.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Initial value of K",
            "choices":[],
            "kinds":[],
            "name":"k.initial",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Final value of K",
            "choices":[],
            "kinds":[],
            "name":"k.final",
            "numValues":"0-1",
            "defaultValue":"5",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Number of clusterings per value of K",
            "choices":[],
            "kinds":[],
            "name":"num.clusterings",
            "numValues":"0-1",
            "defaultValue":"20",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Maximum number of NMF iterations per clustering",
            "choices":[],
            "kinds":[],
            "name":"max.num.iterations",
            "numValues":"0-1",
            "defaultValue":"2000",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Error function",
            "choices":["divergence", "euclidean"],
            "kinds":[],
            "name":"error.function",
            "numValues":"0-1",
            "defaultValue":"divergence",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Seed for random number generator",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"123456789",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Prefix to append to all output files",
            "choices":[],
            "kinds":[],
            "name":"output.file.prefix",
            "numValues":"0-1",
            "defaultValue":"<dataset.filename_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"How many \"no change\" checks are needed to stop NMF iterations before max iterations is reached(convergence)",
            "choices":[],
            "kinds":[],
            "name":"stop.convergence",
            "numValues":"0-1",
            "defaultValue":"40",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Frequency (NMF iterations) of \"no change\" checks",
            "choices":[],
            "kinds":[],
            "name":"stop.frequency",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        }
    ],
    "name":"NMFConsensus",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00057:4"
}, "54":{
    "category":"Projection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input file - .gct, .res, .odf",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Cluster by rows or columns",
            "choices":["1=rows", "3=columns"],
            "kinds":[],
            "name":"cluster.by",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"stub name of the output files",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"PCA",
    "write":false,
    "tags":["matrix"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00017:3"
}, "50":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"File created by MultiplotPreprocess (.zip)",
            "choices":[],
            "kinds":["zip"],
            "name":"input.file.name",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Smaller one plot visualizer or bigger two plot",
            "choices":["1=one plot", "2=two plots"],
            "kinds":[],
            "name":"number.of.plots",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Path to GO Table for Gene Ontology highlighting",
            "choices":[],
            "kinds":["txt"],
            "name":"path.to.gotable",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"File with settings from a saved multiplot session",
            "choices":[],
            "kinds":[],
            "name":"plot.settings",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"Multiplot",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00099:1"
}, "281":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input file - .res, .gct",
            "choices":[],
            "kinds":["gct", "res", "odf"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A file containing information about the samples. The sample info file must contain the three columns: Array, Sample, and Batch. Any additional columns are used as covariates in the analysis.(.txt file)",
            "choices":[],
            "kinds":["txt"],
            "name":"sample.info.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The covariate columns to use in analysis. This is either set to all, none, or a list specifying one or more covariate columns from sample info file to use in the analysis (i.e, 4, 5, 7, ...). If this is set to 'all' then all the covariate columns are used. If this is set to 'none' then none of the covariate columns are used.",
            "choices":[],
            "kinds":[],
            "name":"covariate.columns",
            "numValues":"0-1",
            "defaultValue":"all",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The filter to apply to genes with absent calls (a value between 0 and 1). Filters genes with absent calls in 1-(absent calls filter) of the samples. Ignored if input file is not a .res file.\t",
            "choices":[],
            "kinds":[],
            "name":"absent.calls.filter",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to generate prior probability distribution plots. Ignored if non-parametric method is used.",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"create.prior.plots",
            "numValues":"0-1",
            "defaultValue":"T",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Empirical Bayes priors distribution estimation method to use. Either a parametric or non-parametric method can be applied. If unsure of which method to use try the parametric method first since it is faster.",
            "choices":["T=parametric", "F=non-parametric"],
            "kinds":[],
            "name":"prior.method",
            "numValues":"0-1",
            "defaultValue":"T",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Name of batch adjusted output file",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>.combat.<input.file_extension>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ComBat",
    "write":false,
    "tags":["res", "gct"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00127:2"
}, "280":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Title or identifier of the caArray experiment to import data from. https://array.nci.nih.gov/caarray/home.action",
            "choices":[],
            "kinds":[],
            "name":"experiment",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"URL for caArray server.",
            "choices":[],
            "kinds":[],
            "name":"url",
            "numValues":"0-1",
            "defaultValue":"http://array.nci.nih.gov:8080",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"CaArray2ImportViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00279:1"
}, "285":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A zip file of CEL files",
            "choices":[],
            "kinds":["zip"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The method to use. Note that dchip and MAS5 will not work with ST arrays.",
            "choices":["dChip", "GCRMA", "MAS5", "RMA"],
            "kinds":[],
            "name":"method",
            "numValues":"0-1",
            "defaultValue":"RMA",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(GCRMA and RMA only) Whether to normalize data using quantile normalization",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"quantile.normalization",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(RMA only) Whether to background correct using RMA background correction",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"background.correct",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to compute Present/Absent calls",
            "choices":["yes=yes (create res file)", "no=no (create gct file)"],
            "kinds":[],
            "name":"compute.present.absent.calls",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(MAS5 only) The normalization method to apply after expression values are computed. The column having the median of the means is used as the reference unless the parameter value to scale to is given.",
            "choices":["linear fit", "mean scaling", "median scaling", "none", "quantile normalization"],
            "kinds":[],
            "name":"normalization.method",
            "numValues":"0-1",
            "defaultValue":"median scaling",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(median/mean scaling only) The value to scale to.",
            "choices":[],
            "kinds":[],
            "name":"value.to.scale.to",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A tab-delimited text file containing one scan, sample, and class per line",
            "choices":[],
            "kinds":["txt", "clm"],
            "name":"clm.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to annotate probes with the gene symbol and description",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"annotate.probes",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Custom CDF file. Leave blank to use default internally provided CDF file (custom cdf file is not implemented for GCRMA).",
            "choices":[],
            "kinds":["cdf"],
            "name":"cdf.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The base name of the output file(s)",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ExpressionFileCreator",
    "write":false,
    "tags":["res", "gct", "cls"],
    "type":"module",
    "version":"11",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00041:11"
}, "284":{
    "category":"IGV",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset to be viewed in IGV or IGV session file",
            "choices":[],
            "kinds":["bam", "bed", "cbs.txt", "clm", "cls", "cn", "Comparative Marker Selection", "csv", "Dataset", "gct", "glad", "igv", "loh", "maf", "Matrix", "sam", "res", "seg", "snp", "txt", "xcn", "xls", "xml", "zip"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The index file.",
            "choices":[],
            "kinds":["bai", "sai"],
            "name":"index.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Choose the genome for your data. IGV will launch with hg19 or the last viewed genome by default.",
            "choices":["=Select a genome", "hg19=Human hg19", "b37=Human (b37)", "hg18=Human hg18", "1kg_ref=Human (1kg reference, b36)", "hg17=Human hg17", "hg16=Human hg16", "mm9=Mouse mm9", "mm8=Mouse mm8", "mm7=Mouse mm7", "panTro2=Chimp (panTro2)", "rheMac2=Rhesus (rheMac2)", "rn4=Rat (rn4)", "canFam2=Dog (canFam2)", "bosTau6=Cow (bosTau6)", "bosTau4=Cow (bosTau4)", "bosTau3=Cow (bosTau3)", "equCab2=Horse (equCab2)", "susScrofa=Sus Scrofa (9.56)", "galGal3=Chicken (galGal3)", "cavPor3=Guinea Pig (cavPor3)", "monDom5=Opossum (monDom5)", "MusPutFur1.0=Ferret (MusPutFur1.0)", "xenTro2=X. tropicalis (xenTro2)", "taeGut1=Zebra Finch (taeGut1)", "zebrafish=Zebrafish (Zv7/danRer5)", "danRer6=Zebrafish (Zv8/danRer6)", "danRer7=Zebrafish (Zv9/danRer7)", "gasAcu1=Stickleback (gasAcu1)", "Aplysia=Aplysia", "Plasmodium_3D7_v2.1=Plasmodium (3D7 v2.1)", "Plasmodium_3D7_v5.5=Plasmodium (3D7 v5.5)", "Plasmodium_6.1=Plasmodium (6.1)", "PlasmoDB_7.0=Plasmodium (3D7 V7.0)", "PlasmoDB_8.2=Plasmodium (3D7 V8.2)", "pvivax=P. vivax (7.2)", "GSM552910=S. cerevisiae (GSM552910)", "sacCer1=S. cerevisiae (sacCer1)", "sacCer2=S. cerevisiae (sacCer2)", "sacCer3=S. cerevisiae (sacCer3)", "sk1=S. cerevisiae (sk1)", "Y55=S. cerevisiae (Y55)", "sacCer62=S. cerevisiae (EF3 r62)", "spombe_709=S. pombe (7/09)", "spombe_1.55=S. pombe (EF 1.55)", "candida=C. albicans", "mg8=M. oryzae (mg8)", "spur_2.1=S.purpuratus (2.1+)", "spur_2.5=S. purpuratus (2.5)", "spur_3.0=S. purpuratus (3.0)", "WS220=C. elegans (WS220)", "WS201=C. elegans (WS201)", "ce6=C. elegans (ce6)", "ce4=C. elegans (ce4)", "dm3=D. melanogaster (dm3)", "dm2=D. melanogaster (dm2)", "dmel_5.9=D. melanogaster (5.9)", "dmel_r5.22=D. melanogaster (r5.22)", "dmel_r5.33=D. melanogaster (r5.33)", "tcas_2.0=T. castaneum (2.0)", "tcas_3.0=T. castaneum (3.0)", "ncrassa_v3=Neurospora crassa (v3)", "nc10=N. crassa OR74A (NC10)", "Glamblia_2.0=G. lamblia (2.0)", "me49=T. gondii (ME49)", "tb927=T. brucei (927 v2.5)", "tbrucei927_4.0=T. brucei (927 v4.0)", "tbgambi=T. brucei gambiense", "tbgambi_4.0=T. brucei gambiense (v4.0)", "lmjr=L. major Friedlin", "lmjr_4.0=L. major Friedlin (v4.0)", "anidulans_4.1=A. nidulans (4.1)", "NC_009012=C. thermocellum (NC_009012)", "NC_002929=B. pertussis (Tohama I NC_002929.2)", "U00096.2=E. coli K-12 MG1655 (U00096.2)", "NC_000913.2=E. coli K-12 MG1655 (NC_000913.2)", "NC_002655.2=E. coli O157:H7 EDL933 (NC_002655.2)", "CSavignyi_v2.1=C. savignyi (v2.1 reftigs)", "tair8=A. thaliana (TAIR 8)", "tair9=A. thaliana (TAIR 9)", "tair10=A. thaliana (TAIR 10)", "O_Sativa_r6=O. Sativa (release 6)", "osativa_6.1=O. Sativa (release 6.1)", "osativa_7=O. Sativa (release 7)", "B73=Maize (B73 4a.53)", "ZmB73_5a=Maize (ZmB73 5a)", "ITAG2.3=Tomato (ITAG2.3)", "ppatens_1.2=P. patens (V 1.2)", "D.discoideum=D. discoideum (05-13-2009)", "Foxy4287=Foxy4287"],
            "kinds":[],
            "name":"genomeId",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Provide a locus or gene of interest for your data. IGV will launch on chr1 or the last viewed chromosome by default. (e.g. chr1:2000-3000 or egfr)",
            "choices":[],
            "kinds":[],
            "name":"locus",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"IGV",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00170:3"
}, "283":{
    "category":"IGV",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset to be viewed in IGV or IGV session file",
            "choices":[],
            "kinds":["bam", "bed", "cbs.txt", "clm", "cls", "cn", "Comparative Marker Selection", "csv", "Dataset", "gct", "glad", "igv", "loh", "maf", "Matrix", "sam", "res", "seg", "snp", "txt", "xcn", "xls", "xml", "zip"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The index file.",
            "choices":[],
            "kinds":["bai", "sai"],
            "name":"index.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Choose the genome for your data. IGV will launch with hg19 or the last viewed genome by default.",
            "choices":["=Select a genome", "hg19=Human hg19", "b37=Human (b37)", "hg18=Human hg18", "1kg_ref=Human (1kg reference, b36)", "hg17=Human hg17", "hg16=Human hg16", "mm9=Mouse mm9", "mm8=Mouse mm8", "mm7=Mouse mm7", "panTro2=Chimp (panTro2)", "rheMac2=Rhesus (rheMac2)", "rn4=Rat (rn4)", "canFam2=Dog (canFam2)", "bosTau6=Cow (bosTau6)", "bosTau4=Cow (bosTau4)", "bosTau3=Cow (bosTau3)", "equCab2=Horse (equCab2)", "susScrofa=Sus Scrofa (9.56)", "galGal3=Chicken (galGal3)", "cavPor3=Guinea Pig (cavPor3)", "monDom5=Opossum (monDom5)", "MusPutFur1.0=Ferret (MusPutFur1.0)", "xenTro2=X. tropicalis (xenTro2)", "taeGut1=Zebra Finch (taeGut1)", "zebrafish=Zebrafish (Zv7/danRer5)", "danRer6=Zebrafish (Zv8/danRer6)", "danRer7=Zebrafish (Zv9/danRer7)", "gasAcu1=Stickleback (gasAcu1)", "Aplysia=Aplysia", "Plasmodium_3D7_v2.1=Plasmodium (3D7 v2.1)", "Plasmodium_3D7_v5.5=Plasmodium (3D7 v5.5)", "Plasmodium_6.1=Plasmodium (6.1)", "PlasmoDB_7.0=Plasmodium (3D7 V7.0)", "PlasmoDB_8.2=Plasmodium (3D7 V8.2)", "pvivax=P. vivax (7.2)", "GSM552910=S. cerevisiae (GSM552910)", "sacCer1=S. cerevisiae (sacCer1)", "sacCer2=S. cerevisiae (sacCer2)", "sacCer3=S. cerevisiae (sacCer3)", "sk1=S. cerevisiae (sk1)", "Y55=S. cerevisiae (Y55)", "sacCer62=S. cerevisiae (EF3 r62)", "spombe_709=S. pombe (7/09)", "spombe_1.55=S. pombe (EF 1.55)", "candida=C. albicans", "mg8=M. oryzae (mg8)", "spur_2.1=S.purpuratus (2.1+)", "spur_2.5=S. purpuratus (2.5)", "spur_3.0=S. purpuratus (3.0)", "WS220=C. elegans (WS220)", "WS201=C. elegans (WS201)", "ce6=C. elegans (ce6)", "ce4=C. elegans (ce4)", "dm3=D. melanogaster (dm3)", "dm2=D. melanogaster (dm2)", "dmel_5.9=D. melanogaster (5.9)", "dmel_r5.22=D. melanogaster (r5.22)", "dmel_r5.33=D. melanogaster (r5.33)", "tcas_2.0=T. castaneum (2.0)", "tcas_3.0=T. castaneum (3.0)", "ncrassa_v3=Neurospora crassa (v3)", "nc10=N. crassa OR74A (NC10)", "Glamblia_2.0=G. lamblia (2.0)", "me49=T. gondii (ME49)", "tb927=T. brucei (927 v2.5)", "tbrucei927_4.0=T. brucei (927 v4.0)", "tbgambi=T. brucei gambiense", "tbgambi_4.0=T. brucei gambiense (v4.0)", "lmjr=L. major Friedlin", "lmjr_4.0=L. major Friedlin (v4.0)", "anidulans_4.1=A. nidulans (4.1)", "NC_009012=C. thermocellum (NC_009012)", "NC_002929=B. pertussis (Tohama I NC_002929.2)", "U00096.2=E. coli K-12 MG1655 (U00096.2)", "NC_000913.2=E. coli K-12 MG1655 (NC_000913.2)", "NC_002655.2=E. coli O157:H7 EDL933 (NC_002655.2)", "CSavignyi_v2.1=C. savignyi (v2.1 reftigs)", "tair8=A. thaliana (TAIR 8)", "tair9=A. thaliana (TAIR 9)", "tair10=A. thaliana (TAIR 10)", "O_Sativa_r6=O. Sativa (release 6)", "osativa_6.1=O. Sativa (release 6.1)", "osativa_7=O. Sativa (release 7)", "B73=Maize (B73 4a.53)", "ZmB73_5a=Maize (ZmB73 5a)", "ITAG2.3=Tomato (ITAG2.3)", "ppatens_1.2=P. patens (V 1.2)", "D.discoideum=D. discoideum (05-13-2009)", "Foxy4287=Foxy4287"],
            "kinds":[],
            "name":"genomeId",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Provide a locus or gene of interest for your data. IGV will launch on chr1 or the last viewed chromosome by default. (e.g. chr1:2000-3000 or egfr)",
            "choices":[],
            "kinds":[],
            "name":"locus",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"IGV",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"2.1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00170:2.1"
}, "282":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input file - .res, .gct. Note that if your data is log transformed, you will need to set the \"log transformed data\" parameter below to \"yes\".",
            "choices":[],
            "kinds":["gct", "res"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The class file - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The class file containing the confounding variable.",
            "choices":[],
            "kinds":["cls"],
            "name":"confounding.variable.cls.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The test to perform",
            "choices":["0=Class 0", "1=Class 1", "2=2 Sided"],
            "kinds":[],
            "name":"test.direction",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The statistic to use",
            "choices":["1=SNR", "0=T-Test", "3=SNR (median)", "2=T-Test (median)", "4=T-Test (min std)", "5=SNR (min std)", "6=SNR (median, min std)", "7=T-Test (median, min std)", "8=Paired T-Test"],
            "kinds":[],
            "name":"test.statistic",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"The minimum standard deviation if test statistic includes min std option",
            "choices":[],
            "kinds":[],
            "name":"min.std",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The number of permutations to perform (use 0 to calculate asymptotic p-values using the standard independent two-sample t-test)",
            "choices":[],
            "kinds":[],
            "name":"number.of.permutations",
            "numValues":"0-1",
            "defaultValue":"10000",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether the input data has been log transformed",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"log.transformed.data",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to perform all possible permutations",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"complete",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to perform balanced permutations",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"balanced",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The seed of the random number generator used to produce permutations",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"779948241",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Whether to smooth p-values",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"smooth.p.values",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Tests to perform when cls file has more than two classes (Note: not fully corrected for multiple hypothesis testing)",
            "choices":["one versus all", "all pairs"],
            "kinds":[],
            "name":"phenotype.test",
            "numValues":"0-1",
            "defaultValue":"one versus all",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>.comp.marker.odf",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ComparativeMarkerSelection",
    "write":false,
    "tags":["Comparative Marker Selection"],
    "type":"module",
    "version":"9",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00044:9"
}, "288":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input reference fasta or fasta.gz ",
            "choices":[],
            "kinds":["fasta", "fa"],
            "name":"Picard.CreateSequenceDictionary1.reference.sequence.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Unpaired reads file or first mate for paired reads. A file or zip of files containing reads in FASTA or FASTQ format (bz2 and gz compressed files are supported).",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "fn.gz", "fa.gz", "fasta.gz", "fq.gz", "fastq.gz", "fn.bz2", "fa.bz2", "fasta.bz2", "fq.bz2", "fastq.bz2", "zip", "gz", "bz2"],
            "name":"TopHat2.reads.pair.1",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Second mate for paired reads. A file or zip of files in FASTA or FASTQ format (bz2 and gz compressed files are supported).",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "fn.gz", "fa.gz", "fasta.gz", "fq.gz", "fastq.gz", "fn.bz2", "fa.bz2", "fasta.bz2", "fq.bz2", "fastq.bz2", "zip", "gz", "bz2"],
            "name":"TopHat2.reads.pair.2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Reference sequence to which to reorder reads in FASTA format.",
            "choices":[],
            "kinds":["fasta", "fa", "fna"],
            "name":"Picard.ReorderSam3.reference.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Input file in SAM or BAM format",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"Cufflinks5.input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"ThorinsQC_cegs",
    "write":true,
    "tags":[],
    "type":"pipeline",
    "version":"2",
    "lsid":"urn:lsid:8080.genepatt.genepattern.broadinstitute.org:genepatternmodules:5647:2"
}, "289":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input reference fasta or fasta.gz ",
            "choices":[],
            "kinds":["fasta", "fa"],
            "name":"Picard.CreateSequenceDictionary1.reference.sequence.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Unpaired reads file or first mate for paired reads. A file or zip of files containing reads in FASTA or FASTQ format (bz2 and gz compressed files are supported).",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "fn.gz", "fa.gz", "fasta.gz", "fq.gz", "fastq.gz", "fn.bz2", "fa.bz2", "fasta.bz2", "fq.bz2", "fastq.bz2", "zip", "gz", "bz2"],
            "name":"TopHat2.reads.pair.1",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Second mate for paired reads. A file or zip of files in FASTA or FASTQ format (bz2 and gz compressed files are supported).",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "fn.gz", "fa.gz", "fasta.gz", "fq.gz", "fastq.gz", "fn.bz2", "fa.bz2", "fasta.bz2", "fq.bz2", "fastq.bz2", "zip", "gz", "bz2"],
            "name":"TopHat2.reads.pair.2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A GTF file (v. 2.2 or higher) or GFF3 file containing a list of gene model annotations. TopHat will first extract the transcript sequences and align them to this virtual transcriptome first. Only the reads that do not fully map to the transcriptome will then be mapped on the genome. The reads that did map on the transcriptome will be converted to genomic mappings (spliced as needed) and merged with the novel mappings.",
            "choices":[],
            "kinds":["gtf", "gff3"],
            "name":"TopHat2.GTF.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Reference sequence to which to reorder reads in FASTA format.",
            "choices":[],
            "kinds":["fasta", "fa", "fna"],
            "name":"Picard.ReorderSam3.reference.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Reference annotation (GFF/GTF file) for isoform expression estimates",
            "choices":[],
            "kinds":["gff", "gtf"],
            "name":"Cufflinks7.GTF",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A file containing annotations in GTF format. Either an annotation gtf file or annotation gtf must be provided.",
            "choices":[],
            "kinds":["gtf"],
            "name":"RNASeQC8.annotation.gtf.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"ThorinsQC_cegs",
    "write":true,
    "tags":[],
    "type":"pipeline",
    "version":"1.1",
    "lsid":"urn:lsid:8080.genepatt.genepattern.broadinstitute.org:genepatternmodules:5647:1.1"
}, "286":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A .zip file containing mixture modeling results from the FLAMEMixtureModel module",
            "choices":[],
            "kinds":["zip"],
            "name":"mixture.model",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Criterion used for determining optimal number of clusters",
            "choices":["AIC=Akaike Information Criterion (AIC)", "BIC=Bayesian Information Criterion (BIC)", "SWR=Scale-free Weighted Ratio (SWR)", "distance.ratio=distance ratio", "intercluster.distance=intercluster distance"],
            "kinds":[],
            "name":"method",
            "numValues":"0-1",
            "defaultValue":"SWR",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"An integer; the seed fixes random computational processes during computation. This does not need to be changed under most circumstances.",
            "choices":[],
            "kinds":[],
            "name":"seed",
            "numValues":"0-1",
            "defaultValue":"123456",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"A prefix for output files",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<mixture.model_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FLAMEChooseOptimalClusterNumber",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"6",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00161:6"
}, "287":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input reference fasta or fasta.gz ",
            "choices":[],
            "kinds":["fasta", "fa"],
            "name":"Picard.CreateSequenceDictionary1.reference.sequence.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Unpaired reads file or first mate for paired reads. A file or zip of files containing reads in FASTA or FASTQ format (bz2 and gz compressed files are supported).",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "fn.gz", "fa.gz", "fasta.gz", "fq.gz", "fastq.gz", "fn.bz2", "fa.bz2", "fasta.bz2", "fq.bz2", "fastq.bz2", "zip", "gz", "bz2"],
            "name":"TopHat2.reads.pair.1",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Second mate for paired reads. A file or zip of files in FASTA or FASTQ format (bz2 and gz compressed files are supported).",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "fn.gz", "fa.gz", "fasta.gz", "fq.gz", "fastq.gz", "fn.bz2", "fa.bz2", "fasta.bz2", "fq.bz2", "fastq.bz2", "zip", "gz", "bz2"],
            "name":"TopHat2.reads.pair.2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Reference sequence to which to reorder reads in FASTA format.",
            "choices":[],
            "kinds":["fasta", "fa", "fna"],
            "name":"Picard.ReorderSam3.reference.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"ThorinsQC_cegs",
    "write":true,
    "tags":[],
    "type":"pipeline",
    "version":"1",
    "lsid":"urn:lsid:8080.genepatt.genepattern.broadinstitute.org:genepatternmodules:5647:1"
}, "270":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file in SAM or BAM format",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A label for the transfrags in the output files",
            "choices":[],
            "kinds":[],
            "name":"output.label",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Reference annotation (GFF/GTF file) for isoform expression estimates",
            "choices":[],
            "kinds":["gff", "gtf"],
            "name":"GTF",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Reference annotation (GFF/GTF file) to guide RABT assembly",
            "choices":[],
            "kinds":["gff", "gtf"],
            "name":"GTF.guide",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A GTF file specifying transcripts to be ignored",
            "choices":[],
            "kinds":["gtf"],
            "name":"mask.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Reference (FASTA/FA) for bias detection qnd correction algorithm",
            "choices":[],
            "kinds":["fasta", "fa", "zip"],
            "name":"frag.bias.correct",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to do an initial estimation procedure to more accurately weight reads mapping to multiple locations in the genome",
            "choices":["no", "yes"],
            "kinds":[],
            "name":"multi.read.correct",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"Cufflinks",
    "write":false,
    "tags":["fpkm_tracking", "gtf"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00231:3"
}, "272":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file in SAM or BAM format",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"first.SAM.or.BAM.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Input file in SAM or BAM format",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"second.SAM.or.BAM.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"To specify more than two input files, use this parameter to specify TXT file containing a list of input SAM/BAM files",
            "choices":[],
            "kinds":["txt"],
            "name":"input.files.list",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A reference annotation GTF",
            "choices":[],
            "kinds":["gtf"],
            "name":"GTF.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A TXT file containing a label for each sample (one label per line). ",
            "choices":[],
            "kinds":["txt"],
            "name":"sample.labels",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Analyze the provided samples as a time series",
            "choices":["no", "yes"],
            "kinds":[],
            "name":"time.series",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Normalize by the upper quartile of the number of fragments mapping to individual loci ",
            "choices":["no", "yes"],
            "kinds":[],
            "name":"upper.quartile.norm",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Count all fragments, including those not compatible with any reference transcript, towards the number of mapped fragments used in the FPKM denominator. ",
            "choices":["no", "yes"],
            "kinds":[],
            "name":"total.hits.norm",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Count only those fragments compatible with some reference transcript towards the number of mapped fragments used in the FPKM denominator.",
            "choices":["no", "yes"],
            "kinds":[],
            "name":"compatible.hits.norm",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Reference (FASTA/FA) for bias detection qnd correction algorithm",
            "choices":[],
            "kinds":["fasta", "fa", "zip"],
            "name":"frag.bias.correct",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to do an initial estimation procedure to more accurately weight reads mapping to multiple locations in the genome",
            "choices":["no", "yes"],
            "kinds":[],
            "name":"multi.read.correct",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The minimum number of alignments in a locus for needed to conduct significance testing on changes in that locus observed between samples.",
            "choices":[],
            "kinds":[],
            "name":"min.alignment.count",
            "numValues":"0-1",
            "defaultValue":"500",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The allowed false discovery rate.",
            "choices":[],
            "kinds":[],
            "name":"FDR",
            "numValues":"0-1",
            "defaultValue":".05",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Mask GTF file",
            "choices":[],
            "kinds":["gtf"],
            "name":"mask.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"Cufflinks.cuffdiff",
    "write":false,
    "tags":["fpkm_tracking", "diff"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00236:3"
}, "271":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A GTF file output from Cufflinks, or a TXT containing a list of paths to GTF files.",
            "choices":[],
            "kinds":["gtf"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A prefix for the module output",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A reference annotation GTF",
            "choices":[],
            "kinds":["gtf"],
            "name":"reference.GTF",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to ignore reference transcripts that are not overlapped by any transcript in the input files.",
            "choices":["no=no", "yes=yes"],
            "kinds":[],
            "name":"exclude.transcripts",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Fasta file or zip of fasta files against which your reads were aligned",
            "choices":[],
            "kinds":[],
            "name":"custom.reference.genome.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"Cufflinks.cuffcompare",
    "write":false,
    "tags":["gtf", "tmap", "refmap", "tracking", "txt", "stats"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00235:3"
}, "274":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input CN file (a tab-delimited file format that contains SNP copy numbers)",
            "choices":[],
            "kinds":["cn"],
            "name":"cn.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Prefix for the output XCN file name",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<cn.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"CNToXCN",
    "write":false,
    "tags":["xcn"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broadinstitute.org:cancer.genome.analysis:00057:1"
}, "273":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file in SAM or BAM format",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A label for the transfrags in the output files",
            "choices":[],
            "kinds":[],
            "name":"output.label",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Reference annotation (GFF/GTF file) for isoform expression estimates",
            "choices":[],
            "kinds":["gff", "gtf"],
            "name":"GTF",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Reference annotation (GFF/GTF file) to guide RABT assembly",
            "choices":[],
            "kinds":["gff", "gtf"],
            "name":"GTF.guide",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A GTF file specifying transcripts to be ignored",
            "choices":[],
            "kinds":["gtf"],
            "name":"mask.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Reference (FASTA/FA file) for bias detection qnd correction algorithm",
            "choices":[],
            "kinds":["fasta", "fa"],
            "name":"frag.bias.correct",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to do an initial estimation procedure to more accurately weight reads mapping to multiple locations in the genome",
            "choices":["no", "yes"],
            "kinds":[],
            "name":"multi.read.correct",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"Cufflinks",
    "write":false,
    "tags":["genes.expr", "transcripts.expr", "gtf", "gff", "bam", "sam"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00231:2"
}, "275":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A prebuilt bowtie index. Either a prebuilt or a custom Bowtie index must be specified.",
            "choices":["none=", "a_thaliana=A. Thaliana, TAIR8", "b_taurus=B. Taurus, UMD Freeze 3.0", "e_coli=E. Coli", "c_elegans_ws200=C. Elegans, WormBase WS200", "hg19=H. sapiens, UCSC hg19", "hg18=H. sapiens, UCSC hg18", "mm9=M. musculus, UCSC mm9", "mm8=M. musculus, UCSC mm8", "m_musculus_ncbi37=M. musculus, NCBI 37", "s_cerevisiae= S. cerevisiae"],
            "kinds":[],
            "name":"prebuilt.bowtie.index",
            "numValues":"0-1",
            "defaultValue":"none",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A ZIP archive containing Bowtie index files. Either a prebuilt or a custom Bowtie index must be specified.",
            "choices":[],
            "kinds":["zip"],
            "name":"custom.bowtie.index",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Unpaired reads file or first mate for paired reads. A file or zip of files containing reads in FASTA or FASTQ format (can be compressed - ie .gz).",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "fn.gz", "fa.gz", "fasta.gz", "fq.gz", "fastq.gz", "fn.bz2", "fa.bz2", "fasta.bz2", "fq.bz2", "fastq.bz2", "zip", "gz", "bz2"],
            "name":"reads.pair.1",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Second mate for paired reads. A file or zip of files in FASTA or FASTQ format (can be compressed - ie .gz).",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "fn.gz", "fa.gz", "fasta.gz", "fq.gz", "fastq.gz", "fn.bz2", "fa.bz2", "fasta.bz2", "fq.bz2", "fastq.bz2", "zip", "gz", "bz2"],
            "name":"reads.pair.2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The expected mean inner distance between mate pairs.",
            "choices":[],
            "kinds":[],
            "name":"mate.inner.dist",
            "numValues":"0-1",
            "defaultValue":"50",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The standard deviation for the distribution on inner distances between mate pairs.",
            "choices":[],
            "kinds":[],
            "name":"mate.std.dev",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Library type for strand specific reads.",
            "choices":["fr-unstranded=Standard Illumina (fr-unstranded)", "fr-firststrand=dUTP, NSR, NNSR (fr-firststrand)", "fr-secondstrand=Ligation, Standard SOLiD (fr-secondstrand)"],
            "kinds":[],
            "name":"library.type",
            "numValues":"0-1",
            "defaultValue":"fr-unstranded",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A GTF file (v. 2.2 or higher) or GFF3 file containing a list of gene model annotations. The exon records in this file will be used to build a set of known splice junctions for each gene and to attempt to align reads to these junctions even if they would not normally be covered by the initial mapping.",
            "choices":[],
            "kinds":["gtf", "gff3"],
            "name":"GTF.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A file containing raw junctions. Junctions are specified one per line, in a tab-delimited format.",
            "choices":[],
            "kinds":["juncs"],
            "name":"raw.junctions.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"If no, then only look for junctions indicated in the supplied GTF or GFF file. (Ignored when no GTF or GFF file is specified).",
            "choices":["=yes", "--no-novel-juncs=no"],
            "kinds":[],
            "name":"find.novel.junctions",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The anchor length. This value must be greater than 4.",
            "choices":[],
            "kinds":[],
            "name":"min.anchor.length",
            "numValues":"0-1",
            "defaultValue":"8",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The maximum number of mismatches that may appear in the \"anchor\" region of a spliced alignment.",
            "choices":[],
            "kinds":[],
            "name":"splice.mismatches",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The minimum intron length. TopHat will ignore donor/acceptor pairs closer than this many bases apart.",
            "choices":[],
            "kinds":[],
            "name":"min.intron.length",
            "numValues":"0-1",
            "defaultValue":"70",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The maximum intron length. When searching for junctions ab initio, TopHat will ignore donor/acceptor pairs farther than this many bases apart, except when such a pair is supported by a split segment alignment of a long read.",
            "choices":[],
            "kinds":[],
            "name":"max.intron.length",
            "numValues":"0-1",
            "defaultValue":"500000",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Whether to allow indel search",
            "choices":["=yes", "--no-novel-indels=no"],
            "kinds":[],
            "name":"indel.search",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The maximum insertion length",
            "choices":[],
            "kinds":[],
            "name":"max.insertion.length",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The maximum deletion length",
            "choices":[],
            "kinds":[],
            "name":"max.deletion.length",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Use the Solexa scale for quality values in FASTQ files.",
            "choices":["--solexa-quals=yes", "=no"],
            "kinds":[],
            "name":"use.solexa.scale",
            "numValues":"0-1",
            "defaultValue":"--solexa-quals",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"As of the Illumina GA pipeline version 1.3, quality scores are encoded in Phred-scaled base-64. Use this option for FASTQ files from pipeline 1.3 or later.",
            "choices":["--solexa1.3-quals=yes", "=no"],
            "kinds":[],
            "name":"use.solexa.1.3.scale",
            "numValues":"0-1",
            "defaultValue":"--solexa1.3-quals",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A zip file containing separate quality value files for single end or first pair of paired reads (colorspace read files (CSFASTA) come with separate qual files)",
            "choices":[],
            "kinds":["zip"],
            "name":"quality.value.files.1",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A zip file containing separate quality value files for second pair of paired reads (colorspace read files (CSFASTA) come with separate qual files)",
            "choices":[],
            "kinds":["zip"],
            "name":"quality.value.files.2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Quality values are space-delimited integer values, this becomes default when you specify color option.",
            "choices":["--integer-quals=yes", "=no"],
            "kinds":[],
            "name":"integer.quals",
            "numValues":"0-1",
            "defaultValue":"--integer-quals",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Colorspace reads. Requires a color space bowtie index.",
            "choices":["-C=yes", "=no"],
            "kinds":[],
            "name":"colorspace.reads",
            "numValues":"0-1",
            "defaultValue":"-C",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Filters out junctions supported by too few alignments. Suppose a junction spanning two exons, is supported by S reads. Let the average depth of coverage of exon A be D, and assume that it is higher than B. If S / D is less than the minimum isoform fraction, the junction is not reported. A value of zero disables the filter.",
            "choices":[],
            "kinds":[],
            "name":"min.isoform.fraction",
            "numValues":"0-1",
            "defaultValue":"0.15",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Allows up to the specified alignments to the reference for a given read, and suppresses all alignments for reads with more than this many alignments.",
            "choices":[],
            "kinds":[],
            "name":"max.multihits",
            "numValues":"0-1",
            "defaultValue":"40",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Reads are initially mapped, allowing up to this many mismatches in each read alignment.",
            "choices":[],
            "kinds":[],
            "name":"initial.read.mismatch",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Enables or disables the mate pair closure-based search for junctions. Closure-based search should only be used when the expected inner distance between mates is small (<= 50bp).",
            "choices":["--closure-search=yes", "--no-closure-search=no"],
            "kinds":[],
            "name":"closure.search",
            "numValues":"0-1",
            "defaultValue":"--closure-search",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Enables or disables the coverage based search for junctions. Use when coverage search is disabled by default (such as for reads 75bp or longer), for maximum sensitivity.",
            "choices":["--coverage-search=yes", "--no-coverage-search=no"],
            "kinds":[],
            "name":"coverage.search",
            "numValues":"0-1",
            "defaultValue":"--coverage-search",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Attempts to find alignments incident to microexons. Works only for reads 50bp or longer.",
            "choices":["--microexon-search=yes", "=no"],
            "kinds":[],
            "name":"microexon.search",
            "numValues":"0-1",
            "defaultValue":"--microexon-search",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Enables or disables a slower, but potentially more sensitive algorithm to find junctions in addition to its standard search. Consider using this if you expect that your experiment produced a lot of reads from pre-mRNA, that fall within the introns of your transcripts.",
            "choices":["--butterfly-search=yes", "=no"],
            "kinds":[],
            "name":"butterfly.search",
            "numValues":"0-1",
            "defaultValue":"--butterfly-search",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Specify how many parallel search threads to launch. All threads find alignments in parallel, increasing alignment throughput by approximately a multiple of the number of threads. NOTE: There is a known issue that specifying more than 1 thread will cause the results to be non-deterministic.",
            "choices":[],
            "kinds":[],
            "name":"num.threads",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"A prefix for the output file names",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<reads.pair.1_basename>",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        }
    ],
    "name":"TopHat",
    "write":false,
    "tags":["bam", "junctions.bed", "insertions.bed", "deletions.bed"],
    "type":"module",
    "version":"5",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00230:5"
}, "276":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[],
    "name":"Golub.Slonim.1999.Nature.all.aml.pipeline",
    "write":false,
    "tags":[],
    "type":"pipeline",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.pipeline:00001:2"
}, "277":{
    "category":"",
    "description":"description goes here",
     "inputs":[
        {
            "description":"",
            "choices":[],
            "kinds":[],
            "name":"message",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"RLibDemo",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"0.1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00276:0.1"
}, "278":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"SNP file containing both normal and target samples.",
            "choices":[],
            "kinds":["snp"],
            "name":"snp.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"dChip format sample info file containing Ploidy(numeric) and Sample columns",
            "choices":[],
            "kinds":["txt", "xls"],
            "name":"sample.info.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to include genotype calls from the input snp file if they exist.",
            "choices":["xcn=yes (create xcn file)", "cn=no (create cn file)"],
            "kinds":[],
            "name":"include.genotype.calls",
            "numValues":"0-1",
            "defaultValue":"cn",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file.name",
            "numValues":"0-1",
            "defaultValue":"<snp.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"CopyNumberDivideByNormals",
    "write":false,
    "tags":["cn", "xcn"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00085:3"
}, "279":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A zip file of CEL files",
            "choices":[],
            "kinds":["zip"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The method to use",
            "choices":["dChip", "GCRMA", "MAS5", "RMA"],
            "kinds":[],
            "name":"method",
            "numValues":"0-1",
            "defaultValue":"RMA",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(GCRMA and RMA only) Whether to normalize data using quantile normalization",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"quantile.normalization",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(RMA only) Whether to background correct using RMA background correction",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"background.correct",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to compute Present/Absent calls",
            "choices":["yes=yes (create res file)", "no=no (create gct file)"],
            "kinds":[],
            "name":"compute.present.absent.calls",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(MAS5 only) The normalization method to apply after expression values are computed. The column having the median of the means is used as the reference unless the parameter value to scale to is given.",
            "choices":["linear fit", "mean scaling", "median scaling", "none", "quantile normalization"],
            "kinds":[],
            "name":"normalization.method",
            "numValues":"0-1",
            "defaultValue":"median scaling",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(median/mean scaling only) The value to scale to.",
            "choices":[],
            "kinds":[],
            "name":"value.to.scale.to",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A tab-delimited text file containing one scan, sample, and class per line",
            "choices":[],
            "kinds":["txt", "clm"],
            "name":"clm.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to annotate probes with the gene symbol and description",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"annotate.probes",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Custom CDF file. Leave blank to use default internally provided CDF file (custom cdf file is not implemented for GCRMA).",
            "choices":[],
            "kinds":["cdf"],
            "name":"cdf.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The base name of the output file(s)",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ExpressionFileCreator",
    "write":false,
    "tags":["res", "gct", "cls"],
    "type":"module",
    "version":"10",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00041:10"
}, "109":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The dataset features - .gct",
            "choices":[],
            "kinds":["gct"],
            "name":"gct.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The dataset class labels - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The output file base name",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<gct.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Gct2Arff",
    "write":false,
    "tags":["arff"],
    "type":"module",
    "version":"0.3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00138:0.3"
}, "108":{
    "category":"Prediction",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The training file in .FASTA format. Multi-label class names are separated by colons (:).",
            "choices":[],
            "kinds":["FASTA"],
            "name":"train.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The testing file in .FASTA format. Multi-label class names are separated by colons (:).",
            "choices":[],
            "kinds":["FASTA"],
            "name":"test.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The name of the substitution matrix used by Blast.",
            "choices":["PAM30=PAM30", " PAM70=PAM70", " BLOSUM45=BLOSUM45", " BLOSUM62=BLOSUM62", " BLOSUM80=BLOSUM80"],
            "kinds":[],
            "name":"sub.matrix",
            "numValues":"0-1",
            "defaultValue":"PAM30",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The name of the output file for prediction results.",
            "choices":[],
            "kinds":[],
            "name":"pred.results.file",
            "numValues":"0-1",
            "defaultValue":"<test.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"BlastTrainTest",
    "write":false,
    "tags":["Prediction Results"],
    "type":"module",
    "version":"0.4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00141:0.4"
}, "107":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The dataset - .res, .gct",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"dataset.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The s matrix - .odf",
            "choices":[],
            "kinds":["Matrix"],
            "name":"s.matrix.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The t matrix - .odf",
            "choices":[],
            "kinds":["Matrix"],
            "name":"t.matrix.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The u matrix - .odf",
            "choices":[],
            "kinds":["Matrix"],
            "name":"u.matrix.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A cls or sample info file - .cls, .txt",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.or.sample.info.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The name of the class column to use in the sample info file (required if sample info file provided)",
            "choices":[],
            "kinds":[],
            "name":"sample.info.class",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"",
            "fileChoice":false
        },
        {
            "description":"The feature set file - .gmt, .gmx, .grp",
            "choices":[],
            "kinds":["gmt", "gmx", "grp"],
            "name":"featureset.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"PCAViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"5",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00018:5"
}, "106":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A zip file of CEL files",
            "choices":[],
            "kinds":["zip"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The method to use",
            "choices":["dChip", "GCRMA", "MAS5", "RMA"],
            "kinds":[],
            "name":"method",
            "numValues":"0-1",
            "defaultValue":"RMA",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(GCRMA and RMA only) Whether to normalize data using quantile normalization",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"quantile.normalization",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(RMA only) Whether to background correct using RMA background correction",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"background.correct",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to compute Present/Absent calls",
            "choices":["yes=yes (create res file)", "no=no (create gct file)"],
            "kinds":[],
            "name":"compute.present.absent.calls",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(MAS5 only) The normalization method to apply after expression values are computed. The column having the median of the means is used as the reference unless the parameter value to scale to is given.",
            "choices":["linear fit", "mean scaling", "median scaling", "none", "quantile normalization"],
            "kinds":[],
            "name":"normalization.method",
            "numValues":"0-1",
            "defaultValue":"median scaling",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(median/mean scaling only) The value to scale to.",
            "choices":[],
            "kinds":[],
            "name":"value.to.scale.to",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A tab-delimited text file containing one scan, sample, and class per line",
            "choices":[],
            "kinds":["txt", "clm"],
            "name":"clm.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to annotate probes with the gene symbol and description",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"annotate.probes",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Custom CDF file. Leave blank to use default internally provided CDF file (custom cdf file is not implemented for GCRMA).",
            "choices":[],
            "kinds":["cdf"],
            "name":"cdf.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The base name of the output file(s)",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ExpressionFileCreator",
    "write":false,
    "tags":["res", "gct", "cls"],
    "type":"module",
    "version":"8",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00041:8"
}, "105":{
    "category":"Survival Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input clinical data including survival time & censor status -.txt",
            "choices":[],
            "kinds":["txt"],
            "name":"input.surv.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Class information file -.cls",
            "choices":[],
            "kinds":["cls"],
            "name":"input.cls.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Name of survival time field",
            "choices":[],
            "kinds":[],
            "name":"time.field",
            "numValues":"0-1",
            "defaultValue":"time",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Name of survival time field (value should be \"event:1, censor:0\")",
            "choices":[],
            "kinds":[],
            "name":"censor.field",
            "numValues":"0-1",
            "defaultValue":"status",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Name of class field in survival data file (optional)",
            "choices":[],
            "kinds":[],
            "name":"cls.field",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Output file name for survival fit results",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"print.fit.results",
            "numValues":"0-1",
            "defaultValue":"F",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Assign line type/color automatically/manually?",
            "choices":["automatic=automatic", "manual=manual"],
            "kinds":[],
            "name":"line.type.color.assign",
            "numValues":"0-1",
            "defaultValue":"automatic",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"e.g. 1,2,3,... (1: solid, 2: dashed, 3: dotted, 4: dot-dashed)",
            "choices":[],
            "kinds":[],
            "name":"manual.line.type",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"e.g. black, blue, red, ...",
            "choices":[],
            "kinds":[],
            "name":"manual.line.color",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Line width",
            "choices":["1=thin", "2=thick", "3=thickest"],
            "kinds":[],
            "name":"line.width",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Survival time conversion",
            "choices":["1=none", "365.25=days to years", "12=months to years"],
            "kinds":[],
            "name":"time.conversion",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":true
        },
        {
            "description":"Maximum survival time (in original scale)",
            "choices":[],
            "kinds":[],
            "name":"max.time",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Lower limit of y axis range",
            "choices":[],
            "kinds":[],
            "name":"surv.function.lower",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Upper limit of y axis range",
            "choices":[],
            "kinds":[],
            "name":"surv.function.higher",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Type of survival curve",
            "choices":["log=survival", "event=event", "cumhaz=cumulative hazard", "cloglog=complimentary log-log survival"],
            "kinds":[],
            "name":"curve.type",
            "numValues":"0-1",
            "defaultValue":"log",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Show confidence inteval?",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"show.conf.interval",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Show legend?",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"add.legend",
            "numValues":"0-1",
            "defaultValue":"T",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Position of legend",
            "choices":["left-bottom", "left-top", "right-bottom", "right-top"],
            "kinds":[],
            "name":"legend.position",
            "numValues":"0-1",
            "defaultValue":"left-bottom",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Name for output files",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "numValues":"0-1",
            "defaultValue":"<input.surv.data.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"SurvivalCurve",
    "write":false,
    "tags":["png", "txt"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00103:2"
}, "104":{
    "category":"Data Format Conversion",
    "description":"description goes here",
     "inputs":[
        {
            "description":"pcl file to convert",
            "choices":[],
            "kinds":["pcl"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"output gct file",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>.gct",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"How to handle manually edited weights (weights not equal to 1) present in PCL file",
            "choices":["1=ignore weights", "2=multiply values by weights (altering biological data)", "3=print error if weights not equal to 1 present"],
            "kinds":[],
            "name":"weight.handling",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"PclToGct",
    "write":false,
    "tags":["gct"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00151:1"
}, "103":{
    "category":"Data Format Conversion",
    "description":"description goes here",
     "inputs":[
        {
            "description":"GCT file to convert",
            "choices":[],
            "kinds":["gct"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"PCL file that will be produced",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>.pcl",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"GctToPcl",
    "write":false,
    "tags":["pcl", "Prediction Results"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00152:1"
}, "102":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input file - .res, .gct, .odf type=Dataset",
            "choices":[],
            "kinds":["Dataset", "gct", "res"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The class file - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The class file containing the confounding variable.",
            "choices":[],
            "kinds":["cls"],
            "name":"confounding.variable.cls.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The test to perform",
            "choices":["0=Class 0", "1=Class 1", "2=2 Sided"],
            "kinds":[],
            "name":"test.direction",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The statistic to use",
            "choices":["1=SNR", "0=T-Test", "3=SNR (median)", "2=T-Test (median)", "4=T-Test (min std)", "5=SNR (min std)", "6=SNR (median, min std)", "7=T-Test (median, min std)", "8=Paired T-Test"],
            "kinds":[],
            "name":"test.statistic",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"The minimum standard deviation if test statistic includes min std option",
            "choices":[],
            "kinds":[],
            "name":"min.std",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The number of permutations to perform (use 0 to calculate asymptotic p-values)",
            "choices":[],
            "kinds":[],
            "name":"number.of.permutations",
            "numValues":"0-1",
            "defaultValue":"1000",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to perform all possible permutations",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"complete",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to perform balanced permutations",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"balanced",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The seed of the random number generator used to produce permutations",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"779948241",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Whether to smooth p-values",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"smooth.p.values",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Tests to perform when cls file has more than two classes (Note: not fully corrected for multiple hypothesis testing)",
            "choices":["one versus all", "all pairs"],
            "kinds":[],
            "name":"phenotype.test",
            "numValues":"0-1",
            "defaultValue":"one versus all",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>.comp.marker.odf",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ComparativeMarkerSelection",
    "write":false,
    "tags":["Comparative Marker Selection"],
    "type":"module",
    "version":"5",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00044:5"
}, "99":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"When set to 1, normalizes tumors against paired normals. (Default = 0; best results are usually achieved under this default setting)",
            "choices":["0", "1"],
            "kinds":[],
            "name":"use.paired.normals",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"When set to 1, performs histogram quality control on tumor samples and includes only those tumors with distinct copy number peaks in the output array list to be used in the GISTIC module. (Default = 1).",
            "choices":["0", "1"],
            "kinds":[],
            "name":"quality.control.tumors",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Method for selecting normals to use in sample normalization. Allowed values: 0 (use all normals), 1 (use the n normals most closely matched to the tumor??s noise profile). (Default = 1)",
            "choices":["0", "1"],
            "kinds":[],
            "name":"normal.selection.method",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Number of normals to choose when using closest_n normalization. (Default = 5)",
            "choices":[],
            "kinds":[],
            "name":"n.closest.n",
            "numValues":"0-1",
            "defaultValue":"5",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"When set to 1, runs module to correct for marker intensity variations due to batch effect. (Default = 0)",
            "choices":["0", "1"],
            "kinds":[],
            "name":"correct.batch.effect",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Minimum number of samples required in a batch for the batch to be eligible for batch correction. (Default = 5)",
            "choices":[],
            "kinds":[],
            "name":"batch.correct.minimum.size",
            "numValues":"0-1",
            "defaultValue":"5",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"p-value threshold for batch effect correction. For each marker, signal intensities in each batch are compared to all others using a t-test. If the p-value for this comparison is less than the p-value threshold, the signal intensities in this batch will be brought to the mean of all other batches. (Default = 0.001)",
            "choices":[],
            "kinds":[],
            "name":"batch.correct.pvalue",
            "numValues":"0-1",
            "defaultValue":"0.001",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Set verbosity level (stand-alone version only). At a verbosity level of 0, no text indicating program status is written to sdout. At a level of 30, the maximum amount of text is written to stdout. (Default = 0)",
            "choices":["0", "10", "20", "30"],
            "kinds":[],
            "name":"verbosity",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"A zipfile containing the input genotypes and signal intensities. These are .cnx files created by SNPFileCreator.",
            "choices":[],
            "kinds":["cnx"],
            "name":"snp.archive",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The sample info file is a tab-delimited text file (*.txt) containing information about the arrays.",
            "choices":[],
            "kinds":["sif"],
            "name":"sample.info.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The array list file identifies the subset of samples to be used in the analysis. It is a one-column file with a header (??array??). The sample identifiers listed in the array list file must match the sample names given in the segmentation file.",
            "choices":[],
            "kinds":["alf"],
            "name":"array.list.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"GISTICPreprocess",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:8080.genepattern.broad.mit.edu:genepatternmodules:971:2"
}, "101":{
    "category":"Clustering",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input dataset A - .gct, should have common gene ID with dataset B",
            "choices":[],
            "kinds":["gct"],
            "name":"datasetA.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Input dataset B - .gct, should have common gene ID with dataset A",
            "choices":[],
            "kinds":["gct"],
            "name":"datasetB.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Input class label A - .cls, 3rd line should be numeric, +1 if starts from \"0\"",
            "choices":[],
            "kinds":["cls"],
            "name":"classA.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Input class label B - .cls, 3rd line should be numeric, +1 if starts from \"0\"",
            "choices":[],
            "kinds":["cls"],
            "name":"classB.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Number of marker genes to be mapped",
            "choices":[],
            "kinds":[],
            "name":"num.marker.genes",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Number of random permutations for ES in each cell of SA matrix",
            "choices":[],
            "kinds":[],
            "name":"num.perm",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Number of random permutations for Fisher's statistics",
            "choices":[],
            "kinds":[],
            "name":"num.perm.fisher",
            "numValues":"0-1",
            "defaultValue":"1000",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Weight enrichment by correlation vector (SNR)",
            "choices":["1=yes", "0=no"],
            "kinds":[],
            "name":"weighted.score.type",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Choice of null distribution",
            "choices":["pool=pool", "each=each"],
            "kinds":[],
            "name":"null.distribution",
            "numValues":"0-1",
            "defaultValue":"pool",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"p-value correction method",
            "choices":["FDR=FDR", "Bonferroni=Bonferroni", "both=both"],
            "kinds":[],
            "name":"p.value.correction",
            "numValues":"0-1",
            "defaultValue":"FDR",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Cluster dataset A's subclass in heatmap of SA matrix",
            "choices":["1=yes", "NA=no"],
            "kinds":[],
            "name":"cluster.rows",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Cluster dataset B's subclass in heatmap of SA matrix",
            "choices":["1=yes", "NA=no"],
            "kinds":[],
            "name":"cluster.columns",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Create heatmap of each nominal-p matrix",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"nominal.p.value.matrix",
            "numValues":"0-1",
            "defaultValue":"T",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Create legend for heatmap",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"create.legend",
            "numValues":"0-1",
            "defaultValue":"T",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Random seed",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"47365321",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Name of output files containing heatmap of SA matrices, summary of ES matrix, nominal p-values, and corrected p-values",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "numValues":"0-1",
            "defaultValue":"SubMap",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"SubMap",
    "write":false,
    "tags":["png", "txt"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00101:2"
}, "100":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A zip file of CEL files",
            "choices":[],
            "kinds":["zip"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The method to use",
            "choices":["dChip", "GCRMA", "MAS5", "RMA"],
            "kinds":[],
            "name":"method",
            "numValues":"0-1",
            "defaultValue":"RMA",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(GCRMA and RMA only) Whether to normalize data using quantile normalization",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"quantile.normalization",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(RMA only) Whether to background correct using RMA background correction",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"background.correct",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to compute Present/Absent calls",
            "choices":["yes=yes (create res file)", "no=no (create gct file)"],
            "kinds":[],
            "name":"compute.present.absent.calls",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(MAS5 only) The normalization method to apply after expression values are computed. The column having the median of the means is used as the reference unless the parameter value to scale to is given.",
            "choices":["linear fit", "mean scaling", "median scaling", "none", "quantile normalization"],
            "kinds":[],
            "name":"normalization.method",
            "numValues":"0-1",
            "defaultValue":"median scaling",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(median/mean scaling only) The value to scale to.",
            "choices":[],
            "kinds":[],
            "name":"value.to.scale.to",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A tab-delimited text file containing one scan, sample, and class per line",
            "choices":[],
            "kinds":["txt", "clm"],
            "name":"clm.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to annotate probes with the gene symbol and description",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"annotate.probes",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Custom CDF file. Leave blank to use default internally provided CDF file (custom cdf file is not implemented for GCRMA).",
            "choices":[],
            "kinds":["cdf"],
            "name":"cdf.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The base name of the output file(s)",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ExpressionFileCreator",
    "write":false,
    "tags":["res", "gct", "cls"],
    "type":"module",
    "version":"7",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00041:7"
}, "98":{
    "category":"Clustering",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input data file name - .gct, .res, .odf type = Dataset",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"distance measure for column (sample) clustering",
            "choices":["0=No column clustering", "1=Uncentered correlation", "2=Pearson correlation", "3=Uncentered correlation, absolute value", "4=Pearson correlation, absolute value", "5=Spearman's rank correlation", "6=Kendall's tau", "7=Euclidean distance", "8=City-block distance"],
            "kinds":[],
            "name":"column.distance.measure",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"distance measure for row (gene) clustering",
            "choices":["0=No row clustering", "1=Uncentered correlation", "2=Pearson correlation", "3=Uncentered correlation, absolute value", "4=Pearson correlation, absolute value", "5=Spearman's rank correlation", "6=Kendall's tau", "7=Euclidean distance", "8=City-block distance"],
            "kinds":[],
            "name":"row.distance.measure",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"hierarchical clustering method to use",
            "choices":["m=Pairwise complete-linkage", "s=Pairwise single-linkage", "c=Pairwise centroid-linkage", "a=Pairwise average-linkage"],
            "kinds":[],
            "name":"clustering.method",
            "numValues":"0-1",
            "defaultValue":"m",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"log-transform the data before clustering",
            "choices":["=no", "-l=yes"],
            "kinds":[],
            "name":"log.transform",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"whether to center each row (gene) in the data",
            "choices":["=no", "mean.row=Subtract the mean of each row", "median.row=Subtract the median of each row"],
            "kinds":[],
            "name":"row.center",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"whether to normalize each row (gene) in the data",
            "choices":["=no", "-ng=yes"],
            "kinds":[],
            "name":"row.normalize",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"whether to center each column (sample) in the data",
            "choices":["=no", "mean.column=Subtract the mean of each column", "median.column=Subtract the median of each column"],
            "kinds":[],
            "name":"column.center",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"whether to normalize each column (sample) in the data",
            "choices":["=no", "-na=yes"],
            "kinds":[],
            "name":"column.normalize",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"base name for output files",
            "choices":[],
            "kinds":[],
            "name":"output.base.name",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"HierarchicalClustering",
    "write":false,
    "tags":["gtr", "atr", "cdt"],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00009:4"
}, "97":{
    "category":"Missing Value Imputation",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Data file (missing values are stored as NA) - .gct",
            "choices":[],
            "kinds":["gct"],
            "name":"data.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Number of neighbors to be used in the imputation",
            "choices":[],
            "kinds":[],
            "name":"k",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The maximum percent missing data allowed in any row",
            "choices":[],
            "kinds":[],
            "name":"rowmax",
            "numValues":"0-1",
            "defaultValue":"0.5",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"The maximum percent missing data allowed in any column",
            "choices":[],
            "kinds":[],
            "name":"colmax",
            "numValues":"0-1",
            "defaultValue":"0.8",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"The name of the output file - .gct",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<data.filename_basename>.imputed.gct",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ImputeMissingValuesKNN",
    "write":false,
    "tags":["gct"],
    "type":"module",
    "version":"13",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00054:13"
}, "391":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file in FPKM_TRACKING format",
            "choices":[],
            "kinds":["fpkm_tracking"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Select row labels to be written to GCT file",
            "choices":["tracking_id=Tracking ID", "nearest_ref_id=Nearest Reference Transcript ID", "gene_short_name=Gene Name", "tss_id=TSS ID", "locus=Locus"],
            "kinds":[],
            "name":"row.labels",
            "numValues":"0-1",
            "defaultValue":"tracking_id",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Select row descriptions to be written to GCT file",
            "choices":["locus=Locus", "tracking_id=Tracking ID", "nearest_ref_id=Nearest Reference Transcript ID", "gene_short_name=Gene Name", "tss_id=TSS ID", "class_code=Class Code"],
            "kinds":[],
            "name":"row.descriptions",
            "numValues":"0-1",
            "defaultValue":"locus",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to filter rows with invalid row names (ie., \"-\")",
            "choices":["no=no", "yes=yes"],
            "kinds":[],
            "name":"filter.rows",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A label that will be used to name the GCT output file.",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Fpkm_trackingToGct",
    "write":false,
    "tags":["gct", "fpkm_tracking"],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00250:4"
}, "96":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[],
    "name":"Beroukhim.Getz.2007.PNAS.Glioma.GISTIC",
    "write":false,
    "tags":[],
    "type":"pipeline",
    "version":"2",
    "lsid":"urn:lsid:8080.genepattern.broad.mit.edu:genepatternmodules:822:2"
}, "390":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Clustered data table, contains the original data, but reordered",
            "choices":[],
            "kinds":["cdt"],
            "name":"cdt.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Gene tree file, records the order in which genes (rows) were joined (at least one of gtr file and atr file is required)",
            "choices":[],
            "kinds":["gtr"],
            "name":"gtr.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Array tree file, records the order in which samples (columns) were joined (at least one of gtr file and atr file is required)",
            "choices":[],
            "kinds":["atr"],
            "name":"atr.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"HierarchicalClusteringViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"10",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00031:10"
}, "95":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The reference file including cytoband and gene location information.",
            "choices":["hg18_with_miR_20080407.mat=Human Hg18", "hg17_20070131.mat=Human Hg17", "hg16_20070112.mat=Human Hg16"],
            "kinds":[],
            "name":"refgene.file",
            "numValues":"0-1",
            "defaultValue":"hg18_with_miR_20080407.mat",
            "required":true,
            "type":"java.io.String",
            "fileChoice":true
        },
        {
            "description":"Threshold for copy number amplifications. Regions with a log2 ratio above this value are considered amplified.",
            "choices":[],
            "kinds":[],
            "name":"amplifications.threshold",
            "numValues":"0-1",
            "defaultValue":"0.1",
            "required":true,
            "type":"java.io.Float",
            "fileChoice":false
        },
        {
            "description":"Threshold for copy number deletions. Regions with a log2 ratio below the negative of this value are considered deletions.",
            "choices":[],
            "kinds":[],
            "name":"deletions.threshold",
            "numValues":"0-1",
            "defaultValue":"0.1",
            "required":true,
            "type":"java.io.Float",
            "fileChoice":false
        },
        {
            "description":"Smallest number of markers to allow in segments from the segmented data. Segments that contain fewer than this number of markers are joined to the neighboring segment that is closest in copy number.",
            "choices":[],
            "kinds":[],
            "name":"join.segment.size",
            "numValues":"0-1",
            "defaultValue":"4",
            "required":true,
            "type":"java.io.Integer",
            "fileChoice":false
        },
        {
            "description":"Threshholding value for q-values.",
            "choices":[],
            "kinds":[],
            "name":"qv.thresh",
            "numValues":"0-1",
            "defaultValue":"0.25",
            "required":true,
            "type":"java.io.Float",
            "fileChoice":false
        },
        {
            "description":"Extension to append to all output files.",
            "choices":[],
            "kinds":[],
            "name":"extension",
            "numValues":"0-1",
            "defaultValue":".gp_gistic",
            "required":true,
            "type":"java.io.String",
            "fileChoice":false
        },
        {
            "description":"Flag indicating whether to remove data from the X-chromosome before analysis.",
            "choices":["1=Yes", "0=No"],
            "kinds":[],
            "name":"remove.X",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The segmentation file contains the segmented data for all the samples identified by GLAD, CBS, or some other segmentation algorithm. (See GLAD file format in the Genepattern file formats documentation.) It is a six column, tab-delimited file with an optional first line identifying the columns. Positions are in base pair units.",
            "choices":[],
            "kinds":["seg"],
            "name":"seg.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The markers file identifies the marker names and positions of the markers in the original dataset (before segmentation). It is a three column, tab-delimited file with an optional header. If not already, markers are sorted by genomic position.",
            "choices":[],
            "kinds":["CNm"],
            "name":"markers.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The array list file is an optional file identifying the subset of samples to be used in the analysis. It is a one column file with an optional header. The sample identifiers listed in the array list file must match the sample names given in the segmentation file.",
            "choices":[],
            "kinds":["alf"],
            "name":"array.list.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"There are two options for the cnv file. The first option allows CNVs to be identified by marker name. The second option allows the CNVs to be identified by genomic location.",
            "choices":[],
            "kinds":["CNV"],
            "name":"cnv.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"GISTIC",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00125:3"
}, "393":{
    "category":"Data Format Conversion",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input fastq file (optionally gzipped) for single end data, or first read in paired end data",
            "choices":[],
            "kinds":["fastq"],
            "name":"fastq.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The fastq file (optionally gzipped) for second read in paired end data",
            "choices":[],
            "kinds":["fastq"],
            "name":"fastq.file.2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A value describing how the quality values are encoded in the fastq",
            "choices":["Solexa", "Illumina", "Standard"],
            "kinds":[],
            "name":"quality.format",
            "numValues":"0-1",
            "defaultValue":"Standard",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Read group name",
            "choices":[],
            "kinds":[],
            "name":"read.group.name",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Sample name to insert into the read group header",
            "choices":[],
            "kinds":[],
            "name":"sample.name",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The library name to insert into the LB attribute in the read group header",
            "choices":[],
            "kinds":[],
            "name":"library.name",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The platform unit (often run_barcode.lane) to insert into the read group header",
            "choices":[],
            "kinds":[],
            "name":"platform.unit",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The platform type (e.g., Illumina, SOLiD) to insert into the read group header",
            "choices":[],
            "kinds":[],
            "name":"platform",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"",
            "choices":["unsorted", "queryname", "coordinate"],
            "kinds":[],
            "name":"sort.order",
            "numValues":"0-1",
            "defaultValue":"coordinate",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether the file output format should be SAM or BAM",
            "choices":["sam=SAM", "bam=BAM"],
            "kinds":[],
            "name":"output.format",
            "numValues":"0-1",
            "defaultValue":"bam",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The prefix to use for the output file name",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<fastq.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Picard.FastqToSam",
    "write":false,
    "tags":["bam", "sam"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00241:2"
}, "94":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The reference file including cytoband and gene location information.",
            "choices":["hg18_with_miR_20080407.mat=Human Hg18", "hg17_20070131.mat=Human Hg17", "hg16_20070112.mat=Human Hg16"],
            "kinds":[],
            "name":"refgene.file",
            "numValues":"0-1",
            "defaultValue":"hg18_with_miR_20080407.mat",
            "required":true,
            "type":"java.io.String",
            "fileChoice":true
        },
        {
            "description":"Threshold for copy number amplifications. Regions with a log2 ratio above this value are considered amplified.",
            "choices":[],
            "kinds":[],
            "name":"amplifications.threshold",
            "numValues":"0-1",
            "defaultValue":"0.1",
            "required":true,
            "type":"java.io.Float",
            "fileChoice":false
        },
        {
            "description":"Threshold for copy number deletions. Regions with a log2 ratio below the negative of this value are considered deletions.",
            "choices":[],
            "kinds":[],
            "name":"deletions.threshold",
            "numValues":"0-1",
            "defaultValue":"0.1",
            "required":true,
            "type":"java.io.Float",
            "fileChoice":false
        },
        {
            "description":"Smallest number of markers to allow in segments from the segmented data. Segments that contain fewer than this number of markers are joined to the neighboring segment that is closest in copy number.",
            "choices":[],
            "kinds":[],
            "name":"join.segment.size",
            "numValues":"0-1",
            "defaultValue":"4",
            "required":true,
            "type":"java.io.Integer",
            "fileChoice":false
        },
        {
            "description":"Threshholding value for q-values.",
            "choices":[],
            "kinds":[],
            "name":"qv.thresh",
            "numValues":"0-1",
            "defaultValue":"0.25",
            "required":true,
            "type":"java.io.Float",
            "fileChoice":false
        },
        {
            "description":"Extension to append to all output files.",
            "choices":[],
            "kinds":[],
            "name":"extension",
            "numValues":"0-1",
            "defaultValue":".gp_gistic",
            "required":true,
            "type":"java.io.String",
            "fileChoice":false
        },
        {
            "description":"Flag indicating whether to remove data from the X-chromosome before analysis.",
            "choices":["1=Yes", "0=No"],
            "kinds":[],
            "name":"remove.X",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The segmentation file contains the segmented data for all the samples identified by GLAD, CBS, or some other segmentation algorithm. (See GLAD file format in the Genepattern file formats documentation.) It is a six column, tab-delimited file with an optional first line identifying the columns. Positions are in base pair units.",
            "choices":[],
            "kinds":["seg"],
            "name":"seg.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The markers file identifies the marker names and positions of the markers in the original dataset (before segmentation). It is a three column, tab-delimited file with an optional header. If not already, markers are sorted by genomic position.",
            "choices":[],
            "kinds":["CNm"],
            "name":"markers.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The array list file is an optional file identifying the subset of samples to be used in the analysis. It is a one column file with an optional header. The sample identifiers listed in the array list file must match the sample names given in the segmentation file.",
            "choices":[],
            "kinds":["alf"],
            "name":"array.list.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"There are two options for the cnv file. The first option allows CNVs to be identified by marker name. The second option allows the CNVs to be identified by genomic location.",
            "choices":[],
            "kinds":["CNV"],
            "name":"cnv.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"GISTIC",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00125:2"
}, "392":{
    "category":"Data Format Conversion",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A BAM file",
            "choices":[],
            "kinds":["bam"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A label used to name the output file",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Picard.BamToSam",
    "write":false,
    "tags":["sam"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00252:2"
}, "93":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input file - .res, .gct, .odf type=Dataset",
            "choices":[],
            "kinds":["Dataset", "gct", "res"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The class file - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The class file containing the confounding variable.",
            "choices":[],
            "kinds":["cls"],
            "name":"confounding.variable.cls.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The test to perform",
            "choices":["0=Class 0", "1=Class 1", "2=2 Sided"],
            "kinds":[],
            "name":"test.direction",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The statistic to use",
            "choices":["1=SNR", "0=T-Test", "3=SNR (median)", "2=T-Test (median)", "4=T-Test (min std)", "5=SNR (min std)", "6=SNR (median, min std)", "7=T-Test (median, min std)", "8=Paired T-Test"],
            "kinds":[],
            "name":"test.statistic",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"The minimum standard deviation if test statistic includes min std option",
            "choices":[],
            "kinds":[],
            "name":"min.std",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The number of permutations to perform (use 0 to calculate asymptotic p-values)",
            "choices":[],
            "kinds":[],
            "name":"number.of.permutations",
            "numValues":"0-1",
            "defaultValue":"1000",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to perform all possible permutations",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"complete",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to perform balanced permutations",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"balanced",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The seed of the random number generator used to produce permutations",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"779948241",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Whether to smooth p-values",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"smooth.p.values",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Tests to perform when cls file has more than two classes (Note: not fully corrected for multiple hypothesis testing)",
            "choices":["one versus all", "all pairs"],
            "kinds":[],
            "name":"phenotype.test",
            "numValues":"0-1",
            "defaultValue":"one versus all",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>.comp.marker.odf",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ComparativeMarkerSelection",
    "write":false,
    "tags":["Comparative Marker Selection"],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00044:4"
}, "395":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file in SAM or BAM format",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Sort order",
            "choices":["coordinate=coordinate", "queryname=queryname", "unsorted=unsorted"],
            "kinds":[],
            "name":"sort.order",
            "numValues":"0-1",
            "defaultValue":"coordinate",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether the file output format should be SAM or BAM",
            "choices":["sam=SAM", "bam=BAM"],
            "kinds":[],
            "name":"output.format",
            "numValues":"0-1",
            "defaultValue":"sam",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"prefix for the name of output file",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Picard.SortSam",
    "write":false,
    "tags":["sam", "bam", "bai"],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00245:4"
}, "92":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The output from ComparativeMarkerSelection",
            "choices":[],
            "kinds":["Comparative Marker Selection"],
            "name":"comparative.marker.selection.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The dataset file used as input to ComparativeMarkerSelection",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"dataset.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"ComparativeMarkerSelectionViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00045:4"
}, "394":{
    "category":"Data Format Conversion",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A SAM file",
            "choices":[],
            "kinds":["sam"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A label used to name the output file",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Picard.SamToBam",
    "write":false,
    "tags":["bam"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00234:2"
}, "91":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The gct, res, or odf file to convert",
            "choices":[],
            "kinds":[],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The base name of the zip output file or the MAGE-ML file",
            "choices":[],
            "kinds":[],
            "name":"output.file.base.name",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to zip the MAGE-ML files",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"create.zip.file",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"ConvertToMAGEML",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00038:2"
}, "90":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset file - .res, .gct",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"expression.dataset",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Gene sets database from GSEA website.",
            "choices":["ftp.broad.mit.edu://pub/gsea/gene_sets/c1.all.v2.5.symbols.gmt=c1.all.v2.5.symbols.gmt [Positional]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c2.all.v2.5.symbols.gmt=c2.all.v2.5.symbols.gmt [Curated]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c2.biocarta.v2.5.symbols.gmt=c2.biocarta.v2.5.symbols.gmt [Curated]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c2.cgp.v2.5.symbols.gmt=c2.cgp.v2.5.symbols.gmt [Curated]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c2.cp.v2.5.symbols.gmt=c2.cp.v2.5.symbols.gmt [Curated]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c2.genmapp.v2.5.symbols.gmt=c2.genmapp.v2.5.symbols.gmt [Curated]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c2.kegg.v2.5.symbols.gmt=c2.kegg.v2.5.symbols.gmt [Curated]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c3.all.v2.5.symbols.gmt=c3.all.v2.5.symbols.gmt [Motif]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c3.mir.v2.5.symbols.gmt=c3.mir.v2.5.symbols.gmt [Motif]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c3.tft.v2.5.symbols.gmt=c3.tft.v2.5.symbols.gmt [Motif]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c4.all.v2.5.symbols.gmt=c4.all.v2.5.symbols.gmt [Computational]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c4.cgn.v2.5.symbols.gmt=c4.cgn.v2.5.symbols.gmt [Computational]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c4.cm.v2.5.symbols.gmt=c4.cm.v2.5.symbols.gmt [Computational]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c5.all.v2.5.symbols.gmt=c5.all.v2.5.symbols.gmt [Gene ontology]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c5.cc.v2.5.symbols.gmt=c5.cc.v2.5.symbols.gmt [Gene ontology]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c5.mf.v2.5.symbols.gmt=c5.mf.v2.5.symbols.gmt [Gene ontology]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c1.v2.symbols.gmt=c1.v2.symbols.gmt [Positional]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c2.v2.symbols.gmt=c2.v2.symbols.gmt [Curated]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c3.v2.symbols.gmt=c3.v2.symbols.gmt [Motif]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c4.v2.symbols.gmt=c4.v2.symbols.gmt [Computational]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c4.v1.symbols.gmt=c4.v1.symbols.gmt [Computational]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c3.v1.symbols.gmt=c3.v1.symbols.gmt [Motif]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c2.v1.symbols.gmt=c2.v1.symbols.gmt [Curated]", "ftp.broad.mit.edu://pub/gsea/gene_sets/c1.v1.symbols.gmt=c1.v1.symbols.gmt [Positional]"],
            "kinds":[],
            "name":"gene.sets.database",
            "numValues":"0-1",
            "defaultValue":"ftp.broad.mit.edu://pub/gsea/gene_sets/c1.all.v2.5.symbols.gmt",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets database - .gmt, .gmx, .grp. Upload a gene set if your gene set is not listed as a choice for the gene sets database parameter.",
            "choices":[],
            "kinds":["gmt", "gmx", "grp"],
            "name":"gene.sets.database.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Number of permutations to perform",
            "choices":[],
            "kinds":[],
            "name":"number.of.permutations",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Cls file - .cls, must be binary",
            "choices":[],
            "kinds":["cls"],
            "name":"phenotype.labels",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Select true to have GSEA collapse each probe set in the expression dataset into a single vector for the gene, which gets identified by its gene symbol.",
            "choices":["false", "true"],
            "kinds":[],
            "name":"collapse.dataset",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Type of permutations to perform",
            "choices":["phenotype", "tag"],
            "kinds":[],
            "name":"permutation.type",
            "numValues":"0-1",
            "defaultValue":"phenotype",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Chip file from GSEA website.",
            "choices":["ftp.broad.mit.edu://pub/gsea/annotations/GENE_SYMBOL.chip=GENE_SYMBOL.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Seq_Accession.chip=Seq_Accession.chip", "ftp.broad.mit.edu://pub/gsea/annotations/SEQ_ACCESSION.chip=SEQ_ACCESSION.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Hu35KsubA.chip=Hu35KsubA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Hu35KsubB.chip=Hu35KsubB.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Hu35KsubC.chip=Hu35KsubC.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Hu35KsubD.chip=Hu35KsubD.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Hu6800.chip=Hu6800.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_Focus.chip=HG_Focus.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U133A.chip=HG_U133A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U133AAOFAV2.chip=HG_U133AAOFAV2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U133A_2.chip=HG_U133A_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U133B.chip=HG_U133B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U133_Plus_2.chip=HG_U133_Plus_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U95Av2.chip=HG_U95Av2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U95B.chip=HG_U95B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U95C.chip=HG_U95C.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U95D.chip=HG_U95D.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HG_U95E.chip=HG_U95E.chip", "ftp.broad.mit.edu://pub/gsea/annotations/AFFYMETRIX.chip=AFFYMETRIX.chip", "ftp.broad.mit.edu://pub/gsea/annotations/AG.chip=AG.chip", "ftp.broad.mit.edu://pub/gsea/annotations/APPLERA_ABI1700.chip=APPLERA_ABI1700.chip", "ftp.broad.mit.edu://pub/gsea/annotations/ATH1_121501.chip=ATH1_121501.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_Human1A.chip=Agilent_Human1A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_Human1Av2.chip=Agilent_Human1Av2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_Human1B.chip=Agilent_Human1B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_Human1_cDNA.chip=Agilent_Human1_cDNA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_HumanGenome.chip=Agilent_HumanGenome.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_MouseDev.chip=Agilent_MouseDev.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_MouseGenome.chip=Agilent_MouseGenome.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_MouseOligo.chip=Agilent_MouseOligo.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_Mouse_cDNA.chip=Agilent_Mouse_cDNA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_RatGenome_G4131A.chip=Agilent_RatGenome_G4131A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Agilent_RatOligo.chip=Agilent_RatOligo.chip", "ftp.broad.mit.edu://pub/gsea/annotations/AtlasMouse1.2.chip=AtlasMouse1.2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/AtlasRat1.2.chip=AtlasRat1.2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/BIAO.chip=BIAO.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Bovine.chip=Bovine.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CNMCMuscleChip.chip=CNMCMuscleChip.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Caltech16KMouse.chip=Caltech16KMouse.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Caltech16KOligoMouse.chip=Caltech16KOligoMouse.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Canine_2.chip=Canine_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Clontech_Atlas_13K.chip=Clontech_Atlas_13K.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Clontech_BD_Atlas.chip=Clontech_BD_Atlas.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CodeLink_Human_Whole_Genome.chip=CodeLink_Human_Whole_Genome.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CodeLink_UniSet_Human_20K_I_Bioarray.chip=CodeLink_UniSet_Human_20K_I_Bioarray.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CodeLink_UniSet_Human_II_Bioarray.chip=CodeLink_UniSet_Human_II_Bioarray.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CodeLink_UniSet_Human_I_Bioarray.chip=CodeLink_UniSet_Human_I_Bioarray.chip", "ftp.broad.mit.edu://pub/gsea/annotations/CodeLink_UniSet_Rat_I_Bioarray.chip=CodeLink_UniSet_Rat_I_Bioarray.chip", "ftp.broad.mit.edu://pub/gsea/annotations/DrosGenome1.chip=DrosGenome1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Drosophila_2.chip=Drosophila_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/G4110A.chip=G4110A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/G4110Av2.chip=G4110Av2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/GenosysCytokineV2.chip=GenosysCytokineV2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HC_G110.chip=HC_G110.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HPCGGCompugenAnnotations.chip=HPCGGCompugenAnnotations.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HT_HG_U133A.chip=HT_HG_U133A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HT_HG_U133A_EA.chip=HT_HG_U133A_EA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/HU6800.chip=HU6800.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illimina_Mus6_v1_1.chip=Illimina_Mus6_v1_1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illimuna_Mus6_v1.chip=Illimuna_Mus6_v1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_Hum6_v1.chip=Illumina_Hum6_v1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_Hum6_v2.chip=Illumina_Hum6_v2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_HumRef8_v1.chip=Illumina_HumRef8_v1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_HumRef8_v2.chip=Illumina_HumRef8_v2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_Human.chip=Illumina_Human.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_MusRef8_v1.chip=Illumina_MusRef8_v1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_MusRef8_v1_1.chip=Illumina_MusRef8_v1_1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Illumina_RatRef12_v1.chip=Illumina_RatRef12_v1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MG_U74Av2.chip=MG_U74Av2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MG_U74Bv2.chip=MG_U74Bv2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MG_U74Cv2.chip=MG_U74Cv2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MOE430A.chip=MOE430A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MOE430B.chip=MOE430B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MWG_Human_30K_A.chip=MWG_Human_30K_A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/MWG_Human_30K_B.chip=MWG_Human_30K_B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mouse430A_2.chip=Mouse430A_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mouse430_2.chip=Mouse430_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mu11KsubA.chip=Mu11KsubA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mu11KsubB.chip=Mu11KsubB.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mu19KsubA.chip=Mu19KsubA.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mu19KsubB.chip=Mu19KsubB.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Mu19KsubC.chip=Mu19KsubC.chip", "ftp.broad.mit.edu://pub/gsea/annotations/NIA15k.chip=NIA15k.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Netherland_cancer_institute_operon_human_35k.chip=Netherland_cancer_institute_operon_human_35k.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Netherland_cancer_institute_operon_mouse_FOOk.chip=Netherland_cancer_institute_operon_mouse_FOOk.chip", "ftp.broad.mit.edu://pub/gsea/annotations/OPERON_HUMANv2.chip=OPERON_HUMANv2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/OPERON_HUMANv3.chip=OPERON_HUMANv3.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RAE230A.chip=RAE230A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RAE230B.chip=RAE230B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RG_U34A.chip=RG_U34A.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RG_U34B.chip=RG_U34B.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RG_U34C.chip=RG_U34C.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RN_U34.chip=RN_U34.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RT_U34.chip=RT_U34.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RZPD_Human_Ensembl1.1.chip=RZPD_Human_Ensembl1.1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RZPD_Human_ORF_Clones_Gateway.chip=RZPD_Human_ORF_Clones_Gateway.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RZPD_Human_Unigene3.1.chip=RZPD_Human_Unigene3.1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Rat230_2.chip=Rat230_2.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RefSeq_NP_Human.chip=RefSeq_NP_Human.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RefSeq_NP_Mouse.chip=RefSeq_NP_Mouse.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RefSeq_NP_Rat.chip=RefSeq_NP_Rat.chip", "ftp.broad.mit.edu://pub/gsea/annotations/RefSeq_human.chip=RefSeq_human.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Research_Genetics.chip=Research_Genetics.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Rosetta.chip=Rosetta.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Rosetta50K.chip=Rosetta50K.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Stanford.chip=Stanford.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Stanford_Source_Accessions.chip=Stanford_Source_Accessions.chip", "ftp.broad.mit.edu://pub/gsea/annotations/TIGR_31K_Human_Set.chip=TIGR_31K_Human_Set.chip", "ftp.broad.mit.edu://pub/gsea/annotations/TIGR_40K_Human_Set.chip=TIGR_40K_Human_Set.chip", "ftp.broad.mit.edu://pub/gsea/annotations/TRC.chip=TRC.chip", "ftp.broad.mit.edu://pub/gsea/annotations/TRC_DB.chip=TRC_DB.chip", "ftp.broad.mit.edu://pub/gsea/annotations/TRC_DB_v1.chip=TRC_DB_v1.chip", "ftp.broad.mit.edu://pub/gsea/annotations/U133_X3P.chip=U133_X3P.chip", "ftp.broad.mit.edu://pub/gsea/annotations/UCLA_NIH_33K.chip=UCLA_NIH_33K.chip", "ftp.broad.mit.edu://pub/gsea/annotations/Zebrafish.chip=Zebrafish.chip", "ftp.broad.mit.edu://pub/gsea/annotations/labonweb_human.chip=labonweb_human.chip", "ftp.broad.mit.edu://pub/gsea/annotations/lymphochip.chip=lymphochip.chip"],
            "kinds":[],
            "name":"chip.platform",
            "numValues":"0-1",
            "defaultValue":"ftp.broad.mit.edu://pub/gsea/annotations/GENE_SYMBOL.chip",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Chip to use. Upload a chip file if your chip is not listed as a choice for the chip platform parameter.",
            "choices":[],
            "kinds":[],
            "name":"chip.platform.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The statistic used to score hits (gene set members) and misses (non-members)",
            "choices":["classic", "weighted", "weighted_p2", "weighted_p1.5"],
            "kinds":[],
            "name":"scoring.scheme",
            "numValues":"0-1",
            "defaultValue":"weighted",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Class separation metric - gene markers are ranked using this metric to produce the gene list",
            "choices":["Cosine", "Euclidean", "Manhattan", "Pearson", "FeatureVariation", "tTest", "Signal2Noise", "None", "RegressionSlope", "Bhattacharyya", "Norm.Pearson", "Diff_of_Means", "Diff_of_Medians", "Ratio_of_Means", "Ratio_of_Medians", "log2_ratio_of_means", "Feature_stddev_by_mean"],
            "kinds":[],
            "name":"metric.for.ranking.genes",
            "numValues":"0-1",
            "defaultValue":"Signal2Noise",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Direction in which the gene list should be ordered",
            "choices":["ascending", "descending"],
            "kinds":[],
            "name":"gene.list.ordering.mode",
            "numValues":"0-1",
            "defaultValue":"descending",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Mode in which scores from the gene list should be considered",
            "choices":["real", "abs"],
            "kinds":[],
            "name":"gene.list.sorting.mode",
            "numValues":"0-1",
            "defaultValue":"real",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets larger than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"max.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"500",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Gene sets smaller than this are excluded from the analysis",
            "choices":[],
            "kinds":[],
            "name":"min.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"15",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Collapsing mode",
            "choices":["Max_probe", "Median_of_probes"],
            "kinds":[],
            "name":"collapsing.mode.for.probe.sets.with.more.than.one.match",
            "numValues":"0-1",
            "defaultValue":"Max_probe",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Normalization mode",
            "choices":["meandiv", "None"],
            "kinds":[],
            "name":"normalization.mode",
            "numValues":"0-1",
            "defaultValue":"meandiv",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Type of phenotype randomization (does not apply to gene set permutations)",
            "choices":["equalize_and_balance", "no_balance"],
            "kinds":[],
            "name":"randomization.mode",
            "numValues":"0-1",
            "defaultValue":"no_balance",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"If there is no known gene symbol match for a probe set, omit it from the collapsed dataset",
            "choices":["false", "true"],
            "kinds":[],
            "name":"omit.features.with.no.symbol.match",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Create detailed gene set report (heat map, mountain plot, etc.) for every enriched gene set",
            "choices":["false", "true"],
            "kinds":[],
            "name":"make.detailed.gene.set.report",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Use the median of each class instead of the mean for the class separation metrics",
            "choices":["true", "false"],
            "kinds":[],
            "name":"median.for.class.metrics",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Number of markers",
            "choices":[],
            "kinds":[],
            "name":"number.of.markers",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Plot GSEA mountain and related plots for the top sets of each phenotype",
            "choices":[],
            "kinds":[],
            "name":"plot.graphs.for.the.top.sets.of.each.phenotype",
            "numValues":"0-1",
            "defaultValue":"20",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Seed to use for randomization",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"timestamp",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to save random ranked lists",
            "choices":["false", "true"],
            "kinds":[],
            "name":"save.random.ranked.lists",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.file.name",
            "numValues":"0-1",
            "defaultValue":"<expression.dataset_basename>.zip",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"GSEA",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00072:2"
}, "294":{
    "category":"Clustering",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input data file name - .gct, .res, .pcl",
            "choices":[],
            "kinds":["Dataset", "gct", "res", "pcl"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"distance measure for column (sample) clustering",
            "choices":["0=No column clustering", "1=Uncentered correlation", "2=Pearson correlation", "3=Uncentered correlation, absolute value", "4=Pearson correlation, absolute value", "5=Spearman's rank correlation", "6=Kendall's tau", "7=Euclidean distance", "8=City-block distance"],
            "kinds":[],
            "name":"column.distance.measure",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"distance measure for row (gene) clustering NOTE: Filtering beforehand is recommended since row clustering is computationally intensive.",
            "choices":["0=No row clustering", "1=Uncentered correlation", "2=Pearson correlation", "3=Uncentered correlation, absolute value", "4=Pearson correlation, absolute value", "5=Spearman's rank correlation", "6=Kendall's tau", "7=Euclidean distance", "8=City-block distance"],
            "kinds":[],
            "name":"row.distance.measure",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"hierarchical clustering method to use",
            "choices":["m=Pairwise complete-linkage", "s=Pairwise single-linkage", "c=Pairwise centroid-linkage", "a=Pairwise average-linkage"],
            "kinds":[],
            "name":"clustering.method",
            "numValues":"0-1",
            "defaultValue":"a",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"log-transform the data before clustering",
            "choices":["=no", "-l=yes"],
            "kinds":[],
            "name":"log.transform",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"whether to center each row (gene) in the data",
            "choices":["=no", "mean.row=Subtract the mean of each row", "median.row=Subtract the median of each row"],
            "kinds":[],
            "name":"row.center",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"whether to normalize each row (gene) in the data",
            "choices":["=no", "-ng=yes"],
            "kinds":[],
            "name":"row.normalize",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"whether to center each column (sample) in the data",
            "choices":["=no", "mean.column=Subtract the mean of each column", "median.column=Subtract the median of each column"],
            "kinds":[],
            "name":"column.center",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"whether to normalize each column (sample) in the data",
            "choices":["=no", "-na=yes"],
            "kinds":[],
            "name":"column.normalize",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"base name for output files",
            "choices":[],
            "kinds":[],
            "name":"output.base.name",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"HierarchicalClustering",
    "write":false,
    "tags":["atr", "cdt", "gtr"],
    "type":"module",
    "version":"6",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00009:6"
}, "293":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"An indexed BAM file or zipped set of indexed BAM files to be analyzed. If you are supplying a single BAM file, it should be located in the same folder as its associated index file (BAI). (If SortSam is used to index the BAM file, then the BAM and BAI files are located in the same folder.)",
            "choices":[],
            "kinds":["zip", "bam"],
            "name":"bam.files",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A TXT format sample info file containing a sample ID, sample file name, and notes column in tab-delimited format. - .txt",
            "choices":[],
            "kinds":["txt"],
            "name":"sample.info.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether the bam file contains single end reads. Select no for paired-end reads.",
            "choices":["-singleEnd=yes", "=no"],
            "kinds":[],
            "name":"single.end",
            "numValues":"0-1",
            "defaultValue":"-singleEnd",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A file containing annotations in GTF format. Either an annotation gtf or annotation gtf file must be provided.Note that the provided hg19 reference sequence requires contigs using in the '1' format.",
            "choices":["<libdir>gencode.v3c.annotation.NCBI36.gtf=Hg 18, GenCode,'chr1' format contigs", "<libdir>gencode.v7.annotation.NCBI37.gtf=Hg 19, GenCode,'chr1' format contigs", "<libdir>gencode.v7.annotation_goodContig.gtf=Hg19, Gencode, '1' format contigs"],
            "kinds":[],
            "name":"annotation.gtf",
            "numValues":"0-1",
            "defaultValue":"<libdir>gencode.v3c.annotation.NCBI36.gtf",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A file containing annotations in GTF format. Either an annotation gtf file or annotation gtf must be provided.",
            "choices":[],
            "kinds":["gtf"],
            "name":"annotation.gtf.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A FASTA file containing a reference sequence. The reference sequence provided here has an index (.fai) and a sequence dictionary (.dict). Either a reference sequence or reference sequence file (with index and dictionary) must be provided, but not both. Note that the provided hg19 reference sequence requires contigs using in the '1' format.",
            "choices":["=", "Homo_sapiens_assembly19=Home_sapiens_assembly19"],
            "kinds":[],
            "name":"reference.sequence",
            "numValues":"0-1",
            "defaultValue":"Homo_sapiens_assembly19",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A FASTA file containing a reference sequence. The reference sequence must have an index (.fai) and a sequence dictionary (.dict) either in the same location or specified in the reference sequence index and reference sequence dictionary parameters. Reference sequence human_assembly19 is available in the documentation. Click on the \"documentation\" link in the upper right hand corner of this page.",
            "choices":[],
            "kinds":["fasta", "fa"],
            "name":"reference.sequence.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A file containing the index for the reference sequence - .fai",
            "choices":[],
            "kinds":["fai"],
            "name":"reference.sequence.index",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A file containing the dictionary for the reference sequence. - .dict",
            "choices":[],
            "kinds":["dict"],
            "name":"reference.sequence.dictionary",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The number of top-expressed genes for which to calculate metrics.",
            "choices":[],
            "kinds":[],
            "name":"num.genes",
            "numValues":"0-1",
            "defaultValue":"1000",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Specifies the column of the GTF file in which the transcript type is specified. By default, the module looks for an attribute called transcript_type in the annotation gtf.",
            "choices":[],
            "kinds":[],
            "name":"transcript.type.field",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"A file containing the genomic coordinates of rRNA. - .list",
            "choices":[],
            "kinds":["list"],
            "name":"rRNA.interval.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"zip of index files created by BWA for the supplied rRNA reference file. Required if rRNA reference file is supplied. -.zip",
            "choices":[],
            "kinds":["zip"],
            "name":"rRNA.reference.file.index",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Downsamples to calculate rRNA rate more efficiently. Default is 1 million. Set to 0 to disable.",
            "choices":[],
            "kinds":[],
            "name":"num.rRNA.downsampling.reads",
            "numValues":"0-1",
            "defaultValue":"1000000",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The length of the 3' or 5' end of a transcript.",
            "choices":["50", "100", "200"],
            "kinds":[],
            "name":"transcript.end.length",
            "numValues":"0-1",
            "defaultValue":"200",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to calculate transcript-level metrics in addition to sample-level metrics.",
            "choices":["-transcriptDetails=yes", "=no"],
            "kinds":[],
            "name":"transcript.level.metrics",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A file containing GC content for each of the transcripts. The file must be tab-delimited with 2 columns containing transcript name and GC content. The transcript name must appear in the GTF file.",
            "choices":[],
            "kinds":["txt"],
            "name":"gc.content.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Used in conjunction with the gc content file to specify the percent gc content to use as boundaries. E.g. 0.25 would set a lower cutoff of 25% and an upper cutoff of 75% (default is 0.375).",
            "choices":[],
            "kinds":["txt"],
            "name":"gc.margin",
            "numValues":"0-1",
            "defaultValue":"0.375",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Perform downsampling on the given number of reads. It randomly samples the specified number of reads in all experimental samples when calculating metrics.",
            "choices":[],
            "kinds":[],
            "name":"num.downsampling.reads",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A GCT file to use to calculate correlation between expression values (only uses first sample if gct file contains more than one sample. Note also that expression values must be log normalized, and the identifiers must match those of the annotation GTF file)",
            "choices":[],
            "kinds":["gct"],
            "name":"correlation.comparison.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to plot the distribution of gap lengths",
            "choices":["-gld=yes", "=no"],
            "kinds":[],
            "name":"gap.length",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Pass a string of flags directly to the GATK (e.g. \"-DBQ 0\" to set missing base qualities to zero).",
            "choices":[],
            "kinds":[],
            "name":"GATK.flags",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The prefix to use for the output file name",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<bam.files_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"RNASeQC",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"2.15",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00263:2.15"
}, "296":{
    "category":"Proteomics",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input file with pre-processed MRM data in csv format",
            "choices":[],
            "kinds":["csv"],
            "name":"data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"if \"yes\", data file is a Skyline csv export including following columns: Sample (usually derived from SampleName, having identical value for all its replicates), PeptideSequence, ReplicateName, FragmentIon, PrecursorCharge, ProductCharge, light Area, heavy Area. When \"no\", input must contain sample, replicate, peptide, transition.id, area, IS.area in that order.",
            "choices":["TRUE=yes", "FALSE=no"],
            "kinds":[],
            "name":"skyline.export",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":true
        },
        {
            "description":"p-value threshold above which transition is quantification-worthy. Must be a value between 0 and 1 inclusive.",
            "choices":[],
            "kinds":[],
            "name":"pvalue.threshold",
            "numValues":"0-1",
            "defaultValue":"0.00001",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"threshold for coefficient of variation below which transition is quantification-worthy",
            "choices":[],
            "kinds":[],
            "name":"cv.threshold",
            "numValues":"0-1",
            "defaultValue":"0.2",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"calculate all possible pairs of relative ratios for a transition",
            "choices":["FALSE=no", "TRUE=yes"],
            "kinds":[],
            "name":"all.pairs",
            "numValues":"0-1",
            "defaultValue":"FALSE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"create files with intermediate results",
            "choices":["FALSE=no", "TRUE=yes"],
            "kinds":[],
            "name":"output.intermediate.results",
            "numValues":"0-1",
            "defaultValue":"FALSE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"file name prefix used for output file(s)",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<data.file_basename>-results",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"AuDIT",
    "write":false,
    "tags":["csv"],
    "type":"module",
    "version":"6",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00172:6"
}, "295":{
    "category":"Uncategorized",
    "description":"description goes here",
     "inputs":[],
    "name":"MyEchoTest",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:8080.eby.69.173.119.173:genepatternmodules:16:4"
}, "290":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input reference fasta or fasta.gz ",
            "choices":[],
            "kinds":["fasta", "fa"],
            "name":"Picard.CreateSequenceDictionary1.reference.sequence.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Unpaired reads file or first mate for paired reads. A file or zip of files containing reads in FASTA or FASTQ format (bz2 and gz compressed files are supported).",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "fn.gz", "fa.gz", "fasta.gz", "fq.gz", "fastq.gz", "fn.bz2", "fa.bz2", "fasta.bz2", "fq.bz2", "fastq.bz2", "zip", "gz", "bz2"],
            "name":"TopHat2.reads.pair.1",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Second mate for paired reads. A file or zip of files in FASTA or FASTQ format (bz2 and gz compressed files are supported).",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "fn.gz", "fa.gz", "fasta.gz", "fq.gz", "fastq.gz", "fn.bz2", "fa.bz2", "fasta.bz2", "fq.bz2", "fastq.bz2", "zip", "gz", "bz2"],
            "name":"TopHat2.reads.pair.2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A GTF file (v. 2.2 or higher) or GFF3 file containing a list of gene model annotations. TopHat will first extract the transcript sequences and align them to this virtual transcriptome first. Only the reads that do not fully map to the transcriptome will then be mapped on the genome. The reads that did map on the transcriptome will be converted to genomic mappings (spliced as needed) and merged with the novel mappings.",
            "choices":[],
            "kinds":["gtf", "gff3"],
            "name":"TopHat2.GTF.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Reference sequence to which to reorder reads in FASTA format.",
            "choices":[],
            "kinds":["fasta", "fa", "fna"],
            "name":"Picard.ReorderSam3.reference.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Reference annotation (GFF/GTF file) for isoform expression estimates",
            "choices":[],
            "kinds":["gff", "gtf"],
            "name":"Cufflinks7.GTF",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A GTF file specifying transcripts to be ignored",
            "choices":[],
            "kinds":["gtf"],
            "name":"Cufflinks7.mask.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A file containing annotations in GTF format. Either an annotation gtf file or annotation gtf must be provided.",
            "choices":[],
            "kinds":["gtf"],
            "name":"RNASeQC8.annotation.gtf.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"ThorinsQC_cegs",
    "write":true,
    "tags":[],
    "type":"pipeline",
    "version":"1.2",
    "lsid":"urn:lsid:8080.genepatt.genepattern.broadinstitute.org:genepatternmodules:5647:1.2"
}, "292":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A sequence in FASTA format.",
            "choices":[],
            "kinds":["fasta", "fa"],
            "name":"fasta.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The prefix to use for the output file name",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<fasta.file_basename>",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"SAMtools.FastaIndex",
    "write":false,
    "tags":["fai", "fasta", "fa"],
    "type":"module",
    "version":"1.2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00265:1.2"
}, "291":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A GTF file output from Cufflinks, or a TXT containing a list of paths to GTF files.",
            "choices":[],
            "kinds":["gtf"],
            "name":"input.file",
            "numValues":"1+",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A prefix for the module output",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A reference annotation GTF",
            "choices":[],
            "kinds":["gtf"],
            "name":"reference.GTF",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to ignore reference transcripts that are not overlapped by any transcript in the input files.",
            "choices":["false=no", "true=yes"],
            "kinds":[],
            "name":"exclude.transcripts",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Fasta file or zip of fasta files against which your reads were aligned",
            "choices":[],
            "kinds":["fa", "fasta", "zip"],
            "name":"custom.reference.genome.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"Cufflinks.cuffcompare",
    "write":false,
    "tags":["gtf", "tmap", "refmap", "tracking", "txt", "stats"],
    "type":"module",
    "version":"5",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00235:5"
}, "297":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A prebuilt Bowtie2 index. Either a prebuilt or a custom Bowtie2 index must be specified.",
            "choices":["=Select a prebuilt index", "Arabidopsis_thaliana_Ensembl_TAIR10=Arabidopsis thaliana Ensembl TAIR10", "Arabidopsis_thaliana_Ensembl_TAIR9=Arabidopsis thaliana Ensembl TAIR9", "Arabidopsis_thaliana_NCBI_TAIR10=Arabidopsis thaliana NCBI TAIR10", "Arabidopsis_thaliana_NCBI_build9_1=Arabidopsis thaliana NCBI build9 1", "Bacillus_cereus_ATCC_10987_NCBI_2004-02-13=Bacillus cereus ATCC 10987 NCBI 2004-02-13", "Bacillus_subtilis_168_Ensembl_EB2=Bacillus subtilis 168 Ensembl EB2", "Bos_taurus_NCBI_UMD_3_1=Bos taurus NCBI UMD 3.1", "Bos_taurus_UCSC_bosTau7=Bos taurus UCSC bosTau7", "Caenorhabditis_elegans_Ensembl_WBcel215=Caenorhabditis elegans Ensembl WBcel215", "Caenorhabditis_elegans_Ensembl_WS220=Caenorhabditis elegans Ensembl WS220", "Caenorhabditis_elegans_NCBI_WS195=Caenorhabditis elegans NCBI WS195", "Caenorhabditis_elegans_UCSC_ce10=Caenorhabditis elegans UCSC ce10", "Caenorhabditis_elegans_UCSC_ce6=Caenorhabditis elegans UCSC ce6", "Canis_familiaris_Ensembl_BROADD2=Canis familiaris Ensembl BROADD2", "Canis_familiaris_Ensembl_CanFam3_1=Canis familiaris Ensembl CanFam3.1", "Canis_familiaris_NCBI_build2_1=Canis familiaris NCBI build2 1", "Canis_familiaris_NCBI_build3_1=Canis familiaris NCBI build3.1", "Drosophila_melanogaster_Ensembl_BDGP5=Drosophila melanogaster Ensembl BDGP5", "Drosophila_melanogaster_NCBI_build5_41=Drosophila melanogaster NCBI build5.41", "Drosophila_melanogaster_UCSC_dm3=Drosophila melanogaster UCSC dm3", "Escherichia_coli_K_12_DH10B_Ensembl_EB1=Escherichia coli K-12 DH10B Ensembl EB1", "Escherichia_coli_K_12_DH10B_NCBI_2008-03-17=Escherichia coli K-12 DH10B NCBI 2008-03-17", "Escherichia_coli_K_12_MG1655_NCBI_2001-10-15=Escherichia coli K-12 MG1655 NCBI 2001-10-15", "Homo_sapiens_Ensembl_GRCh37=Homo sapiens Ensembl GRCh37", "Homo_sapiens_NCBI_build37_2=Homo sapiens NCBI build37.2", "Homo_sapiens_UCSC_hg18=Homo sapiens UCSC hg18", "Homo_sapiens_UCSC_hg19=Homo sapiens UCSC hg19", "Mus_musculus_Ensembl_GRCm38=Mus musculus Ensembl GRCm38", "Mus_musculus_NCBI_GRCm38=Mus musculus NCBI GRCm38", "Mus_musculus_UCSC_mm10=Mus musculus UCSC mm10", "Mycobacterium_tuberculosis_H37RV_Ensembl_H37Rv_EB1=Mycobacterium tuberculosis H37RV Ensembl H37Rv EB1", "Mycobacterium_tuberculosis_H37RV_NCBI_2001-09-07=Mycobacterium tuberculosis H37RV NCBI 2001-09-07", "Rattus_norvegicus_Ensembl_RGSC3_4=Rattus norvegicus Ensembl RGSC3 4", "Rattus_norvegicus_NCBI_RGSC_v3_4=Rattus norvegicus NCBI RGSC v3.4", "Rattus_norvegicus_NCBI_Rnor_5_0=Rattus norvegicus NCBI Rnor 5.0", "Saccharomyces_cerevisiae_Ensembl_EF4=Saccharomyces cerevisiae Ensembl EF4", "Saccharomyces_cerevisiae_NCBI_build3_1=Saccharomyces cerevisiae NCBI build3.1", "Saccharomyces_cerevisiae_UCSC_sacCer3=Saccharomyces cerevisiae UCSC sacCer3"],
            "kinds":[],
            "name":"prebuilt.bowtie.index",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A ZIP archive containing Bowtie2 index files. Either a prebuilt or a custom Bowtie2 index must be specified.",
            "choices":[],
            "kinds":["zip"],
            "name":"custom.bowtie.index",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Unpaired reads file or first mate for paired reads. A file or zip of files containing reads in FASTA or FASTQ format (bz2 and gz compressed files are supported).",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "fn.gz", "fa.gz", "fasta.gz", "fq.gz", "fastq.gz", "fn.bz2", "fa.bz2", "fasta.bz2", "fq.bz2", "fastq.bz2", "zip", "gz", "bz2"],
            "name":"reads.pair.1",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Second mate for paired reads. A file or zip of files in FASTA or FASTQ format (bz2 and gz compressed files are supported).",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "fn.gz", "fa.gz", "fasta.gz", "fq.gz", "fastq.gz", "fn.bz2", "fa.bz2", "fasta.bz2", "fq.bz2", "fastq.bz2", "zip", "gz", "bz2"],
            "name":"reads.pair.2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The expected mean inner distance between mate pairs.",
            "choices":[],
            "kinds":[],
            "name":"mate.inner.dist",
            "numValues":"0-1",
            "defaultValue":"50",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The standard deviation for the distribution of inner distances between mate pairs.",
            "choices":[],
            "kinds":[],
            "name":"mate.std.dev",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Library type for strand specific reads.",
            "choices":["=Select a library type", "fr-unstranded=Standard Illumina (fr-unstranded)", "fr-firststrand=dUTP, NSR, NNSR (fr-firststrand)", "fr-secondstrand=Ligation, Standard SOLiD (fr-secondstrand)"],
            "kinds":[],
            "name":"library.type",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A combination of pre-packaged options for Bowtie based on speed and sensitivity/accuracy.",
            "choices":["=Select a preset option", "--b2-very-fast=very-fast", "--b2-fast=fast", "--b2-sensitive=sensitive", "--b2-very-sensitive=very-sensitive"],
            "kinds":[],
            "name":"Bowtie.preset.options",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A GTF file (v. 2.2 or higher) or GFF3 file containing a list of gene model annotations. TopHat will first extract the transcript sequences and align them to this virtual transcriptome first. Only the reads that do not fully map to the transcriptome will then be mapped on the genome. The reads that did map on the transcriptome will be converted to genomic mappings (spliced as needed) and merged with the novel mappings.",
            "choices":[],
            "kinds":["gtf", "gff3"],
            "name":"GTF.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to align the reads to the virtual transcriptome (provided in the GTF file parameter) and report only those mappings as genomic mappings.",
            "choices":["no", "yes"],
            "kinds":[],
            "name":"transcriptome.only",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The maximum number of mappings allowed for a read when it is aligned to the virtual transcriptome (provided in the GTF file parameter). Any reads found with more than this number of mappings will be discarded.",
            "choices":[],
            "kinds":[],
            "name":"max.transcriptome.hits",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"When mapping reads on the virtual transcriptome (provided in the GTF file parameter), some repetitive or low complexity reads that would be discarded in the context of the genome may appear to align to the transcript sequences and thus may end up reported as mapped to those genes only. This option directs TopHat to first align the reads to the whole genome, then exclude such multi-mapped reads.",
            "choices":["=no", "--prefilter-multihits=yes"],
            "kinds":[],
            "name":"prefilter.multihits",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"A file containing raw junctions. Junctions are specified one per line in a tab-delimited format.",
            "choices":[],
            "kinds":["juncs"],
            "name":"raw.junctions.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"If you select no, then the module will only look for junctions indicated in the GTF file supplied in the GTF file parameter. (This parameter is ignored when no GTF file is specified.)",
            "choices":["=yes", "--no-novel-juncs=no"],
            "kinds":[],
            "name":"find.novel.junctions",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The anchor length. This value must be at least 3.",
            "choices":[],
            "kinds":[],
            "name":"min.anchor.length",
            "numValues":"0-1",
            "defaultValue":"8",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The maximum number of mismatches that may appear in the \"anchor\" region of a spliced alignment.",
            "choices":[],
            "kinds":[],
            "name":"max.splice.mismatches",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The minimum intron length. TopHat will ignore donor/acceptor pairs closer than this many bases apart.",
            "choices":[],
            "kinds":[],
            "name":"min.intron.length",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The maximum intron length. When searching for junctions ab initio, TopHat will ignore donor/acceptor pairs farther than this many bases apart, except when such a pair is supported by a split segment alignment of a long read.",
            "choices":[],
            "kinds":[],
            "name":"max.intron.length",
            "numValues":"0-1",
            "defaultValue":"500000",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The maximum insertion length",
            "choices":[],
            "kinds":[],
            "name":"max.insertion.length",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The maximum deletion length",
            "choices":[],
            "kinds":[],
            "name":"max.deletion.length",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to use the Solexa, Phred 33, or Solexa v. 1.3 (Phred 64) quality value scale.",
            "choices":["=Phred 33", "--solexa1.3-quals=Solexa 1.3 (Phred 64)", "--solexa-quals=Solexa"],
            "kinds":[],
            "name":"quality.value.scale",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A zip file containing separate quality value files for single end or the first pair of paired reads.",
            "choices":[],
            "kinds":["zip"],
            "name":"quality.value.files.1",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A zip file containing separate quality value files for the second pair of paired reads.",
            "choices":[],
            "kinds":["zip"],
            "name":"quality.value.files.2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Quality values are space-delimited integer values.",
            "choices":["=no", "--integer-quals=yes"],
            "kinds":[],
            "name":"integer.quals",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The maximum number of times a read can be aligned to the reference genome. If a read is aligned more than this number of times, then TopHat will choose the alignments based on their alignment scores, reporting the alignments with the best alignment scores. If there are more than this number of alignments with the same score for a read, TopHat will randomly report only this many alignments.",
            "choices":[],
            "kinds":[],
            "name":"max.multihits",
            "numValues":"0-1",
            "defaultValue":"20",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Final read alignments having more than these many mismatches should be discarded.",
            "choices":[],
            "kinds":[],
            "name":"read.mismatches",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Enables or disables the coverage based search for junctions. Use when coverage search is disabled by default (such as for reads 75bp or longer), for maximum sensitivity.",
            "choices":["--no-coverage-search=no", "--coverage-search=yes"],
            "kinds":[],
            "name":"coverage.search",
            "numValues":"0-1",
            "defaultValue":"--no-coverage-search",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Attempts to find alignments incident to microexons. Works only for reads 50bp or longer.",
            "choices":["=no", "--microexon-search=yes"],
            "kinds":[],
            "name":"microexon.search",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The prefix to use for the output file",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<reads.pair.1_basename>",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        }
    ],
    "name":"TopHat",
    "write":false,
    "tags":["bam", "junctions.bed", "insertions.bed", "deletions.bed"],
    "type":"module",
    "version":"7",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00230:7"
}, "298":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input filename - .res",
            "choices":[],
            "kinds":["res"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Name of the look up table file with the feature mapping",
            "choices":[],
            "kinds":[],
            "name":"lookup.table.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Table format",
            "choices":["0=2 column", "1=4-column"],
            "kinds":[],
            "name":"table.format",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Direction of look up",
            "choices":["1=direct", "0=reverse"],
            "kinds":[],
            "name":"direction",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"prefix for output file",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>.fea",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"MapChipFeaturesGeneral",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00015:3"
}, "299":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A file or zip of files containing sequences in FASTA format",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "zip", "gz", "fn.zip", "fn.gz", "fa.zip", "fa.gz", "fasta.zip", "fasta.gz"],
            "name":"fasta.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The seed for the random number generator",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"123456",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The base name of the index files",
            "choices":[],
            "kinds":[],
            "name":"index.name",
            "numValues":"0-1",
            "defaultValue":"<fasta.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Bowtie.indexer",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00229:2"
}, "396":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file in SAM or BAM format",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A label for the transfrags in the output files",
            "choices":[],
            "kinds":[],
            "name":"transfrag.label",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Reference annotation (GFF/GTF file) for isoform expression estimates",
            "choices":[],
            "kinds":["gff", "gtf"],
            "name":"GTF",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Reference annotation (GFF/GTF file) to guide RABT assembly",
            "choices":[],
            "kinds":["gff", "gtf"],
            "name":"GTF.guide",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A GTF file specifying transcripts to be ignored",
            "choices":[],
            "kinds":["gtf"],
            "name":"mask.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Reference (FASTA/FA) for bias detection and correction algorithm",
            "choices":[],
            "kinds":["fasta", "fa", "zip"],
            "name":"frag.bias.correct",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to do an initial estimation procedure to more accurately weight reads mapping to multiple locations in the genome",
            "choices":["false=no", "true=yes"],
            "kinds":[],
            "name":"multi.read.correct",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The library type used to generate reads.",
            "choices":["inferred", "fr-unstranded", "fr-firststrand", "fr-secondstrand", "ff-unstranded", "ff-firststrand", "ff-secondstrand", "transfrags"],
            "kinds":[],
            "name":"library.type",
            "numValues":"0-1",
            "defaultValue":"inferred",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Assembled transfrags supported by fewer than this many aligned RNA-Seq fragments are not reported.",
            "choices":[],
            "kinds":[],
            "name":"min.frags.per.transfrag",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        }
    ],
    "name":"Cufflinks",
    "write":false,
    "tags":["transcripts.gtf", "isoforms.fpkm_tracking", "genes.fpkm_tracking"],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00231:4"
}, "397":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file in SAM or BAM format. EITHER these two SAM/BAM files must be specified OR an input files list of SAM/BAM files must be specified",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"first.SAM.or.BAM.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Input file in SAM or BAM format. EITHER these two SAM/BAM files must be specified OR an input files list of SAM/BAM files must be specified",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"second.SAM.or.BAM.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"To specify more than two input files, use this parameter to specify TXT file containing a list of input SAM/BAM files",
            "choices":[],
            "kinds":["txt"],
            "name":"input.files.list",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A reference annotation GTF",
            "choices":[],
            "kinds":["gtf", "merged.gtf", "transcripts.gtf"],
            "name":"GTF.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A TXT file containing a label for each sample (one label per line). ",
            "choices":[],
            "kinds":["txt"],
            "name":"sample.labels",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Analyze the provided samples as a time series",
            "choices":["false=no", "true=yes"],
            "kinds":[],
            "name":"time.series",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Normalize by the upper quartile of the number of fragments mapping to individual loci ",
            "choices":["false=no", "true=yes"],
            "kinds":[],
            "name":"upper.quartile.norm",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Count all fragments, including those not compatible with any reference transcript, towards the number of mapped fragments used in the FPKM denominator. ",
            "choices":["false=no", "true=yes"],
            "kinds":[],
            "name":"total.hits.norm",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Count only those fragments compatible with some reference transcript towards the number of mapped fragments used in the FPKM denominator.",
            "choices":["false=no", "true=yes"],
            "kinds":[],
            "name":"compatible.hits.norm",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Reference (FASTA/FA) for bias detection and correction algorithm",
            "choices":[],
            "kinds":["fasta", "fa", "zip"],
            "name":"frag.bias.correct",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to do an initial estimation procedure to more accurately weight reads mapping to multiple locations in the genome",
            "choices":["false=no", "true=yes"],
            "kinds":[],
            "name":"multi.read.correct",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The minimum number of alignments in a locus for needed to conduct significance testing on changes in that locus observed between samples.",
            "choices":[],
            "kinds":[],
            "name":"min.alignment.count",
            "numValues":"0-1",
            "defaultValue":"500",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The allowed false discovery rate.",
            "choices":[],
            "kinds":[],
            "name":"FDR",
            "numValues":"0-1",
            "defaultValue":".05",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Mask GTF file",
            "choices":[],
            "kinds":["gtf"],
            "name":"mask.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The library type used to generate reads.",
            "choices":["inferred", "fr-unstranded", "fr-firststrand", "fr-secondstrand", "ff-unstranded", "ff-firststrand", "ff-secondstrand", "transfrags"],
            "kinds":[],
            "name":"library.type",
            "numValues":"0-1",
            "defaultValue":"inferred",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"Cufflinks.cuffdiff",
    "write":false,
    "tags":["cds.count_tracking", "cds_exp.diff", "genes.read_group_tracking", "isoforms.read_group_tracking", "tss_group_exp.diff", "cds.diff", "gene_exp.diff", "isoform_exp.diff", "promoters.diff", "tss_groups.count_tracking", "cds.fpkm_tracking", "genes.count_tracking", "isoforms.count_tracking", "read_groups.info", "tss_groups.fpkm_tracking", "cds.read_group_tracking", "genes.fpkm_tracking", "isoforms.fpkm_tracking", "splicing.diff", "tss_groups.read_group_tracking"],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00236:4"
}, "398":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"First input GTF file to be merged. At least one GTF file or an input list file must be specified",
            "choices":[],
            "kinds":["gtf", "transcripts.gtf"],
            "name":"gtf1.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Second input GTF file to be merged. At least one GTF file or an input list file must be specified ",
            "choices":[],
            "kinds":["gtf", "transcripts.gtf"],
            "name":"gtf2.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Text file listing the GTF files (one per line) that you'd like to merge together into a single GTF file. ",
            "choices":[],
            "kinds":["txt"],
            "name":"input.list.file",
            "numValues":"0+",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"An optional \"reference\" annotation GTF. The input assemblies are merged together with the reference GTF and included in the final output. Cuffmerge will use this to attach gene names and other metadata to the merged catalog.",
            "choices":[],
            "kinds":["gtf"],
            "name":"reference.GTF",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"This should point to the genomic DNA sequences for the reference; see documentation for information.",
            "choices":[],
            "kinds":["fa", "fasta"],
            "name":"genome.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"Cufflinks.cuffmerge",
    "write":false,
    "tags":["merged.gtf"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00291:1"
}, "399":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A prebuilt Bowtie2 index. Either a prebuilt or a custom Bowtie2 index must be specified.",
            "choices":["=", "Arabidopsis_thaliana_Ensembl_TAIR10=Arabidopsis thaliana Ensembl TAIR10", "Arabidopsis_thaliana_Ensembl_TAIR9=Arabidopsis thaliana Ensembl TAIR9", "Arabidopsis_thaliana_NCBI_TAIR10=Arabidopsis thaliana NCBI TAIR10", "Arabidopsis_thaliana_NCBI_build9_1=Arabidopsis thaliana NCBI build9 1", "Bacillus_cereus_ATCC_10987_NCBI_2004-02-13=Bacillus cereus ATCC 10987 NCBI 2004-02-13", "Bacillus_subtilis_168_Ensembl_EB2=Bacillus subtilis 168 Ensembl EB2", "Bos_taurus_NCBI_UMD_3_1=Bos taurus NCBI UMD 3.1", "Bos_taurus_UCSC_bosTau7=Bos taurus UCSC bosTau7", "Caenorhabditis_elegans_Ensembl_WBcel215=Caenorhabditis elegans Ensembl WBcel215", "Caenorhabditis_elegans_Ensembl_WS220=Caenorhabditis elegans Ensembl WS220", "Caenorhabditis_elegans_NCBI_WS195=Caenorhabditis elegans NCBI WS195", "Caenorhabditis_elegans_UCSC_ce10=Caenorhabditis elegans UCSC ce10", "Caenorhabditis_elegans_UCSC_ce6=Caenorhabditis elegans UCSC ce6", "Canis_familiaris_Ensembl_BROADD2=Canis familiaris Ensembl BROADD2", "Canis_familiaris_Ensembl_CanFam3_1=Canis familiaris Ensembl CanFam3.1", "Canis_familiaris_NCBI_build2_1=Canis familiaris NCBI build2 1", "Canis_familiaris_NCBI_build3_1=Canis familiaris NCBI build3.1", "Drosophila_melanogaster_Ensembl_BDGP5=Drosophila melanogaster Ensembl BDGP5", "Drosophila_melanogaster_NCBI_build5_41=Drosophila melanogaster NCBI build5.41", "Drosophila_melanogaster_UCSC_dm3=Drosophila melanogaster UCSC dm3", "Escherichia_coli_K_12_DH10B_Ensembl_EB1=Escherichia coli K-12 DH10B Ensembl EB1", "Escherichia_coli_K_12_DH10B_NCBI_2008-03-17=Escherichia coli K-12 DH10B NCBI 2008-03-17", "Escherichia_coli_K_12_MG1655_NCBI_2001-10-15=Escherichia coli K-12 MG1655 NCBI 2001-10-15", "Homo_sapiens_Ensembl_GRCh37=Homo sapiens Ensembl GRCh37", "Homo_sapiens_NCBI_build37_2=Homo sapiens NCBI build37.2", "Homo_sapiens_UCSC_hg18=Homo sapiens UCSC hg18", "Homo_sapiens_UCSC_hg19=Homo sapiens UCSC hg19", "Mus_musculus_Ensembl_GRCm38=Mus musculus Ensembl GRCm38", "Mus_musculus_NCBI_GRCm38=Mus musculus NCBI GRCm38", "Mus_musculus_UCSC_mm10=Mus musculus UCSC mm10", "Mycobacterium_tuberculosis_H37RV_Ensembl_H37Rv_EB1=Mycobacterium tuberculosis H37RV Ensembl H37Rv EB1", "Mycobacterium_tuberculosis_H37RV_NCBI_2001-09-07=Mycobacterium tuberculosis H37RV NCBI 2001-09-07", "Rattus_norvegicus_Ensembl_RGSC3_4=Rattus norvegicus Ensembl RGSC3 4", "Rattus_norvegicus_NCBI_RGSC_v3_4=Rattus norvegicus NCBI RGSC v3.4", "Rattus_norvegicus_NCBI_Rnor_5_0=Rattus norvegicus NCBI Rnor 5.0", "Saccharomyces_cerevisiae_Ensembl_EF4=Saccharomyces cerevisiae Ensembl EF4", "Saccharomyces_cerevisiae_NCBI_build3_1=Saccharomyces cerevisiae NCBI build3.1", "Saccharomyces_cerevisiae_UCSC_sacCer3=Saccharomyces cerevisiae UCSC sacCer3"],
            "kinds":[],
            "name":"prebuilt.bowtie.index",
            "numValues":"0-1",
            "defaultValue":"Arabidopsis_thaliana_Ensembl_TAIR10",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A ZIP archive containing Bowtie2 index files. Either a prebuilt or a custom Bowtie2 index must be specified.",
            "choices":[],
            "kinds":["zip"],
            "name":"custom.bowtie.index",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Unpaired reads file or first mate for paired reads. A file or zip of files containing reads in FASTA or FASTQ format (bz2 and gz compressed files are supported).",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "fn.gz", "fa.gz", "fasta.gz", "fq.gz", "fastq.gz", "fn.bz2", "fa.bz2", "fasta.bz2", "fq.bz2", "fastq.bz2", "zip", "gz", "bz2"],
            "name":"reads.pair.1",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Second mate for paired reads. A file or zip of files in FASTA or FASTQ format (bz2 and gz compressed files are supported).",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "fn.gz", "fa.gz", "fasta.gz", "fq.gz", "fastq.gz", "fn.bz2", "fa.bz2", "fasta.bz2", "fq.bz2", "fastq.bz2", "zip", "gz", "bz2"],
            "name":"reads.pair.2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The expected mean inner distance between mate pairs.",
            "choices":[],
            "kinds":[],
            "name":"mate.inner.dist",
            "numValues":"0-1",
            "defaultValue":"50",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The standard deviation for the distribution of inner distances between mate pairs.",
            "choices":[],
            "kinds":[],
            "name":"mate.std.dev",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Library type for strand specific reads.",
            "choices":["fr-unstranded=Standard Illumina (fr-unstranded)", "fr-firststrand=dUTP, NSR, NNSR (fr-firststrand)", "fr-secondstrand=Ligation, Standard SOLiD (fr-secondstrand)"],
            "kinds":[],
            "name":"library.type",
            "numValues":"0-1",
            "defaultValue":"fr-unstranded",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A combination of pre-packaged options for Bowtie based on speed and sensitivity/accuracy.",
            "choices":["--b2-very-fast=very-fast", "--b2-fast=fast", "--b2-sensitive=sensitive", "--b2-very-sensitive=very-sensitive"],
            "kinds":[],
            "name":"Bowtie.preset.options",
            "numValues":"0-1",
            "defaultValue":"--b2-very-fast",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A GTF file (v. 2.2 or higher) or GFF3 file containing a list of gene model annotations. TopHat will first extract the transcript sequences and align them to this virtual transcriptome first. Only the reads that do not fully map to the transcriptome will then be mapped on the genome. The reads that did map on the transcriptome will be converted to genomic mappings (spliced as needed) and merged with the novel mappings.",
            "choices":[],
            "kinds":["gtf", "gff3"],
            "name":"GTF.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to align the reads to the virtual transcriptome (provided in the GTF file parameter) and report only those mappings as genomic mappings.",
            "choices":["no", "yes"],
            "kinds":[],
            "name":"transcriptome.only",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The maximum number of mappings allowed for a read when it is aligned to the virtual transcriptome (provided in the GTF file parameter). Any reads found with more than this number of mappings will be discarded.",
            "choices":[],
            "kinds":[],
            "name":"max.transcriptome.hits",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"When mapping reads on the virtual transcriptome (provided in the GTF file parameter), some repetitive or low complexity reads that would be discarded in the context of the genome may appear to align to the transcript sequences and thus may end up reported as mapped to those genes only. This option directs TopHat to first align the reads to the whole genome, then exclude such multi-mapped reads.",
            "choices":["=no", "--prefilter-multihits=yes"],
            "kinds":[],
            "name":"prefilter.multihits",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"A file containing raw junctions. Junctions are specified one per line in a tab-delimited format.",
            "choices":[],
            "kinds":["juncs"],
            "name":"raw.junctions.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"If you select no, then the module will only look for junctions indicated in the GTF file supplied in the GTF file parameter. (This parameter is ignored when no GTF file is specified.)",
            "choices":["=yes", "--no-novel-juncs=no"],
            "kinds":[],
            "name":"find.novel.junctions",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The anchor length. This value must be at least 3.",
            "choices":[],
            "kinds":[],
            "name":"min.anchor.length",
            "numValues":"0-1",
            "defaultValue":"8",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The maximum number of mismatches that may appear in the \"anchor\" region of a spliced alignment.",
            "choices":[],
            "kinds":[],
            "name":"max.splice.mismatches",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The minimum intron length. TopHat will ignore donor/acceptor pairs closer than this many bases apart.",
            "choices":[],
            "kinds":[],
            "name":"min.intron.length",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The maximum intron length. When searching for junctions ab initio, TopHat will ignore donor/acceptor pairs farther than this many bases apart, except when such a pair is supported by a split segment alignment of a long read.",
            "choices":[],
            "kinds":[],
            "name":"max.intron.length",
            "numValues":"0-1",
            "defaultValue":"500000",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The maximum insertion length",
            "choices":[],
            "kinds":[],
            "name":"max.insertion.length",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The maximum deletion length",
            "choices":[],
            "kinds":[],
            "name":"max.deletion.length",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to use the Solexa or Solexa v. 1.3 (Phred 64) quality value scale.",
            "choices":["--solexa1.3-quals=Solexa 1.3 (Phred 64)", "--solexa-quals=Solexa"],
            "kinds":[],
            "name":"quality.value.scale",
            "numValues":"0-1",
            "defaultValue":"--solexa1.3-quals",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A zip file containing separate quality value files for single end or the first pair of paired reads.",
            "choices":[],
            "kinds":["zip"],
            "name":"quality.value.files.1",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A zip file containing separate quality value files for the second pair of paired reads.",
            "choices":[],
            "kinds":["zip"],
            "name":"quality.value.files.2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Quality values are space-delimited integer values.",
            "choices":["=no", "--integer-quals=yes"],
            "kinds":[],
            "name":"integer.quals",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The maximum number of times a read can be aligned to the reference genome. If a read is aligned more than this number of times, then TopHat will choose the alignments based on their alignment scores, reporting the alignments with the best alignment scores. If there are more than this number of alignments with the same score for a read, TopHat will randomly report only this many alignments.",
            "choices":[],
            "kinds":[],
            "name":"max.multihits",
            "numValues":"0-1",
            "defaultValue":"20",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Final read alignments having more than these many mismatches should be discarded.",
            "choices":[],
            "kinds":[],
            "name":"read.mismatches",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Enables or disables the coverage based search for junctions. Use when coverage search is disabled by default (such as for reads 75bp or longer), for maximum sensitivity.",
            "choices":["--no-coverage-search=no", "--coverage-search=yes"],
            "kinds":[],
            "name":"coverage.search",
            "numValues":"0-1",
            "defaultValue":"--no-coverage-search",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Attempts to find alignments incident to microexons. Works only for reads 50bp or longer.",
            "choices":["=no", "--microexon-search=yes"],
            "kinds":[],
            "name":"microexon.search",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The prefix to use for the output file",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<reads.pair.1_basename>",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        }
    ],
    "name":"TopHat",
    "write":false,
    "tags":["bam", "junctions.bed", "insertions.bed", "deletions.bed"],
    "type":"module",
    "version":"6",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00230:6"
}, "88":{
    "category":"Clustering",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The data to be clustered (.gct, .res, .odf)",
            "choices":[],
            "kinds":["gct", "res", "Dataset"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Try K=2,3,...,kmax clusters (must be > 1)",
            "choices":[],
            "kinds":[],
            "name":"kmax",
            "numValues":"0-1",
            "defaultValue":"5",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Number of resampling iterations",
            "choices":[],
            "kinds":[],
            "name":"resampling.iterations",
            "numValues":"0-1",
            "defaultValue":"20",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Random number generator seed",
            "choices":[],
            "kinds":[],
            "name":"seed.value",
            "numValues":"0-1",
            "defaultValue":"12345",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Type of clustering algorithm",
            "choices":["HIERARCHICAL=Hierarchical", "SOM", "NMF", "KMEANS=KMeans"],
            "kinds":[],
            "name":"clustering.algorithm",
            "numValues":"0-1",
            "defaultValue":"HIERARCHICAL",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to cluster by rows/genes or columns/experiments",
            "choices":["=columns", "-c=rows"],
            "kinds":[],
            "name":"cluster.by",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Distance measure",
            "choices":["EUCLIDEAN=Euclidean", "PEARSON=Pearson"],
            "kinds":[],
            "name":"distance.measure",
            "numValues":"0-1",
            "defaultValue":"EUCLIDEAN",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"resampling scheme (one of 'subsample[ratio]', 'features[nfeat]', 'nosampling')",
            "choices":[],
            "kinds":[],
            "name":"resample",
            "numValues":"0-1",
            "defaultValue":"subsample",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Ignored when algorithm other than hierarchical selected",
            "choices":["average", "complete", "single"],
            "kinds":[],
            "name":"merge.type",
            "numValues":"0-1",
            "defaultValue":"average",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Number of SOM/NMF iterations",
            "choices":[],
            "kinds":[],
            "name":"descent.iterations",
            "numValues":"0-1",
            "defaultValue":"2000",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Stub pre-pended to all the output file names",
            "choices":[],
            "kinds":[],
            "name":"output.stub",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"row-wise, column-wise, both",
            "choices":["-n1=row-wise", "-n2=column-wise", "-n3=both", "=none"],
            "kinds":[],
            "name":"normalize.type",
            "numValues":"0-1",
            "defaultValue":"-n1",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"number of row/column normalization iterations (supercedes normalize.type)",
            "choices":[],
            "kinds":[],
            "name":"normalization.iterations",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Whether to create heatmaps (one for each cluster number)",
            "choices":["=no", "-p=yes"],
            "kinds":[],
            "name":"create.heat.map",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"point size of a consensus matrix's heat map (between 1 and 20)",
            "choices":[],
            "kinds":[],
            "name":"heat.map.size",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        }
    ],
    "name":"ConsensusClustering",
    "write":false,
    "tags":["gct", "gif", "clu", "pdf", "clsdist", "stdev"],
    "type":"module",
    "version":"5",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00030:5"
}, "89":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A zip file of CEL files",
            "choices":[],
            "kinds":["zip"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The method to use",
            "choices":["dChip", "GCRMA", "MAS5", "RMA"],
            "kinds":[],
            "name":"method",
            "numValues":"0-1",
            "defaultValue":"RMA",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(GCRMA and RMA only) Whether to normalize data using quantile normalization",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"quantile.normalization",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(RMA only) Whether to background correct using RMA background correction",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"background.correct",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to compute Present/Absent calls",
            "choices":["yes=yes (create res file)", "no=no (create gct file)"],
            "kinds":[],
            "name":"compute.present.absent.calls",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(MAS5 only) The normalization method to apply after expression values are computed. The column having the median of the means is used as the reference unless the parameter value to scale to is given.",
            "choices":["linear fit", "mean scaling", "median scaling", "none", "quantile normalization"],
            "kinds":[],
            "name":"normalization.method",
            "numValues":"0-1",
            "defaultValue":"median scaling",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"(median/mean scaling only) The value to scale to.",
            "choices":[],
            "kinds":[],
            "name":"value.to.scale.to",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A tab-delimited text file containing one scan, sample, and class per line",
            "choices":[],
            "kinds":["txt", "clm"],
            "name":"clm.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to annotate probes with the gene symbol and description",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"annotate.probes",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Custom CDF file. Leave blank to use default internally provided CDF file (custom cdf file is not implemented for GCRMA).",
            "choices":[],
            "kinds":["cdf"],
            "name":"cdf.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The base name of the output file(s)",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ExpressionFileCreator",
    "write":false,
    "tags":["res", "gct", "cls"],
    "type":"module",
    "version":"6",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00041:6"
}, "240":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A SAM or BAM file.",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Reference sequence to which to reorder reads in FASTA format.",
            "choices":[],
            "kinds":["fasta", "fa", "fna"],
            "name":"reference.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The sequence dictionary for the reference sequence file",
            "choices":[],
            "kinds":["dict"],
            "name":"reference.sequence.dictionary",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"If yes, then allows only a partial overlap of the BAM contigs with the new reference sequence contigs. This requires a corresponding contig in the new reference for each read contig.",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"allow.partial.overlap",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"If yes, then permits mapping from a read contig to a new reference contig with the same name but a different length. Use with extreme caution and a full knowledge of the possible consequences.",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"allow.contig.length.discordance",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The prefix of the output SAM or BAM file.",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Picard.ReorderSam",
    "write":false,
    "tags":["bam", "sam"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00264:1"
}, "241":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A SAM or BAM file",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to remove duplicates",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"remove.duplicates",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Maximum number of file handles to keep open when spilling read ends to disk",
            "choices":[],
            "kinds":[],
            "name":"max.file.handles",
            "numValues":"0-1",
            "defaultValue":"8000",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Regular expression that can be used to parse read names in the input file",
            "choices":[],
            "kinds":[],
            "name":"read.name.regex",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The maximum offset between two duplicate clusters in order to consider them optical duplicates. This should usually be set to some fairly small number (e.g. 5-10 pixels) unless using later versions of the Illumina pipeline that multiply pixel values by 10, in which case 50-100 is more normal",
            "choices":[],
            "kinds":[],
            "name":"optical.duplicate.distance",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"This number, plus the maximum RAM available to the JVM, determine the memory footprint used by some of the sorting collections. If you are running out of memory, try reducing this number",
            "choices":[],
            "kinds":[],
            "name":"sorting.collection.size.ratio",
            "numValues":"0-1",
            "defaultValue":"0.25",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The prefix to use for the output file name",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Picard.MarkDuplicates",
    "write":false,
    "tags":["bam", "sam", "metrics.txt"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00267:2"
}, "383":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Zip of SNP 6.0 CEL files",
            "choices":[],
            "kinds":["zip"],
            "name":"CopyNumberInferencePipeline.Part1of21.SNPFileCreator_SNP62.cel.files",
            "numValues":"0-1",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The input file (any non-binary file format)",
            "choices":[],
            "kinds":[],
            "name":"CopyNumberInferencePipeline.Part1of21.ConvertLineEndings1.input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The types of files to output. Whether to output files with CNVs included, removed, or both.",
            "choices":["cnv=output with CNVs", "nocnv=output without CNVs", "both=output both"],
            "kinds":["txt"],
            "name":"CopyNumberInferencePipeline.Part1of21.TangentNormalization9.output.files",
            "numValues":"0-1",
            "defaultValue":"nocnv",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The internally provided genome annotation to insert into the input file.",
            "choices":["hg18", "hg19"],
            "kinds":["txt"],
            "name":"CopyNumberInferencePipeline.Part2of2.Wrapper4.CopyNumberInferencePipeline.Part2of21.InsertGenomicLocations3.genome.annotation",
            "numValues":"0-1",
            "defaultValue":"hg19",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"CopyNumberInferencePipeline",
    "write":false,
    "tags":[],
    "type":"pipeline",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.pipeline:00023:1"
}, "384":{
    "category":"Projection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input gct file. This module does not allow missing values.",
            "choices":[],
            "kinds":["gct"],
            "name":"input.gct.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Output filename prefix. If unspecified, is set to <prefix of input.gct.file>.PROJ.",
            "choices":[],
            "kinds":[],
            "name":"output.file.prefix",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Gene sets database from GSEA website.",
            "choices":["c1.all.v3.1.symbols.gmt=c1.all.v3.1.symbols.gmt [Positional]", "c2.all.v3.1.symbols.gmt=c2.all.v3.1.symbols.gmt [Curated]", "c2.cgp.v3.1.symbols.gmt=c2.cgp.v3.1.symbols.gmt [Curated]", "c2.cp.v3.1.symbols.gmt=c2.cp.v3.1.symbols.gmt [Curated]", "c2.cp.biocarta.v3.1.symbols.gmt=c2.cp.biocarta.v3.1.symbols.gmt [Curated]", "c2.cp.kegg.v3.1.symbols.gmt=c2.cp.kegg.v3.1.symbols.gmt [Curated]", "c2.cp.reactome.v3.1.symbols.gmt=c2.cp.reactome.v3.1.symbols.gmt [Curated]", "c3.all.v3.1.symbols.gmt=c3.all.v3.1.symbols.gmt [Motif]", "c3.mir.v3.1.symbols.gmt=c3.mir.v3.1.symbols.gmt [Motif]", "c3.tft.v3.1.symbols.gmt=c3.tft.v3.1.symbols.gmt [Motif]", "c4.all.v3.1.symbols.gmt=c4.all.v3.1.symbols.gmt [Computational]", "c4.cgn.v3.1.symbols.gmt=c4.cgn.v3.1.symbols.gmt [Computational]", "c4.cm.v3.1.symbols.gmt=c4.cm.v3.1.symbols.gmt [Computational]", "c5.all.v3.1.symbols.gmt=c5.all.v3.1.symbols.gmt [Gene Ontology]", "c5.bp.v3.1.symbols.gmt=c5.bp.v3.1.symbols.gmt [Gene Ontology]", "c5.cc.v3.1.symbols.gmt=c5.cc.v3.1.symbols.gmt [Gene Ontology]", "c5.mf.v3.1.symbols.gmt=c5.mf.v3.1.symbols.gmt [Gene Ontology]", "c6.all.v3.1.symbols.gmt=c6.all.v3.1.symbols.gmt [Oncogenic Signatures]", "c1.all.v3.0.symbols.gmt=c1.all.v3.0.symbols.gmt [Positional]", "c2.all.v3.0.symbols.gmt=c2.all.v3.0.symbols.gmt [Curated]", "c2.cgp.v3.0.symbols.gmt=c2.cgp.v3.0.symbols.gmt [Curated]", "c2.cp.v3.0.symbols.gmt=c2.cp.v3.0.symbols.gmt [Curated]", "c2.cp.biocarta.v3.0.symbols.gmt=c2.cp.biocarta.v3.0.symbols.gmt [Curated]", "c2.cp.kegg.v3.0.symbols.gmt=c2.cp.kegg.v3.0.symbols.gmt [Curated]", "c2.cp.reactome.v3.0.symbols.gmt=c2.cp.reactome.v3.0.symbols.gmt [Curated]", "c3.all.v3.0.symbols.gmt=c3.all.v3.0.symbols.gmt [Motif]", "c3.mir.v3.0.symbols.gmt=c3.mir.v3.0.symbols.gmt [Motif]", "c3.tft.v3.0.symbols.gmt=c3.tft.v3.0.symbols.gmt [Motif]", "c4.all.v3.0.symbols.gmt=c4.all.v3.0.symbols.gmt [Computational]", "c4.cgn.v3.0.symbols.gmt=c4.cgn.v3.0.symbols.gmt [Computational]", "c4.cm.v3.0.symbols.gmt=c4.cm.v3.0.symbols.gmt [Computational]", "c5.all.v3.0.symbols.gmt=c5.all.v3.0.symbols.gmt [Gene Ontology]", "c5.bp.v3.0.symbols.gmt=c5.bp.v3.0.symbols.gmt [Gene Ontology]", "c5.cc.v3.0.symbols.gmt=c5.cc.v3.0.symbols.gmt [Gene Ontology]", "c5.mf.v3.0.symbols.gmt=c5.mf.v3.0.symbols.gmt [Gene Ontology]"],
            "kinds":[],
            "name":"gene.sets.database",
            "numValues":"0-1",
            "defaultValue":"c1.all.v3.1.symbols.gmt",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets description file - .gmt, .gmx. Upload a gene set if your gene set is not listed as a choice for the gene sets database parameter.",
            "choices":[],
            "kinds":["gmt", "gmx"],
            "name":"gene.sets.database.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":".txt file containing list of .gmt and .gmx files. This is typically created by the ListFiles module and is used if projecting expression data to gene sets defined across multiple .gmt and .gmx files.",
            "choices":[],
            "kinds":["txt"],
            "name":"gene.sets.database.list.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Specifies the gct data column containing gene symbols. In most cases this will be \"Column 1\".",
            "choices":["Name=Column 1", "Description=Column 2"],
            "kinds":[],
            "name":"gene.symbol.column",
            "numValues":"0-1",
            "defaultValue":"Name",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Comma-separated list of gene set names on which to project expression data. Set to \"ALL\" if projecting to all defined gene sets.",
            "choices":[],
            "kinds":[],
            "name":"gene.set.selection",
            "numValues":"0-1",
            "defaultValue":"ALL",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Method used to normalize gene expression data",
            "choices":["rank", "log", "log.rank"],
            "kinds":[],
            "name":"sample.normalization.method",
            "numValues":"0-1",
            "defaultValue":"rank",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Module authors strongly recommend against changing from default.",
            "choices":[],
            "kinds":[],
            "name":"weighting.exponent",
            "numValues":"0-1",
            "defaultValue":"0.75",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Gene sets with overlap smaller than this are excluded from the analysis.",
            "choices":[],
            "kinds":[],
            "name":"min.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        }
    ],
    "name":"ssGSEAProjection",
    "write":false,
    "tags":["gct"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00270:3"
}, "381":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[
        {
            "description":"a text file containing a list of file paths",
            "choices":[],
            "kinds":[],
            "name":"ConcatenateFilelist1.filelist",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The name of the output file",
            "choices":[],
            "kinds":[],
            "name":"ConcatenateFilelist1.output.filename",
            "numValues":"0-1",
            "defaultValue":"<filelist_basename>.tangentResult.txt",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The internally provided genome annotation to insert into the input file.",
            "choices":["hg18", "hg19"],
            "kinds":["txt"],
            "name":"InsertGenomicLocations3.genome.annotation",
            "numValues":"0-1",
            "defaultValue":"hg18",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The name of the output file",
            "choices":[],
            "kinds":[],
            "name":"ParallelCBS4.ConcatenateFilelist4.output.filename",
            "numValues":"0-1",
            "defaultValue":"<filelist_basename>.catted.seg.txt",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The name of the output file",
            "choices":[],
            "kinds":[],
            "name":"ConcatenateFilelist6.output.filename",
            "numValues":"0-1",
            "defaultValue":"<filelist_basename>.cbsResult.txt",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"CopyNumberInferencePipeline.Part2of2",
    "write":false,
    "tags":[],
    "type":"pipeline",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.pipeline:00024:1"
}, "382":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[
        {
            "description":"a text file containing a list of file paths",
            "choices":[],
            "kinds":[],
            "name":"CopyNumberInferencePipeline.Part2of21.ConcatenateFilelist1.filelist",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The name of the output file",
            "choices":[],
            "kinds":[],
            "name":"CopyNumberInferencePipeline.Part2of21.ConcatenateFilelist1.output.filename",
            "numValues":"0-1",
            "defaultValue":"<filelist_basename>.tangentResult.txt",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The internally provided genome annotation to insert into the input file.",
            "choices":["hg18", "hg19"],
            "kinds":["txt"],
            "name":"CopyNumberInferencePipeline.Part2of21.InsertGenomicLocations3.genome.annotation",
            "numValues":"0-1",
            "defaultValue":"hg18",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The name of the output file",
            "choices":[],
            "kinds":[],
            "name":"CopyNumberInferencePipeline.Part2of21.ParallelCBS4.ConcatenateFilelist4.output.filename",
            "numValues":"0-1",
            "defaultValue":"<filelist_basename>.catted.seg.txt",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The name of the output file",
            "choices":[],
            "kinds":[],
            "name":"CopyNumberInferencePipeline.Part2of21.ConcatenateFilelist6.output.filename",
            "numValues":"0-1",
            "defaultValue":"<filelist_basename>.cbsResult.txt",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"CopyNumberInferencePipeline.Part2of2.Wrapper",
    "write":false,
    "tags":[],
    "type":"pipeline",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.pipeline:00025:1"
}, "380":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input file in CN format",
            "choices":[],
            "kinds":["txt", "cn"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A sample info file - .txt",
            "choices":[],
            "kinds":["txt"],
            "name":"sample.info.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The types of files to output. Whether to output files with CNVs included, removed, or both.",
            "choices":["cnv=output with CNVs", "nocnv=output without CNVs", "both=output both"],
            "kinds":["txt"],
            "name":"output.files",
            "numValues":"0-1",
            "defaultValue":"nocnv",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A genome annotation file - .txt. Leave blank to use the internally provided Hg19 genome annotation file.",
            "choices":[],
            "kinds":["txt"],
            "name":"genome.annotation.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The prefix for the output file",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"TangentNormalization",
    "write":false,
    "tags":["txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00293:1"
}, "389":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"zip output file from GSEA - .zip. ",
            "choices":[],
            "kinds":["zip"],
            "name":"zip.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"GSEALeadingEdgeViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00073:2"
}, "388":{
    "category":"Data Format Conversion",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file in FPKM_TRACKING format",
            "choices":[],
            "kinds":["fpkm_tracking"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Select row labels to be written to GCT file",
            "choices":["tracking_id=Tracking ID", "nearest_ref_id=Nearest Reference Transcript ID", "gene_short_name=Gene Name", "tss_id=TSS ID", "locus=Locus"],
            "kinds":[],
            "name":"row.labels",
            "numValues":"0-1",
            "defaultValue":"tracking_id",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Select row descriptions to be written to GCT file",
            "choices":["locus=Locus", "tracking_id=Tracking ID", "nearest_ref_id=Nearest Reference Transcript ID", "gene_short_name=Gene Name", "tss_id=TSS ID", "class_code=Class Code"],
            "kinds":[],
            "name":"row.descriptions",
            "numValues":"0-1",
            "defaultValue":"locus",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to filter rows with invalid row names (ie., \"-\")",
            "choices":["no=no", "yes=yes"],
            "kinds":[],
            "name":"filter.rows",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Which column(s) to include in the output file",
            "choices":["all=All Columns", "FPKM", "FPKM.*lo|conf.*lo=FPKM Confidence Low", "FPKM.*hi|conf.*hi=FPKM Confidence High", "coverage=Coverage", "length=Length"],
            "kinds":[],
            "name":"output.columns",
            "numValues":"0-1",
            "defaultValue":"FPKM",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A label that will be used to name the GCT output file.",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Fpkm_trackingToGct",
    "write":false,
    "tags":["gct", "fpkm_tracking"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00250:3"
}, "387":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file (BAM or SAM).",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Read Group ID",
            "choices":[],
            "kinds":[],
            "name":"read.group.id",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"DNA preparation library. Note that this field is required by the module Picard.MarkDuplicates. It is used to determine which read groups may contain molecular duplicates, in the case where the same DNA library was sequenced on multiple lanes.",
            "choices":[],
            "kinds":[],
            "name":"read.group.library",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Read Group platform (e.g., Illumina, SOLID).",
            "choices":[],
            "kinds":[],
            "name":"read.group.platform",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Read Group platform unit (e.g., run barcode).",
            "choices":[],
            "kinds":[],
            "name":"read.group.platform.unit",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Read Group sample name.",
            "choices":[],
            "kinds":[],
            "name":"read.group.sample.name",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Read Group sequencing center name.",
            "choices":[],
            "kinds":[],
            "name":"read.group.sequencing.center.name",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Read Group description.",
            "choices":[],
            "kinds":[],
            "name":"read.group.description",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A label used to name the output file",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Picard.AddOrReplaceReadGroups",
    "write":false,
    "tags":["bam", "sam"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00266:3"
}, "386":{
    "category":"Statistical Methods",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The dataset to be normalized",
            "choices":[],
            "kinds":["gct", "res"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The name to be given to the output file.",
            "choices":[],
            "kinds":[],
            "name":"output.file.name",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>.NORM.<input.file_extension>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Result values will be scaled to this value by multiplication after normalization. Leave this blank to scale to the number of rows in the data set.",
            "choices":[],
            "kinds":[],
            "name":"scale.to.value",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Minimum threshold for values in the data set. Any data set value below this will be increased to the threshold value before normalization. If more than one of these parameters is specified, the order of precedence is threshold, then ceiling, then shift.",
            "choices":[],
            "kinds":[],
            "name":"threshold",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Maximum ceiling for values in the data set. Any data set value above this will be decreased to the ceiling value before normalization. If more than one of these parameters is specified, the order of precedence is threshold, then ceiling, then shift.",
            "choices":[],
            "kinds":[],
            "name":"ceiling",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Shift all values in the data set. The shift value will be added to all data set values before normalization. If more than one of these parameters is specified, the order of precedence is threshold, then ceiling, then shift.",
            "choices":[],
            "kinds":[],
            "name":"shift",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        }
    ],
    "name":"RankNormalize",
    "write":false,
    "tags":["gct,res"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00315:1"
}, "385":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input filename - .res, .gct, .odf",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Apply floor, ceiling and variation filter",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"threshold.and.filter",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Value for floor threshold",
            "choices":[],
            "kinds":[],
            "name":"floor",
            "numValues":"0-1",
            "defaultValue":"20",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Value for ceiling threshold",
            "choices":[],
            "kinds":[],
            "name":"ceiling",
            "numValues":"0-1",
            "defaultValue":"20000",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Minimum fold change for variation filter",
            "choices":[],
            "kinds":[],
            "name":"min.fold.change",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Minimum delta for variation filter",
            "choices":[],
            "kinds":[],
            "name":"min.delta",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Number of outliers per row to ignore when calculating row min and max for variation filter",
            "choices":[],
            "kinds":[],
            "name":"num.outliers.to.exclude",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Perform row normalization",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"row.normalization",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Sample rows without replacement to obtain this fraction of the total number of rows",
            "choices":[],
            "kinds":[],
            "name":"row.sampling.rate",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Threshold for removing rows",
            "choices":[],
            "kinds":[],
            "name":"threshold.for.removing.rows",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Remove row if this number of columns not >= given threshold",
            "choices":[],
            "kinds":[],
            "name":"number.of.columns.above.threshold",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Apply log2 transform after all other preprocessing steps",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"log2.transform",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Output file format",
            "choices":["0=gct", "1=res", "3=same as input"],
            "kinds":[],
            "name":"output.file.format",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Output file name",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>.preprocessed",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"PreprocessDataset",
    "write":false,
    "tags":["res", "gct", "Dataset"],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00020:4"
}, "245":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"",
            "choices":["all_aml=all_aml", " GCM=GCM", " shipp_lymphoma=shipp_lymphoma"],
            "kinds":["res"],
            "name":"dataset",
            "numValues":"0-1",
            "defaultValue":"all_aml",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"MIT_701x_seeOriginalData",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"3",
    "lsid":"urn:lsid:8080.jtriley.STARAPP-DEV.MIT.EDU:genepatternmodules:17:3"
}, "244":{
    "category":"MIT_701X",
    "description":"description goes here",
     "inputs":[
        {
            "description":"",
            "choices":[],
            "kinds":["res"],
            "name":"res.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"MIT_701X_getFilesBack",
    "write":false,
    "tags":["cls", "res"],
    "type":"module",
    "version":"7",
    "lsid":"urn:lsid:8086.jtriley.starapp.mit.edu:genepatternmodules:17:7"
}, "243":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input file - .res, .gct. Note that if your data is log transformed, you will need to set the \"log transformed data\" parameter below to \"yes\".",
            "choices":[],
            "kinds":["gct", "res"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The class file - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The class file containing the confounding variable.",
            "choices":[],
            "kinds":["cls"],
            "name":"confounding.variable.cls.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The test to perform",
            "choices":["0=Class 0", "1=Class 1", "2=2 Sided"],
            "kinds":[],
            "name":"test.direction",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The statistic to use",
            "choices":["1=SNR", "0=T-Test", "3=SNR (median)", "2=T-Test (median)", "4=T-Test (min std)", "5=SNR (min std)", "6=SNR (median, min std)", "7=T-Test (median, min std)", "8=Paired T-Test"],
            "kinds":[],
            "name":"test.statistic",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"The minimum standard deviation if test statistic includes min std option",
            "choices":[],
            "kinds":[],
            "name":"min.std",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The number of permutations to perform (use 0 to calculate asymptotic p-values using the standard independent two-sample t-test)",
            "choices":[],
            "kinds":[],
            "name":"number.of.permutations",
            "numValues":"0-1",
            "defaultValue":"1000",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether the input data has been log transformed",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"log.transformed.data",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to perform all possible permutations",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"complete",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to perform balanced permutations",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"balanced",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The seed of the random number generator used to produce permutations",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"779948241",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Whether to smooth p-values",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"smooth.p.values",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Tests to perform when cls file has more than two classes (Note: not fully corrected for multiple hypothesis testing)",
            "choices":["one versus all", "all pairs"],
            "kinds":[],
            "name":"phenotype.test",
            "numValues":"0-1",
            "defaultValue":"one versus all",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>.comp.marker.odf",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ComparativeMarkerSelection",
    "write":false,
    "tags":["Comparative Marker Selection"],
    "type":"module",
    "version":"8",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00044:8"
}, "242":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"An indexed BAM file or zipped set of indexed BAM files to be analyzed. If you are supplying a single BAM file, it should be located in the same folder as its associated index file (BAI). (If SortSam is used to index the BAM file, then the BAM and BAI files are located in the same folder.)",
            "choices":[],
            "kinds":["zip", "bam"],
            "name":"bam.files",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A TXT format sample info file containing a sample ID, sample file name, and notes column in tab-delimited format. - .txt",
            "choices":[],
            "kinds":["txt"],
            "name":"sample.info.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether the bam file contains single end reads. Select no for paired-end reads.",
            "choices":["-singleEnd=yes", "=no"],
            "kinds":[],
            "name":"single.end",
            "numValues":"0-1",
            "defaultValue":"-singleEnd",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A file containing annotations in GTF format. Either an annotation gtf or annotation gtf file must be provided.",
            "choices":["<libdir>gencode.v3c.annotation.NCBI36.gtf=Hg 18, GenCode", "<libdir>gencode.v7.annotation.NCBI37.gtf=Hg 19, GenCode"],
            "kinds":[],
            "name":"annotation.gtf",
            "numValues":"0-1",
            "defaultValue":"<libdir>gencode.v3c.annotation.NCBI36.gtf",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A file containing annotations in GTF format. Either an annotation gtf file or annotation gtf must be provided.",
            "choices":[],
            "kinds":["gtf"],
            "name":"annotation.gtf.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A FASTA file containing a reference sequence. The reference sequence must have an index (.fai) and a sequence dictionary (.dict) either in the same location or specified in the reference sequence index and reference sequence dictionary parameters.",
            "choices":[],
            "kinds":["fasta", "fa"],
            "name":"reference.sequence",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A file containing the index for the reference sequence - .fai",
            "choices":[],
            "kinds":["fai"],
            "name":"reference.sequence.index",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A file containing the dictionary for the reference sequence. - .dict",
            "choices":[],
            "kinds":["dict"],
            "name":"reference.sequence.dictionary",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The number of top-expressed genes for which to calculate metrics.",
            "choices":[],
            "kinds":[],
            "name":"num.genes",
            "numValues":"0-1",
            "defaultValue":"1000",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Specifies the column of the GTF file in which the transcript type is specified",
            "choices":[],
            "kinds":[],
            "name":"transcript.type.field",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"A file containing the genomic coordinates of rRNA. Either an rRNA interval file or an aligned rRNA file can be provided but not both. - .list",
            "choices":[],
            "kinds":["list"],
            "name":"rRNA.interval.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A SAM file containing reads aligned to a rRNA only reference sequence which is used to estimate rRNA content. Either an aligned rRNA file or a rRNA interval file can be provided but not both. - .sam",
            "choices":[],
            "kinds":["sam"],
            "name":"rRNA.aligned.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The length of the 3� or 5� end of a transcript.",
            "choices":["10", "50", "100"],
            "kinds":[],
            "name":"transcript.end.length",
            "numValues":"0-1",
            "defaultValue":"50",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to calculate transcript-level metrics in addition to sample-level metrics.",
            "choices":["-transcriptDetails=yes", "=no"],
            "kinds":[],
            "name":"transcript.level.metrics",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A file containing GC content for each of the transcripts. The file must be tab-delimited with 2 columns containing transcript name and GC content. The transcript name must appear in the GTF file.",
            "choices":[],
            "kinds":["txt"],
            "name":"gc.content.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Perform downsampling on the given number of reads. It randomly samples the specified number of reads in all experimental samples when calculating metrics.",
            "choices":[],
            "kinds":[],
            "name":"num.downsampling.reads",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A GCT file to use to calculate correlation between expression values (only uses first sample if gct file contains more than one sample)",
            "choices":[],
            "kinds":["gct"],
            "name":"correlation.comparison.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The prefix to use for the output file name",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<bam.files_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"RNAseqMetrics",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00263:1"
}, "249":{
    "category":"Gene List Selection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input file - .res, .gct, .odf type=Dataset",
            "choices":[],
            "kinds":["Dataset", "gct", "res"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The class file - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The class file containing the confounding variable.",
            "choices":[],
            "kinds":["cls"],
            "name":"confounding.variable.cls.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The test to perform",
            "choices":["0=Class 0", "1=Class 1", "2=2 Sided"],
            "kinds":[],
            "name":"test.direction",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The statistic to use",
            "choices":["1=SNR", "0=T-Test", "3=SNR (median)", "2=T-Test (median)", "4=T-Test (min std)", "5=SNR (min std)", "6=SNR (median, min std)", "7=T-Test (median, min std)"],
            "kinds":[],
            "name":"test.statistic",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"The minimum standard deviation if test statistic includes min std option",
            "choices":[],
            "kinds":[],
            "name":"min.std",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The number of permutations to perform (use 0 to calculate asymptotic p-values)",
            "choices":[],
            "kinds":[],
            "name":"number.of.permutations",
            "numValues":"0-1",
            "defaultValue":"1000",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to perform all possible permutations",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"complete",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to perform balanced permutations",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"balanced",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The seed of the random number generator used to produce permutations",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"779948241",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Whether to smooth p-values",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"smooth.p.values",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Tests to perform when cls file has more than two classes (Note: not fully corrected for multiple hypothesis testing)",
            "choices":["one versus all", "all pairs"],
            "kinds":[],
            "name":"phenotype.test",
            "numValues":"0-1",
            "defaultValue":"one versus all",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>.comp.marker.odf",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ComparativeMarkerSelection",
    "write":false,
    "tags":["Comparative Marker Selection"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00044:3"
}, "248":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[
        {
            "description":"",
            "choices":[],
            "kinds":["res"],
            "name":"getFilesBack1.res.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"",
            "choices":[],
            "kinds":["cls"],
            "name":"getFilesBack1.cls.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"MIT_701X_processHeatMapData.pipeline",
    "write":false,
    "tags":[],
    "type":"pipeline",
    "version":"3",
    "lsid":"urn:lsid:8080.jtriley.STARAPP.MIT.EDU:genepatternmodules:9:3"
}, "247":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The dataset to display with HeatMapViewer",
            "choices":["all_aml=all_aml", " GCM=GCM", " shipp_lymphoma=shipp_lymphoma"],
            "kinds":["Dataset", "gct", "res"],
            "name":"dataset",
            "numValues":"0-1",
            "defaultValue":"all_aml",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"MIT_701X_seeHeatMapData",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"4",
    "lsid":"urn:lsid:8080.jtriley.STARAPP-DEV.MIT.EDU:genepatternmodules:15:4"
}, "246":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The dataset to display with HierarchicalClusteringViewer",
            "choices":["all_aml=all_aml", " GCM=GCM", " shipp_lymphoma=shipp_lymphoma"],
            "kinds":["cdt"],
            "name":"dataset",
            "numValues":"0-1",
            "defaultValue":"all_aml",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"MIT_701X_seeClusteringData",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"3",
    "lsid":"urn:lsid:8080.jtriley.STARAPP-DEV.MIT.EDU:genepatternmodules:16:3"
}, "230":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A prebuilt bowtie index. Either a prebuilt or a custom Bowtie index must be specified.",
            "choices":["none=", "a_thaliana=A. Thaliana", "b_taurus=B. Taurus", "e_coli=E. Coli", "c_elegans_ws200=C. Elegans, WormBase WS200", "hg19=H. sapiens, UCSC hg19", "hg18=H. sapiens, UCSC hg18", "mm9=M. musculus, UCSC mm9", "mm8=M. musculus, UCSC mm8", "m_musculus_ncbi37=M. musculus, NCBI 37", "s_cerevisiae= S. cerevisiae"],
            "kinds":[],
            "name":"TopHat1.prebuilt.bowtie.index",
            "numValues":"0-1",
            "defaultValue":"none",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A ZIP archive containing Bowtie index files. Either a prebuilt or a custom Bowtie index must be specified.",
            "choices":[],
            "kinds":["zip"],
            "name":"TopHat1.custom.bowtie.index",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Unpaired reads file or first mate for paired reads. A file or zip of files containing reads in FASTA or FASTQ format.",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "zip"],
            "name":"TopHat1.reads.pair.1",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Second mate for paired reads. A file or zip of files in FASTA or FASTQ format.",
            "choices":[],
            "kinds":["fn", "fa", "fastq", "zip"],
            "name":"TopHat1.reads.pair.2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The expected mean inner distance between mate pairs. This parameter is required for paired-end runs and must be an integer.",
            "choices":[],
            "kinds":[],
            "name":"TopHat1.mate.inner.dist",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The standard deviation for the distribution on inner distances between mate pairs.",
            "choices":[],
            "kinds":[],
            "name":"TopHat1.mate.std.dev",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Library type for strand specific reads.",
            "choices":["None=", "fr-unstranded=Standard Illumina (fr-unstranded)", "fr-firststrand=dUTP, NSR, NNSR (fr-firststrand)", "fr-secondstrand=Ligation, Standard SOLiD (fr-secondstrand)"],
            "kinds":[],
            "name":"TopHat1.library.type",
            "numValues":"0-1",
            "defaultValue":"None",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Quality values are space-delimited integer values, this becomes default when you specify color option.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"TopHat1.integer.quals",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"File containing sizes of chromosomes",
            "choices":[],
            "kinds":["txt", "rtf"],
            "name":"Scripture3.chromosome.size.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Selected chromosome, e.g., chr19",
            "choices":[],
            "kinds":[],
            "name":"Scripture3.chromosome",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Chromosome sequence in FASTA format",
            "choices":[],
            "kinds":["fa", "fasta"],
            "name":"Scripture3.chromosome.sequence.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A label that will be used to name output files",
            "choices":[],
            "kinds":[],
            "name":"Scripture3.output.prefix",
            "numValues":"0-1",
            "defaultValue":"<alignment.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ScripturePipeline",
    "write":false,
    "tags":[],
    "type":"pipeline",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.pipeline:00012:2"
}, "370":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A tab-delimited text file with columns corresponding to parameters and rows to events. The first row is a heading labelling parameters. Such a text file is supposed to be generated from an FCS file by the ImmPortFCSConvLogicleTrans module optionally followed by the ImmPortColSelection module (if applicable to remove unused parameters). Alternatively, this text file may be created by the ImmPortCSV2TXT module if the original data is in the CSV format.",
            "choices":[],
            "kinds":["txt"],
            "name":"Input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The number of bins used to partition each dimension. The default value of 0 means that the algorithm will automatically determine a suitable number of bins. Any value from the [6,29] range may be provided to manually override algorithmic estimations.",
            "choices":[],
            "kinds":[],
            "name":"Number.of.bins",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The minimal number of events in a bin (in the hyperspace of used markers) needed to mark the bin as a dense bin. The default value of 0 means that the algorithm will automatically determine a suitable density threshold. Any value from the [3,99] range may be provided to manually override algorithmic estimations.",
            "choices":[],
            "kinds":["txt"],
            "name":"Density.threshold",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The maximum number of populations identifiable by the clustering algorithm. The default value of 30 works well in most cases but may be overridden by any value from the [5,999] range. Larger values may increase the execution time of the module.",
            "choices":[],
            "kinds":[],
            "name":"Maximum.number.of.populations",
            "numValues":"0-1",
            "defaultValue":"30",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        }
    ],
    "name":"ImmPortFLOCK",
    "write":false,
    "tags":["MFI.txt", "coordinates.txt", "fcs.properties", "flock_results.txt", "parameters.txt", "percentage.txt", "population_center.txt", "population_id.txt", "profile.txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00307:1"
}, "371":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"a text file containing a list of file paths",
            "choices":[],
            "kinds":[],
            "name":"filelist",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"specify number of header lines so that they are output only once",
            "choices":[],
            "kinds":[],
            "name":"num.header.lines",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ConcatenateFilelist",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00283:1"
}, "372":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"the initial input filelist, a file containing a list of filepaths",
            "choices":[],
            "kinds":[],
            "name":"input.filelist",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"an optional list of filename patterns to match, e.g. *.cls,*.gct",
            "choices":[],
            "kinds":[],
            "name":"includePattern",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Include files, directories, or both files and directories in the output filelist",
            "choices":["=all", "f=file", "d=dir"],
            "kinds":[],
            "name":"type",
            "numValues":"0-1",
            "defaultValue":"f",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether the module should output stderr if the output result is empty",
            "choices":["=no", "yes=yes"],
            "kinds":[],
            "name":"errorOnEmptySet",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"the name of the output file, if none specified, write to stdout",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "numValues":"0-1",
            "defaultValue":"<input.filelist_basename>.filtered.<input.filelist_extension>",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"FilterFilelist",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00280:1"
}, "373":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A tab delimited file",
            "choices":[],
            "kinds":["cn", "seg", "seg.txt", "xcn"],
            "name":"SplitColumns1.input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The name of the output file",
            "choices":[],
            "kinds":[],
            "name":"ConcatenateFilelist4.output.filename",
            "numValues":"0-1",
            "defaultValue":"<filelist_basename>.catted.seg.txt",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ParallelCBS",
    "write":false,
    "tags":["txt"],
    "type":"pipeline",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.pipeline:00019:1"
}, "379":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Zip of SNP 6.0 CEL files",
            "choices":[],
            "kinds":["zip"],
            "name":"SNPFileCreator_SNP62.cel.files",
            "numValues":"0-1",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The input file (any non-binary file format)",
            "choices":[],
            "kinds":[],
            "name":"ConvertLineEndings1.input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The types of files to output. Whether to output files with CNVs included, removed, or both.",
            "choices":["cnv=output with CNVs", "nocnv=output without CNVs", "both=output both"],
            "kinds":["txt"],
            "name":"TangentNormalization9.output.files",
            "numValues":"0-1",
            "defaultValue":"nocnv",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"CopyNumberInferencePipeline.Part1of2",
    "write":false,
    "tags":[],
    "type":"pipeline",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.pipeline:00026:1"
}, "239":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A SAM or BAM file",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to remove duplicates",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"remove.duplicates",
            "numValues":"0-1",
            "defaultValue":"false",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Maximum number of file handles to keep open when spilling read ends to disk",
            "choices":[],
            "kinds":[],
            "name":"max.file.handles",
            "numValues":"0-1",
            "defaultValue":"8000",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Regular expression that can be used to parse read names in the input file",
            "choices":[],
            "kinds":[],
            "name":"read.name.regex",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The maximum offset between two duplicte clusters in order to consider them optical duplicates. This should usually be set to some fairly small number (e.g. 5-10 pixels) unless using later versions of the Illumina pipeline that multiply pixel values by 10, in which case 50-100 is more normal",
            "choices":[],
            "kinds":[],
            "name":"optical.duplicate.distance",
            "numValues":"0-1",
            "defaultValue":"100",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The prefix to use for the output file name",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Picard.MarkDuplicates",
    "write":false,
    "tags":["bam", "sam", "metrics.txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00267:1"
}, "378":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The quality scores computed by the CopyNumberInference module. ",
            "choices":[],
            "kinds":["txt", "QS.txt"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":true
        },
        {
            "description":"The name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>.noise.txt",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"CopyNumberNoise",
    "write":false,
    "tags":["txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00294:1"
}, "375":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A file containing copy number data in CN format.",
            "choices":[],
            "kinds":["cn", "rda", "txt"],
            "name":"CBS1.input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The name of the sample to use. Leave blank to use the first sample in the input file.",
            "choices":[],
            "kinds":[],
            "name":"CBS1.sample.name",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Number of permutations used for p-value computation",
            "choices":[],
            "kinds":[],
            "name":"CBS1.permutations",
            "numValues":"0-1",
            "defaultValue":"10000",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Significance levels for the test to accept change-points",
            "choices":[],
            "kinds":[],
            "name":"CBS1.significance.level",
            "numValues":"0-1",
            "defaultValue":"0.01",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The prefix to use for the output file name",
            "choices":[],
            "kinds":[],
            "name":"CBS1.output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"CBSWrapperPipeline",
    "write":false,
    "tags":[],
    "type":"pipeline",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.pipeline:00017:1"
}, "374":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Copy number file - .cn",
            "choices":[],
            "kinds":["cn", "rda", "txt"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The name of the sample to use. Leave blank to use the first sample in the input file.",
            "choices":[],
            "kinds":[],
            "name":"sample.name",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Number of permutations used for p-value computation",
            "choices":[],
            "kinds":[],
            "name":"permutations",
            "numValues":"0-1",
            "defaultValue":"10000",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Significance levels for the test to accept change-points",
            "choices":[],
            "kinds":[],
            "name":"significance.level",
            "numValues":"0-1",
            "defaultValue":"0.01",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The prefix to use for the output file name",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"CBS",
    "write":false,
    "tags":["cbs.txt"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00121:2"
}, "377":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A CN file (.cn, .RData, or .txt)",
            "choices":[],
            "kinds":["txt", "cn", "rdata", "RData"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The number of trailing and leading probes to use to compute the median",
            "choices":[],
            "kinds":[],
            "name":"num.probes",
            "numValues":"0-1",
            "defaultValue":"5",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The replacement value for the outlier probe",
            "choices":["NA", "mean", "median"],
            "kinds":[],
            "name":"outlier.probe.replacement",
            "numValues":"0-1",
            "defaultValue":"NA",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Multiplicative threshold",
            "choices":[],
            "kinds":[],
            "name":"multiplicative.threshold",
            "numValues":"0-1",
            "defaultValue":"4",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Additive threshold",
            "choices":[],
            "kinds":[],
            "name":"additive.threshold",
            "numValues":"0-1",
            "defaultValue":"0.3",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"A prefix for the output file",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        }
    ],
    "name":"RemoveCopyNumberOutliers",
    "write":false,
    "tags":["cn", "RData"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00169:1"
}, "376":{
    "category":"SNP Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input file - .txt",
            "choices":[],
            "kinds":["txt", "splitcol.txt"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The internally provided genome annotation to insert into the input file.",
            "choices":["hg18", "hg19"],
            "kinds":["txt"],
            "name":"genome.annotation",
            "numValues":"0-1",
            "defaultValue":"hg18",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A custom genome annotation file.",
            "choices":[],
            "kinds":["txt"],
            "name":"custom.genome.annotation.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The prefix for the output file",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"InsertGenomicLocations",
    "write":false,
    "tags":["txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00292:1"
}, "232":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A prebuilt bowtie index. Either a prebuilt or a custom Bowtie index must be specified.",
            "choices":["none=", "a_thaliana=A. Thaliana", "b_taurus=B. Taurus", "e_coli=E. Coli", "c_elegans_ws200=C. Elegans, WormBase WS200", "hg19=H. sapiens, UCSC hg19", "hg18=H. sapiens, UCSC hg18", "mm9=M. musculus, UCSC mm9", "mm8=M. musculus, UCSC mm8", "m_musculus_ncbi37=M. musculus, NCBI 37", "s_cerevisiae= S. cerevisiae"],
            "kinds":[],
            "name":"prebuilt.bowtie.index",
            "numValues":"0-1",
            "defaultValue":"none",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A ZIP archive containing Bowtie index files. Either a prebuilt or a custom Bowtie index must be specified.",
            "choices":[],
            "kinds":["zip"],
            "name":"custom.bowtie.index",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Unpaired reads file or first mate for paired reads. A file or zip of files containing reads in FASTA or FASTQ format.",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "zip"],
            "name":"reads.pair.1",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Second mate for paired reads. A file or zip of files in FASTA or FASTQ format.",
            "choices":[],
            "kinds":["fn", "fa", "fastq", "zip"],
            "name":"reads.pair.2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The expected mean inner distance between mate pairs. This parameter is required for paired-end runs and must be an integer.",
            "choices":[],
            "kinds":[],
            "name":"mate.inner.dist",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The standard deviation for the distribution on inner distances between mate pairs.",
            "choices":[],
            "kinds":[],
            "name":"mate.std.dev",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Library type for strand specific reads.",
            "choices":["None=", "fr-unstranded=Standard Illumina (fr-unstranded)", "fr-firststrand=dUTP, NSR, NNSR (fr-firststrand)", "fr-secondstrand=Ligation, Standard SOLiD (fr-secondstrand)"],
            "kinds":[],
            "name":"library.type",
            "numValues":"0-1",
            "defaultValue":"None",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A GTF file (v. 2.2 or higher) containing a list of gene model annotations. The exon records in this file will be used to build a set of known splice junctions for each gene and to attempt to align reads to these junctions even if they would not normally be covered by the initial mapping.",
            "choices":[],
            "kinds":["gtf"],
            "name":"GTF.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A file containing raw junctions. Junctions are specified one per line, in a tab-delimited format.",
            "choices":[],
            "kinds":["juncs"],
            "name":"raw.junctions.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"If no, then only look for junctions indicated in the supplied GFF file. (Ignored when no GTF file is specified).",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"find.novel.junctions",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The anchor length. This value must be at least 3.",
            "choices":[],
            "kinds":[],
            "name":"min.anchor.length",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The maximum number of mismatches that may appear in the \"anchor\" region of a spliced alignment.",
            "choices":[],
            "kinds":[],
            "name":"splice.mismatches",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The minimum intron length. TopHat will ignore donor/acceptor pairs closer than this many bases apart.",
            "choices":[],
            "kinds":[],
            "name":"min.intron.length",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The maximum intron length. When searching for junctions ab initio, TopHat will ignore donor/acceptor pairs farther than this many bases apart, except when such a pair is supported by a split segment alignment of a long read.",
            "choices":[],
            "kinds":[],
            "name":"max.intron.length",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Use the Solexa scale for quality values in FASTQ files.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"use.solexa.scale",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"As of the Illumina GA pipeline version 1.3, quality scores are encoded in Phred-scaled base-64. Use this option for FASTQ files from pipeline 1.3 or later.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"use.solexa.1.3.scale",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Separate quality value files - colorspace read files (CSFASTA) come with separate qual files.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"separate.qual.files",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Quality values are space-delimited integer values, this becomes default when you specify color option.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"integer.quals",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Colorspace reads. Requires a color space bowtie index.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"colorspace.reads",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Filters out junctions supported by too few alignments. Suppose a junction spanning two exons, is supported by S reads. Let the average depth of coverage of exon A be D, and assume that it is higher than B. If S / D is less than the minimum isoform fraction, the junction is not reported. A value of zero disables the filter.",
            "choices":[],
            "kinds":[],
            "name":"min.isoform.fraction",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Allows up to the specified alignments to the reference for a given read, and suppresses all alignments for reads with more than this many alignments.",
            "choices":[],
            "kinds":[],
            "name":"max.multihits",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Enables or disables the mate pair closure-based search for junctions. Closure-based search should only be used when the expected inner distance between mates is small (<= 50bp).",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"closure.search",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Enables or disables the coverage based search for junctions. Use when coverage search is disabled by default (such as for reads 75bp or longer), for maximum sensitivity.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"coverage.search",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Attempts to find alignments incident to microexons. Works only for reads 50bp or longer.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"microexon.search",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Enables or disables a slower, but potentially more sensitive algorithm to find junctions in addition to its standard search. Consider using this if you expect that your experiment produced a lot of reads from pre-mRNA, that fall within the introns of your transcripts.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"butterfly.search",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Specify how many parallel search threads to launch. All threads find alignments in parallel, increasing alignment throughput by approximately a multiple of the number of threads.",
            "choices":[],
            "kinds":[],
            "name":"num.threads",
            "numValues":"0-1",
            "defaultValue":"8",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        }
    ],
    "name":"TopHat",
    "write":false,
    "tags":["bam", "bed"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00230:3"
}, "231":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file in SAM or BAM format",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"SortSam1.input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"File containing sizes of chromosomes",
            "choices":[],
            "kinds":["txt", "rtf"],
            "name":"Scripture2.chromosome.size.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Selected chromosome, e.g., chr19",
            "choices":[],
            "kinds":[],
            "name":"Scripture2.chromosome",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Chromosome sequence in FASTA format",
            "choices":[],
            "kinds":["fa", "fasta"],
            "name":"Scripture2.chromosome.sequence.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A label that will be used to name output files",
            "choices":[],
            "kinds":[],
            "name":"Scripture2.output.prefix",
            "numValues":"0-1",
            "defaultValue":"<alignment.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ScripturePrealigned",
    "write":false,
    "tags":[],
    "type":"pipeline",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.pipeline:00013:2"
}, "234":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A prebuilt bowtie index. Either a prebuilt or a custom Bowtie index must be specified.",
            "choices":["none=", "a_thaliana=A. Thaliana, TAIR8", "b_taurus=B. Taurus, UMD Freeze 3.0", "e_coli=E. Coli", "c_elegans_ws200=C. Elegans, WormBase WS200", "hg19=H. sapiens, UCSC hg19", "hg18=H. sapiens, UCSC hg18", "mm9=M. musculus, UCSC mm9", "mm8=M. musculus, UCSC mm8", "m_musculus_ncbi37=M. musculus, NCBI 37", "s_cerevisiae= S. cerevisiae"],
            "kinds":[],
            "name":"prebuilt.bowtie.index",
            "numValues":"0-1",
            "defaultValue":"none",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A ZIP archive containing Bowtie index files. Either a prebuilt or a custom Bowtie index must be specified.",
            "choices":[],
            "kinds":["zip"],
            "name":"custom.bowtie.index",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Unpaired reads file or first mate for paired reads. A file or zip of files containing reads in FASTA or FASTQ format.",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "fn.gz", "fa.gz", "fasta.gz", "fq.gz", "fastq.gz", "fn.bz2", "fa.bz2", "fasta.bz2", "fq.bz2", "fastq.bz2", "zip", "gz", "bz2"],
            "name":"reads.pair.1",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Second mate for paired reads. A file or zip of files in FASTA or FASTQ format.",
            "choices":[],
            "kinds":["fn", "fa", "fasta", "fq", "fastq", "fn.gz", "fa.gz", "fasta.gz", "fq.gz", "fastq.gz", "fn.bz2", "fa.bz2", "fasta.bz2", "fq.bz2", "fastq.bz2", "zip", "gz", "bz2"],
            "name":"reads.pair.2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The expected mean inner distance between mate pairs. This parameter is required for paired-end runs and must be an integer.",
            "choices":[],
            "kinds":[],
            "name":"mate.inner.dist",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The standard deviation for the distribution on inner distances between mate pairs.",
            "choices":[],
            "kinds":[],
            "name":"mate.std.dev",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Library type for strand specific reads.",
            "choices":["fr-unstranded=Standard Illumina (fr-unstranded)", "fr-firststrand=dUTP, NSR, NNSR (fr-firststrand)", "fr-secondstrand=Ligation, Standard SOLiD (fr-secondstrand)"],
            "kinds":[],
            "name":"library.type",
            "numValues":"0-1",
            "defaultValue":"fr-unstranded",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A GTF file (v. 2.2 or higher) or GFF3 file containing a list of gene model annotations. The exon records in this file will be used to build a set of known splice junctions for each gene and to attempt to align reads to these junctions even if they would not normally be covered by the initial mapping.",
            "choices":[],
            "kinds":["gtf", "gff3"],
            "name":"GTF.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A file containing raw junctions. Junctions are specified one per line, in a tab-delimited format.",
            "choices":[],
            "kinds":["juncs"],
            "name":"raw.junctions.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"If no, then only look for junctions indicated in the supplied GTF or GFF file. (Ignored when no GTF or GFF file is specified).",
            "choices":["=yes", "--no-novel-juncs=no"],
            "kinds":[],
            "name":"find.novel.junctions",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The anchor length. This value must be greater than 4.",
            "choices":[],
            "kinds":[],
            "name":"min.anchor.length",
            "numValues":"0-1",
            "defaultValue":"8",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The maximum number of mismatches that may appear in the \"anchor\" region of a spliced alignment.",
            "choices":[],
            "kinds":[],
            "name":"splice.mismatches",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The minimum intron length. TopHat will ignore donor/acceptor pairs closer than this many bases apart.",
            "choices":[],
            "kinds":[],
            "name":"min.intron.length",
            "numValues":"0-1",
            "defaultValue":"70",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The maximum intron length. When searching for junctions ab initio, TopHat will ignore donor/acceptor pairs farther than this many bases apart, except when such a pair is supported by a split segment alignment of a long read.",
            "choices":[],
            "kinds":[],
            "name":"max.intron.length",
            "numValues":"0-1",
            "defaultValue":"500000",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Whether to allow indel search",
            "choices":["--allow-indels=yes", "=no"],
            "kinds":[],
            "name":"indel.search",
            "numValues":"0-1",
            "defaultValue":"--allow-indels",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The maximum insertion length",
            "choices":[],
            "kinds":[],
            "name":"max.insertion.length",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The maximum deletion length",
            "choices":[],
            "kinds":[],
            "name":"max.deletion.length",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Use the Solexa scale for quality values in FASTQ files.",
            "choices":["--solexa-quals=yes", "=no"],
            "kinds":[],
            "name":"use.solexa.scale",
            "numValues":"0-1",
            "defaultValue":"--solexa-quals",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"As of the Illumina GA pipeline version 1.3, quality scores are encoded in Phred-scaled base-64. Use this option for FASTQ files from pipeline 1.3 or later.",
            "choices":["--solexa1.3-quals=yes", "=no"],
            "kinds":[],
            "name":"use.solexa.1.3.scale",
            "numValues":"0-1",
            "defaultValue":"--solexa1.3-quals",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A zip file containing separate quality value files for single end or first pair of paired reads (colorspace read files (CSFASTA) come with separate qual files)",
            "choices":[],
            "kinds":["zip"],
            "name":"quality.value.files.1",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A zip file containing separate quality value files for second pair of paired reads (colorspace read files (CSFASTA) come with separate qual files)",
            "choices":[],
            "kinds":["zip"],
            "name":"quality.value.files.2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Quality values are space-delimited integer values, this becomes default when you specify color option.",
            "choices":["--integer-quals=yes", "=no"],
            "kinds":[],
            "name":"integer.quals",
            "numValues":"0-1",
            "defaultValue":"--integer-quals",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Colorspace reads. Requires a color space bowtie index.",
            "choices":["-C=yes", "=no"],
            "kinds":[],
            "name":"colorspace.reads",
            "numValues":"0-1",
            "defaultValue":"-C",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Filters out junctions supported by too few alignments. Suppose a junction spanning two exons, is supported by S reads. Let the average depth of coverage of exon A be D, and assume that it is higher than B. If S / D is less than the minimum isoform fraction, the junction is not reported. A value of zero disables the filter.",
            "choices":[],
            "kinds":[],
            "name":"min.isoform.fraction",
            "numValues":"0-1",
            "defaultValue":"0.15",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Allows up to the specified alignments to the reference for a given read, and suppresses all alignments for reads with more than this many alignments.",
            "choices":[],
            "kinds":[],
            "name":"max.multihits",
            "numValues":"0-1",
            "defaultValue":"40",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Enables or disables the mate pair closure-based search for junctions. Closure-based search should only be used when the expected inner distance between mates is small (<= 50bp).",
            "choices":["--closure-search=yes", "--no-closure-search=no"],
            "kinds":[],
            "name":"closure.search",
            "numValues":"0-1",
            "defaultValue":"--closure-search",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Enables or disables the coverage based search for junctions. Use when coverage search is disabled by default (such as for reads 75bp or longer), for maximum sensitivity.",
            "choices":["--coverage-search=yes", "--no-coverage-search=no"],
            "kinds":[],
            "name":"coverage.search",
            "numValues":"0-1",
            "defaultValue":"--coverage-search",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Attempts to find alignments incident to microexons. Works only for reads 50bp or longer.",
            "choices":["--microexon-search=yes", "=no"],
            "kinds":[],
            "name":"microexon.search",
            "numValues":"0-1",
            "defaultValue":"--microexon-search",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Enables or disables a slower, but potentially more sensitive algorithm to find junctions in addition to its standard search. Consider using this if you expect that your experiment produced a lot of reads from pre-mRNA, that fall within the introns of your transcripts.",
            "choices":["--butterfly-search=yes", "=no"],
            "kinds":[],
            "name":"butterfly.search",
            "numValues":"0-1",
            "defaultValue":"--butterfly-search",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Specify how many parallel search threads to launch. All threads find alignments in parallel, increasing alignment throughput by approximately a multiple of the number of threads.",
            "choices":[],
            "kinds":[],
            "name":"num.threads",
            "numValues":"0-1",
            "defaultValue":"8",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        }
    ],
    "name":"TopHat",
    "write":false,
    "tags":["bam", "junctions.bed", "insertions.bed", "deletions.bed"],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00230:4"
}, "233":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"An input FCS data file to be described.",
            "choices":[],
            "kinds":["fcs", "FCS"],
            "name":"Input.FCS.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Output file format, either HTML or XML, default HTML.",
            "choices":["HTML=HTML, default", "XML=XML"],
            "kinds":[],
            "name":"Output.file.format",
            "numValues":"0-1",
            "defaultValue":"HTML",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The output file name (optional).",
            "choices":[],
            "kinds":[],
            "name":"Output.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.FCS.data.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"PreviewFCS",
    "write":false,
    "tags":["html", "xml"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00185:1"
}, "236":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file (BAM or SAM).",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Read Group ID",
            "choices":[],
            "kinds":[],
            "name":"read.group.id",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"DNA preparation library. Note that this field is required by the module Picard.MarkDuplicates. It is used to determine which read groups may contain molecular duplicates, in the case where the same DNA library was sequenced on multiple lanes.",
            "choices":[],
            "kinds":[],
            "name":"read.group.library",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Read Group platform (e.g., Illumina, SOLID).",
            "choices":[],
            "kinds":[],
            "name":"read.group.platform",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Read Group platform unit (e.g., run barcode).",
            "choices":[],
            "kinds":[],
            "name":"read.group.platform.unit",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Read Group sample name.",
            "choices":[],
            "kinds":[],
            "name":"read.group.sample.name",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Read Group sequencing center name.",
            "choices":[],
            "kinds":[],
            "name":"read.group.sequencing.center.name",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Read Group description.",
            "choices":[],
            "kinds":[],
            "name":"read.group.description",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A label used to name the output file",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Picard.AddOrReplaceReadGroups",
    "write":false,
    "tags":["bam", "sam"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00266:2"
}, "235":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input file (BAM or SAM).",
            "choices":[],
            "kinds":["sam", "bam"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Read Group ID",
            "choices":[],
            "kinds":[],
            "name":"read.group.id",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"DNA preparation library. Note that this field is required by the module MarkDuplicates. It is used to determine which read groups may contain molecular duplicates, in the case where the same DNA library was sequenced on multiple lanes.",
            "choices":[],
            "kinds":[],
            "name":"read.group.library",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Read Group platform (e.g., Illumina, SOLID).",
            "choices":[],
            "kinds":[],
            "name":"read.group.platform",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Read Group platform unit (e.g., run barcode).",
            "choices":[],
            "kinds":[],
            "name":"read.group.platform.unit",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Read Group sample name.",
            "choices":[],
            "kinds":[],
            "name":"read.group.sample.name",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Read Group sequencing center name.",
            "choices":[],
            "kinds":[],
            "name":"read.group.sequencing.center.name",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Read Group description.",
            "choices":[],
            "kinds":[],
            "name":"read.group.description",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A label used to name the output file",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"AddOrReplaceReadGroups",
    "write":false,
    "tags":["bam", "sam"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00266:1"
}, "238":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A sequence in FASTA format.",
            "choices":[],
            "kinds":["fasta", "fa"],
            "name":"fasta.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The prefix to use for the output file name",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<fasta.file_basename>",
            "required":false,
            "fileChoice":false
        }
    ],
    "name":"SAMtools.FastaIndex",
    "write":false,
    "tags":["fai", "fasta", "fa"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00265:1"
}, "237":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input reference fasta or fasta.gz ",
            "choices":[],
            "kinds":["fasta", "fa"],
            "name":"reference.sequence.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The genome assembly to put into AS field of sequence dictionary entry",
            "choices":[],
            "kinds":[],
            "name":"genome.assembly",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The uri to put into UR field of sequence dictionary entry",
            "choices":[],
            "kinds":[],
            "name":"uri",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Make sequence name the first word from the > line in the reference file",
            "choices":["true=yes", "false=no"],
            "kinds":[],
            "name":"truncate.names.at.white.space",
            "numValues":"0-1",
            "defaultValue":"true",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Stop after writing this many sequences",
            "choices":[],
            "kinds":[],
            "name":"num.sequences",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The name of the output file",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<reference.sequence.file_basename>.dict",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Picard.CreateSequenceDictionary",
    "write":false,
    "tags":["dict"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00244:1"
}, "262":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input FCS data file in which to set keyword/value pairs.",
            "choices":[],
            "kinds":["fcs"],
            "name":"Input.FCS.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The file with keyword/value pairs to add (or change values of existing keywords). The keyword/value pairs can be submitted either as an CSV file with two columns: \"Keyword\" and \"Value\" (heading is optional) or as a text file with a chunk of FCS TEXT segment, e.g., /$P3S/MUC 1 APC/$P4S/Thy1 PE/BD$CUSTOM_VALUE23/12/.",
            "choices":[],
            "kinds":["csv", "txt"],
            "name":"Keywords.input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The file name for the output FCS data file.",
            "choices":[],
            "kinds":[],
            "name":"Output.fcs.file.name",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"SetFCSKeywords",
    "write":false,
    "tags":["fcs"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00186:1"
}, "263":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input FCS data file from which the module will extract keyword/value pairs.",
            "choices":[],
            "kinds":["fcs"],
            "name":"Input.FCS.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The file format to be used to store the extracted keywords/value pairs.",
            "choices":["CSV=CSV file, default", "FCS=Text file with FCS text segment chunk "],
            "kinds":[],
            "name":"Keywords.output.mode",
            "numValues":"0-1",
            "defaultValue":"CSV",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The name for the file in which the keyword/value pairs are stored.",
            "choices":[],
            "kinds":[],
            "name":"Keywords.output.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.FCS.data.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ExtractFCSKeywords",
    "write":false,
    "tags":["csv", "txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00181:1"
}, "260":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input FCS data file from which to extract parameters.",
            "choices":[],
            "kinds":["fcs"],
            "name":"Input.FCS.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A list of parameters to extract; parameters may be specified by their indexes (e.g., 1-3, 5, 8) or by their short names (e.g., FSC-H, SSC-H, FL1-A, FL3-H).",
            "choices":[],
            "kinds":[],
            "name":"Parameters.to.extract",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The output file name. The default uses the input file name as the base.",
            "choices":[],
            "kinds":[],
            "name":"Output.file.name",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"ExtractFCSParameters",
    "write":false,
    "tags":["fcs"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00180:1"
}, "261":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"An FCS data file to which you want to add indexes.",
            "choices":[],
            "kinds":["fcs"],
            "name":"Input.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The index number for the first event in the data set; the default is 1. The index will be incremented by 1 for each of the events in the data set. ",
            "choices":[],
            "kinds":[],
            "name":"Start.index",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"The short name ($PnN keyword) of the parameter to get the index; the default is \"Index.\" ",
            "choices":[],
            "kinds":[],
            "name":"Index.parameter.short.name",
            "numValues":"0-1",
            "defaultValue":"Index",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The long name ($PnS keyword) of the parameter to get the index; the default is blank.",
            "choices":[],
            "kinds":[],
            "name":"Index.parameter.long.name",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The output file name.",
            "choices":[],
            "kinds":[],
            "name":"Output.fcs.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.data.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"AddFCSEventIndex",
    "write":false,
    "tags":["fcs"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00176:1"
}, "361":{
    "category":"Survival Analysis",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input clinical data including survival time & censor status -.txt",
            "choices":[],
            "kinds":["txt"],
            "name":"input.surv.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Class information file -.cls",
            "choices":[],
            "kinds":["cls"],
            "name":"input.cls.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Name of survival time field",
            "choices":[],
            "kinds":[],
            "name":"time.field",
            "numValues":"0-1",
            "defaultValue":"time",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Name of survival time field (value should be \"event:1, censor:0\")",
            "choices":[],
            "kinds":[],
            "name":"censor.field",
            "numValues":"0-1",
            "defaultValue":"status",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Name of class field in survival data file (optional)",
            "choices":[],
            "kinds":[],
            "name":"cls.field",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Output file name for survival fit results",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"print.fit.results",
            "numValues":"0-1",
            "defaultValue":"F",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Assign line type/color automatically/manually?",
            "choices":["automatic=automatic", "manual=manual"],
            "kinds":[],
            "name":"line.type.color.assign",
            "numValues":"0-1",
            "defaultValue":"automatic",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"e.g. 1,2,3,... (1: solid, 2: dashed, 3: dotted, 4: dot-dashed)",
            "choices":[],
            "kinds":[],
            "name":"manual.line.type",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"e.g. black, blue, red, ...",
            "choices":[],
            "kinds":[],
            "name":"manual.line.color",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Line width",
            "choices":["1=thin", "2=thick", "3=thickest"],
            "kinds":[],
            "name":"line.width",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Survival time conversion",
            "choices":["1=none", "365.25=days to years", "12=months to years"],
            "kinds":[],
            "name":"time.conversion",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":true
        },
        {
            "description":"Maximum survival time (in original scale)",
            "choices":[],
            "kinds":[],
            "name":"max.time",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Lower limit of y axis range",
            "choices":[],
            "kinds":[],
            "name":"surv.function.lower",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Upper limit of y axis range",
            "choices":[],
            "kinds":[],
            "name":"surv.function.higher",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Type of survival curve",
            "choices":["log=survival", "event=event", "cumhaz=cumulative hazard", "cloglog=complimentary log-log survival"],
            "kinds":[],
            "name":"curve.type",
            "numValues":"0-1",
            "defaultValue":"log",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Show confidence inteval?",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"show.conf.interval",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"Show legend?",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"add.legend",
            "numValues":"0-1",
            "defaultValue":"T",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Position of legend",
            "choices":["left-bottom", "left-top", "right-bottom", "right-top"],
            "kinds":[],
            "name":"legend.position",
            "numValues":"0-1",
            "defaultValue":"left-bottom",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Name for output files",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "numValues":"0-1",
            "defaultValue":"<input.surv.data.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"SurvivalCurve",
    "write":false,
    "tags":["png", "txt"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00103:3"
}, "362":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A tab delimited file",
            "choices":[],
            "kinds":["cn", "seg", "seg.txt", "xcn", "txt"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Specify columns to extract (i.e. 2,4, 5-, 11-17,). Leave blank to split all columns.",
            "choices":[],
            "kinds":[],
            "name":"split.columns",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Specify subset of additional columns to include in each (i.e. 2,4, 5-, 11-17) output file.",
            "choices":[],
            "kinds":[],
            "name":"additional.columns",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The prefix to use for the output file name.",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"SplitColumns",
    "write":false,
    "tags":["splitcol.txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00300:1"
}, "360":{
    "category":"Clustering",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The data to be clustered (.gct, .res, .odf)",
            "choices":[],
            "kinds":["gct", "res", "Dataset"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Try K=2,3,...,kmax clusters (must be > 1)",
            "choices":[],
            "kinds":[],
            "name":"kmax",
            "numValues":"0-1",
            "defaultValue":"5",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Number of resampling iterations",
            "choices":[],
            "kinds":[],
            "name":"resampling.iterations",
            "numValues":"0-1",
            "defaultValue":"20",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Random number generator seed",
            "choices":[],
            "kinds":[],
            "name":"seed.value",
            "numValues":"0-1",
            "defaultValue":"12345",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Type of clustering algorithm",
            "choices":["HIERARCHICAL=Hierarchical", "SOM", "NMF", "KMEANS=KMeans"],
            "kinds":[],
            "name":"clustering.algorithm",
            "numValues":"0-1",
            "defaultValue":"HIERARCHICAL",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to cluster by rows/genes or columns/experiments",
            "choices":["=columns", "-c=rows"],
            "kinds":[],
            "name":"cluster.by",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Distance measure",
            "choices":["EUCLIDEAN=Euclidean", "PEARSON=Pearson"],
            "kinds":[],
            "name":"distance.measure",
            "numValues":"0-1",
            "defaultValue":"EUCLIDEAN",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"resampling scheme (one of 'subsample[ratio]', 'features[nfeat]', 'nosampling')",
            "choices":[],
            "kinds":[],
            "name":"resample",
            "numValues":"0-1",
            "defaultValue":"subsample",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Ignored when algorithm other than hierarchical selected",
            "choices":["average", "complete", "single"],
            "kinds":[],
            "name":"merge.type",
            "numValues":"0-1",
            "defaultValue":"average",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Number of SOM/NMF iterations",
            "choices":[],
            "kinds":[],
            "name":"descent.iterations",
            "numValues":"0-1",
            "defaultValue":"2000",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Stub pre-pended to all the output file names",
            "choices":[],
            "kinds":[],
            "name":"output.stub",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"row-wise, column-wise, both",
            "choices":["-n1=row-wise", "-n2=column-wise", "-n3=both", "=none"],
            "kinds":[],
            "name":"normalize.type",
            "numValues":"0-1",
            "defaultValue":"-n1",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"number of row/column normalization iterations (supercedes normalize.type)",
            "choices":[],
            "kinds":[],
            "name":"normalization.iterations",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Whether to create heatmaps (one for each cluster number)",
            "choices":["=no", "-p=yes"],
            "kinds":[],
            "name":"create.heat.map",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"point size of a consensus matrix's heat map (between 1 and 20)",
            "choices":[],
            "kinds":[],
            "name":"heat.map.size",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        }
    ],
    "name":"ConsensusClustering",
    "write":false,
    "tags":["gct", "gif", "clu", "pdf", "clsdist", "stdev"],
    "type":"module",
    "version":"7",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00030:7"
}, "366":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A tab-delimited text file with columns corresponding to parameters and rows to events, converted from an fcs file, typically by ImmPortFCSConvLogicleTrans.",
            "choices":[],
            "kinds":["txt"],
            "name":"Input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A list of dimensions/columns to extract, specified by their indexes (starting from 1), e.g., 1,4,6. There should not be any white space characters (e.g, spaces, tabs, new lines, etc.) in the parameter value.",
            "choices":[],
            "kinds":["txt"],
            "name":"Dimension.specification",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ImmPortColSelection",
    "write":false,
    "tags":["txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00304:1"
}, "365":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[
        {
            "description":"An FCS file that shall be transformed with the Logicle transformation, converted and saved as tab-delimited text file.",
            "choices":[],
            "kinds":["FCS"],
            "name":"ImmPortFCSConvLogicleTrans1.Input.FCS.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A list of dimensions/columns to extract, specified by their indexes (starting from 1), e.g., 1,4,6. There should not be any white space characters (e.g, spaces, tabs, new lines, etc.) in the parameter value.",
            "choices":[],
            "kinds":["txt"],
            "name":"ImmPortColSelection2.Dimension.specification",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ImmPort_FLOCK_Individual_FCS",
    "write":false,
    "tags":[],
    "type":"pipeline",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.pipeline:00022:1"
}, "364":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[
        {
            "description":"An FCS file that shall be transformed with the Logicle transformation, converted and saved as tab-delimited text file.",
            "choices":[],
            "kinds":["FCS"],
            "name":"ImmPortFCSConvLogicleTrans1.Input.FCS.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A list of dimensions/columns to extract, specified by their indexes (starting from 1), e.g., 1,4,6. There should not be any white space characters (e.g, spaces, tabs, new lines, etc.) in the parameter value.",
            "choices":[],
            "kinds":["txt"],
            "name":"ImmPortColSelection2.Dimension.specification",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A tab-delimited text file with columns corresponding to parameters and rows to events. Such a text file may be generated from an FCS file by the ImmPortFCSConvLogicleTrans module.",
            "choices":[],
            "kinds":["txt"],
            "name":"ImmPortCrossSample4.Input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"ImmPort_FLOCK_CrossSample",
    "write":false,
    "tags":[],
    "type":"pipeline",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.pipeline:00021:1"
}, "363":{
    "category":"Projection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input gct file. This module does not allow missing values.",
            "choices":[],
            "kinds":["gct"],
            "name":"input.gct.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Output filename prefix. If unspecified, is set to <prefix of input.gct.file>.PROJ.",
            "choices":[],
            "kinds":[],
            "name":"output.file.prefix",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Gene sets database from GSEA website.",
            "choices":["c1.all.v3.0.symbols.gmt=c1.all.v3.0.symbols.gmt [Positional]", "c1.all.v3.0.entrez.gmt=c1.all.v3.0.entrez.gmt [Positional]", "c2.all.v3.0.symbols.gmt=c2.all.v3.0.symbols.gmt [Curated]", "c2.all.v3.0.entrez.gmt=c2.all.v3.0.entrez.gmt [Curated]", "c2.cgp.v3.0.symbols.gmt=c2.cgp.v3.0.symbols.gmt [Curated]", "c2.cgp.v3.0.entrez.gmt=c2.cgp.v3.0.entrez.gmt [Curated]", "c2.cp.v3.0.symbols.gmt=c2.cp.v3.0.symbols.gmt [Curated]", "c2.cp.v3.0.entrez.gmt=c2.cp.v3.0.entrez.gmt [Curated]", "c2.cp.biocarta.v3.0.symbols.gmt=c2.cp.biocarta.v3.0.symbols.gmt [Curated]", "c2.cp.biocarta.v3.0.entrez.gmt=c2.cp.biocarta.v3.0.entrez.gmt [Curated]", "c2.cp.kegg.v3.0.symbols.gmt=c2.cp.kegg.v3.0.symbols.gmt [Curated]", "c2.cp.kegg.v3.0.entrez.gmt=c2.cp.kegg.v3.0.entrez.gmt [Curated]", "c2.cp.reactome.v3.0.symbols.gmt=c2.cp.reactome.v3.0.symbols.gmt [Curated]", "c2.cp.reactome.v3.0.entrez.gmt=c2.cp.reactome.v3.0.entrez.gmt [Curated]", "c3.all.v3.0.symbols.gmt=c3.all.v3.0.symbols.gmt [Motif]", "c3.all.v3.0.entrez.gmt=c3.all.v3.0.entrez.gmt [Motif]", "c3.mir.v3.0.symbols.gmt=c3.mir.v3.0.symbols.gmt [Motif]", "c3.mir.v3.0.entrez.gmt=c3.mir.v3.0.entrez.gmt [Motif]", "c3.tft.v3.0.symbols.gmt=c3.tft.v3.0.symbols.gmt [Motif]", "c3.tft.v3.0.entrez.gmt=c3.tft.v3.0.entrez.gmt [Motif]", "c4.all.v3.0.symbols.gmt=c4.all.v3.0.symbols.gmt [Computational]", "c4.all.v3.0.entrez.gmt=c4.all.v3.0.entrez.gmt [Computational]", "c4.cgn.v3.0.symbols.gmt=c4.cgn.v3.0.symbols.gmt [Computational]", "c4.cgn.v3.0.entrez.gmt=c4.cgn.v3.0.entrez.gmt [Computational]", "c4.cm.v3.0.symbols.gmt=c4.cm.v3.0.symbols.gmt [Computational]", "c4.cm.v3.0.entrez.gmt=c4.cm.v3.0.entrez.gmt [Computational]", "c5.all.v3.0.symbols.gmt=c5.all.v3.0.symbols.gmt [Gene Ontology]", "c5.all.v3.0.entrez.gmt=c5.all.v3.0.entrez.gmt [Gene Ontology]", "c5.bp.v3.0.symbols.gmt=c5.bp.v3.0.symbols.gmt [Gene Ontology]", "c5.bp.v3.0.entrez.gmt=c5.bp.v3.0.entrez.gmt [Gene Ontology]", "c5.cc.v3.0.symbols.gmt=c5.cc.v3.0.symbols.gmt [Gene Ontology]", "c5.cc.v3.0.entrez.gmt=c5.cc.v3.0.entrez.gmt [Gene Ontology]", "c5.mf.v3.0.symbols.gmt=c5.mf.v3.0.symbols.gmt [Gene Ontology]", "c5.mf.v3.0.entrez.gmt=c5.mf.v3.0.entrez.gmt [Gene Ontology]"],
            "kinds":[],
            "name":"gene.sets.database",
            "numValues":"0-1",
            "defaultValue":"c1.all.v3.0.symbols.gmt",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Gene sets description file - .gmt, .gmx. Upload a gene set if your gene set is not listed as a choice for the gene sets database parameter.",
            "choices":[],
            "kinds":["gmt", "gmx"],
            "name":"gene.sets.database.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":".txt file containing list of .gmt and .gmx files. This is typically created by the ListFiles module and is used if projecting expression data to gene sets defined across multiple .gmt and .gmx files.",
            "choices":[],
            "kinds":["txt"],
            "name":"gene.sets.database.list.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Specifies the gct data column containing gene symbols. In most cases this will be \"Column 1\".",
            "choices":["Name=Column 1", "Description=Column 2"],
            "kinds":[],
            "name":"gene.symbol.column",
            "numValues":"0-1",
            "defaultValue":"Name",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Comma-separated list of gene set names on which to project expression data. Set to \"ALL\" if projecting to all defined gene sets.",
            "choices":[],
            "kinds":[],
            "name":"gene.set.selection",
            "numValues":"0-1",
            "defaultValue":"ALL",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Method used to normalize gene expression data",
            "choices":["rank", "log", "log.rank"],
            "kinds":[],
            "name":"sample.normalization.method",
            "numValues":"0-1",
            "defaultValue":"rank",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Module authors strongly recommend against changing from default.",
            "choices":[],
            "kinds":[],
            "name":"weighting.exponent",
            "numValues":"0-1",
            "defaultValue":"0.75",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"Gene sets with overlap smaller than this are excluded from the analysis.",
            "choices":[],
            "kinds":[],
            "name":"min.gene.set.size",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        }
    ],
    "name":"ssGSEAProjection",
    "write":false,
    "tags":["gct"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00270:2"
}, "369":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"An FCS file that shall be transformed with the Logicle transformation, converted and saved as tab-delimited text file.",
            "choices":[],
            "kinds":["FCS"],
            "name":"Input.FCS.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"ImmPortFCSConvLogicleTrans",
    "write":false,
    "tags":["txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00303:1"
}, "368":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input CSV file that will be converted to a a tab-delimited text file; the CSV shall contain a header with parameter names.",
            "choices":[],
            "kinds":["csv"],
            "name":"Input.CSV.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"ImmPortCSV2TXT",
    "write":false,
    "tags":["txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00306:1"
}, "367":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A tab-delimited text file with columns corresponding to parameters and rows to events. Such a text file may be generated from an FCS file by the ImmPortFCSConvLogicleTrans module.",
            "choices":[],
            "kinds":["txt"],
            "name":"Input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A text-file specifying the position of each of the cell populations. Such a text file is supposed to be generated by the ImmPortFLOCK module (file population_center.txt).",
            "choices":[],
            "kinds":["txt", "population_center.txt"],
            "name":"Centroid.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The number of iterations that the algorithm will use to match events with the closest population; values from the [1, 10] range are allowed.",
            "choices":[],
            "kinds":[],
            "name":"Number.of.iterations",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        }
    ],
    "name":"ImmPortCrossSample",
    "write":false,
    "tags":["MFI.txt", "percentage.txt", "population_id.txt", "profile.txt"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00305:1"
}, "269":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A pre-built bowtie index. Either a prebuilt or a custom Bowtie index must be specified.",
            "choices":["none=", "a_thaliana=A. Thaliana, TAIR8", "b_taurus=B. Taurus, UMD Freeze 3.0", "e_coli=E. Coli", "c_elegans_ws200=C. Elegans, WormBase WS200", "hg19=H. sapiens, UCSC hg19", "hg18=H. sapiens, UCSC hg18", "mm9=M. musculus, UCSC mm9", "mm8=M. musculus, UCSC mm8", "m_musculus_ncbi37=M. musculus, NCBI 37", "s_cerevisiae= S. cerevisiae"],
            "kinds":[],
            "name":"prebuilt.bowtie.index",
            "numValues":"0-1",
            "defaultValue":"none",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A zip file containing Bowtie index files. Either a prebuilt or a custom Bowtie index must be specified.",
            "choices":[],
            "kinds":["zip"],
            "name":"custom.bowtie.index",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Unpaired read file or first mate for paired reads. This can be a file in FASTA or FASTQ format or a ZIP archive containing FASTA or FASTQ files",
            "choices":[],
            "kinds":["fq", "fastq", "fa", "mfa", "fna", "fasta"],
            "name":"mate.1.or.unpaired.read",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Second mate for paired reads. This can be a file in FASTA or FASTQ format or a ZIP archive containing FASTA or FASTQ",
            "choices":[],
            "kinds":["fq", "fastq", "fa", "mfa", "fna", "fasta"],
            "name":"mate.2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether read characters are interpreted as colors",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"align.in.colorspace",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A zip file containing quality values for unpaired or first mate of paired CFASTA reads",
            "choices":[],
            "kinds":[],
            "name":"unpaired.or.mate.1.CFASTA.quality.values",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.file",
            "fileChoice":false
        },
        {
            "description":"A zip file containing quality values for second mate of paired CFASTA reads",
            "choices":[],
            "kinds":[],
            "name":"mate.2.CFASTA.quality.values",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Scale to use for quality values",
            "choices":["none=", "phred33", "phred64", "solexa"],
            "kinds":[],
            "name":"quality.value.scale",
            "numValues":"0-1",
            "defaultValue":"none",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Only report alignments with at most this many mismatches.",
            "choices":[],
            "kinds":[],
            "name":"max.mismatches",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Only report alignments with at most this many mismatches in the \"seed\". This value may be 0, 1, 2, 3.",
            "choices":[],
            "kinds":[],
            "name":"max.seed.mismatches",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The maximum permitted total of quality values at all mismatched read positions in the entire alignment",
            "choices":[],
            "kinds":[],
            "name":"max.total.quality.value",
            "numValues":"0-1",
            "defaultValue":"70",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The seed length. Value must be greater than or equal to 5.",
            "choices":[],
            "kinds":[],
            "name":"seed.length",
            "numValues":"0-1",
            "defaultValue":"28",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to round quality values to the nearest 10",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"round.quality.values",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The minimum insert size for valid paired-end alignments",
            "choices":[],
            "kinds":[],
            "name":"min.insert.size",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The maximum insert size for valid paired-end alignments",
            "choices":[],
            "kinds":[],
            "name":"max.insert.size",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The upstream/downstream mate orientations for a valid paired-end alignment against the forward reference strand",
            "choices":["m1r_m2r=mate1 or mate2 reverse-complement", "m1r_m2f=mate1 reverse-complement/ mate2 forward-oriented", "m1_fm2f=mate1 and mate2 forward-oriented"],
            "kinds":[],
            "name":"mate.orientation",
            "numValues":"0-1",
            "defaultValue":"m1r_m2r",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to attempt to align against the forward reference strand",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"align.to.forward.reference",
            "numValues":"0-1",
            "defaultValue":"yes",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to attempt to align against the reverse-complement reference strand",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"align.to.reverse-complement",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The random seed",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"12345678",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Report up to this valid alignments per read or pair. Specify -1 to report all alignments.",
            "choices":[],
            "kinds":[],
            "name":"report.max.alignments",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Suppress all alignments for a particular read or pair if more than this reportable alignments exist for it.",
            "choices":[],
            "kinds":[],
            "name":"suppress.alignments.max",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether reported singleton alignments are \"best\" in terms of stratum (i.e. number of mismatches, or mismatches in the seed) and in terms of the quality values at the mismatched position(s)",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"best",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"If many valid alignments exist and are reportable and they fall into more than one alignment \"stratum\", report only those alignments that fall into the best stratum.",
            "choices":["yes", "no"],
            "kinds":[],
            "name":"strata",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Launch this many parallel search threads",
            "choices":[],
            "kinds":[],
            "name":"threads",
            "numValues":"0-1",
            "defaultValue":"8",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The name of output file",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"bowtie_alignment.sam",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Bowtie.aligner",
    "write":false,
    "tags":["sam"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00237:3"
}, "268":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Expression data - .res, .gct, .odf",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"expression.data.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Class file - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"class.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Name of expression data output file",
            "choices":[],
            "kinds":[],
            "name":"expression.data.file.output.name",
            "numValues":"0-1",
            "defaultValue":"<expression.data.filename_basename>_reordered",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Name of class output file",
            "choices":[],
            "kinds":[],
            "name":"class.file.output.name",
            "numValues":"0-1",
            "defaultValue":"<class.filename_basename>_reordered",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ReorderByClass",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00033:3"
}, "267":{
    "category":"Proteomics",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input file with pre-processed MRM data in csv format",
            "choices":[],
            "kinds":["csv"],
            "name":"data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"if \"yes\", data file is a Skyline csv export including following columns: Sample (usually derived from SampleName, having identical value for all its replicates), PeptideSequence, ReplicateName, FragmentIon, PrecursorCharge, ProductCharge, light Area, heavy Area. When \"no\", input must contain sample, replicate, peptide, transition.id, area, IS.area in that order.",
            "choices":["TRUE=yes", "FALSE=no"],
            "kinds":[],
            "name":"skyline.export",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":true
        },
        {
            "description":"p-value threshold above which transition is quantification-worthy. Must be a value between 0 and 1 inclusive.",
            "choices":[],
            "kinds":[],
            "name":"pvalue.threshold",
            "numValues":"0-1",
            "defaultValue":"0.00001",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"threshold for coefficient of variation below which transition is quantification-worthy",
            "choices":[],
            "kinds":[],
            "name":"cv.threshold",
            "numValues":"0-1",
            "defaultValue":"0.2",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"calculate all possible pairs of relative ratios for a transition",
            "choices":["FALSE=no", "TRUE=yes"],
            "kinds":[],
            "name":"all.pairs",
            "numValues":"0-1",
            "defaultValue":"FALSE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"create files with intermediate results",
            "choices":["FALSE=no", "TRUE=yes"],
            "kinds":[],
            "name":"output.intermediate.results",
            "numValues":"0-1",
            "defaultValue":"FALSE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"file name prefix used for output file(s)",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<data.file_basename>-results",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"AuDIT",
    "write":false,
    "tags":["csv"],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00172:4"
}, "266":{
    "category":"RNA-seq",
    "description":"description goes here",
     "inputs":[
        {
            "description":"An indexed BAM file or zipped set of indexed BAM files to be analyzed. If you are supplying a single BAM file, it should be located in the same folder as its associated index file (BAI). (If SortSam is used to index the BAM file, then the BAM and BAI files are located in the same folder.)",
            "choices":[],
            "kinds":["zip", "bam"],
            "name":"bam.files",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A TXT format sample info file containing a sample ID, sample file name, and notes column in tab-delimited format. - .txt",
            "choices":[],
            "kinds":["txt"],
            "name":"sample.info.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether the bam file contains single end reads. Select no for paired-end reads.",
            "choices":["-singleEnd=yes", "=no"],
            "kinds":[],
            "name":"single.end",
            "numValues":"0-1",
            "defaultValue":"-singleEnd",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A file containing annotations in GTF format. Either an annotation gtf or annotation gtf file must be provided.",
            "choices":["<libdir>gencode.v3c.annotation.NCBI36.gtf=Hg 18, GenCode", "<libdir>gencode.v7.annotation.NCBI37.gtf=Hg 19, GenCode"],
            "kinds":[],
            "name":"annotation.gtf",
            "numValues":"0-1",
            "defaultValue":"<libdir>gencode.v3c.annotation.NCBI36.gtf",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A file containing annotations in GTF format. Either an annotation gtf file or annotation gtf must be provided.",
            "choices":[],
            "kinds":["gtf"],
            "name":"annotation.gtf.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A FASTA file containing a reference sequence. The reference sequence must have an index (.fai) and a sequence dictionary (.dict) either in the same location or specified in the reference sequence index and reference sequence dictionary parameters.",
            "choices":[],
            "kinds":["fasta", "fa"],
            "name":"reference.sequence",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A file containing the index for the reference sequence - .fai",
            "choices":[],
            "kinds":["fai"],
            "name":"reference.sequence.index",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A file containing the dictionary for the reference sequence. - .dict",
            "choices":[],
            "kinds":["dict"],
            "name":"reference.sequence.dictionary",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The number of top-expressed genes for which to calculate metrics.",
            "choices":[],
            "kinds":[],
            "name":"num.genes",
            "numValues":"0-1",
            "defaultValue":"1000",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Specifies the column of the GTF file in which the transcript type is specified",
            "choices":[],
            "kinds":[],
            "name":"transcript.type.field",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"A file containing the genomic coordinates of rRNA. Either an rRNA interval file or an aligned rRNA file can be provided but not both. - .list",
            "choices":[],
            "kinds":["list"],
            "name":"rRNA.interval.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A SAM file containing reads aligned to a rRNA only reference sequence which is used to estimate rRNA content. Either an aligned rRNA file or a rRNA interval file can be provided but not both. - .sam",
            "choices":[],
            "kinds":["sam"],
            "name":"rRNA.aligned.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The length of the 3� or 5� end of a transcript.",
            "choices":["10", "50", "100"],
            "kinds":[],
            "name":"transcript.end.length",
            "numValues":"0-1",
            "defaultValue":"50",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to calculate transcript-level metrics in addition to sample-level metrics.",
            "choices":["-transcriptDetails=yes", "=no"],
            "kinds":[],
            "name":"transcript.level.metrics",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"A file containing GC content for each of the transcripts. The file must be tab-delimited with 2 columns containing transcript name and GC content. The transcript name must appear in the GTF file.",
            "choices":[],
            "kinds":["txt"],
            "name":"gc.content.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Perform downsampling on the given number of reads. It randomly samples the specified number of reads in all experimental samples when calculating metrics.",
            "choices":[],
            "kinds":[],
            "name":"num.downsampling.reads",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A GCT file to use to calculate correlation between expression values (only uses first sample if gct file contains more than one sample)",
            "choices":[],
            "kinds":["gct"],
            "name":"correlation.comparison.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The prefix to use for the output file name",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<bam.files_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"RNASeQC",
    "write":false,
    "tags":["zip"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00263:2"
}, "265":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"a directory",
            "choices":[],
            "kinds":[],
            "name":"dir",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"DIRECTORY",
            "fileChoice":false
        },
        {
            "description":"",
            "choices":["=no, default", "-R=yes"],
            "kinds":[],
            "name":"recursive",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"an optional list of filename patterns, e.g. *.cls,*.gct",
            "choices":[],
            "kinds":[],
            "name":"includePattern",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"an optional list of directory name patterns to ignore, e.g. *.svn",
            "choices":[],
            "kinds":[],
            "name":"pruneDir",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"an optional flag for how to order the files",
            "choices":["=alphabetical, default", "-t=timestamp"],
            "kinds":[],
            "name":"order.by",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"",
            "choices":["=all, default", "f=file", "d=dir"],
            "kinds":[],
            "name":"type",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"the name of the output file, if none specified, write to stdout",
            "choices":[],
            "kinds":[],
            "name":"output.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ListFiles",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"0.3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00275:0.3"
}, "264":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"An FCS data file to add noise to.",
            "choices":[],
            "kinds":["fcs"],
            "name":"Input.FCS.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The output FCS file name.",
            "choices":[],
            "kinds":[],
            "name":"Output.FCS.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.FCS.data.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"List of parameters to which the module will add noise. The list may be provided as a list of indexes (e.g., \"1-3,5,7\") or as a list of parameter names (i.e., values of the $PnN keyword, such as \"FSC-H,FL1-H,FL2-A\"). By default, the noise will be added to all parameters but the Time parameter.",
            "choices":[],
            "kinds":[],
            "name":"Parameters.to.add.noise.to",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Noise level in percent. This is the maximum noise that will be added to an event based on the current event parameter value or on the maximum range of the appropriate parameter. The latter option will be effective if the Uniform noise option is selected.",
            "choices":[],
            "kinds":[],
            "name":"Noise.level",
            "numValues":"0-1",
            "defaultValue":"0.5",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"How to add the noise: Proportional (The maximum amount of noise added to each value will be based on the value itself, e.g., low values will get lower amount of noise.) or Uniform (The maximum amount of noise added to each value is only dependent on the range of the particular parameter).",
            "choices":["Proportional=Proportional, default", "Uniform=Uniform"],
            "kinds":[],
            "name":"Noise",
            "numValues":"0-1",
            "defaultValue":"Proportional",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to remove saturated events. An event is considered saturated if one or more of its parameter values are closer than 0.1 percent from the maximum range for that parameter (i.e., value of the appropriate $PnR keyword).",
            "choices":["RemoveSaturated=Remove saturated events, default", " KeepSaturated=Keep saturated events"],
            "kinds":[],
            "name":"Saturated.events",
            "numValues":"0-1",
            "defaultValue":"RemoveSaturated",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The seed to use for the random generator. Leave this blank if want to use a randomly selected seed.",
            "choices":[],
            "kinds":[],
            "name":"Random.Seed",
            "numValues":"0-1",
            "defaultValue":"1234567",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        }
    ],
    "name":"AddNoiseToFCS",
    "write":false,
    "tags":["fcs"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00179:1"
}, "250":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The dataset to display - .gct, .res, odf type=Dataset",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"dataset",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"HeatMapViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"6",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00010:6"
}, "251":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[
        {
            "description":"",
            "choices":[],
            "kinds":["res"],
            "name":"getFilesBack1.res.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"",
            "choices":[],
            "kinds":["cls"],
            "name":"getFilesBack1.cls.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"MIT_701X_processMicroArrayData.pipeline",
    "write":false,
    "tags":[],
    "type":"pipeline",
    "version":"5",
    "lsid":"urn:lsid:8080.jtriley.STARAPP.MIT.EDU:genepatternmodules:6:5"
}, "252":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[
        {
            "description":"",
            "choices":[],
            "kinds":["res"],
            "name":"getFilesBack1.res.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"",
            "choices":[],
            "kinds":["cls"],
            "name":"getFilesBack1.cls.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"MIT_701X_processOriginalData.pipeline",
    "write":false,
    "tags":[],
    "type":"pipeline",
    "version":"3",
    "lsid":"urn:lsid:8080.jtriley.STARAPP.MIT.EDU:genepatternmodules:5:3"
}, "350":{
    "category":"IGV",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Dataset to be viewed in IGV or IGV session file",
            "choices":[],
            "kinds":["bam", "bed", "cbs.txt", "clm", "cls", "cn", "Comparative Marker Selection", "csv", "Dataset", "gct", "glad", "igv", "loh", "maf", "Matrix", "sam", "res", "seg", "snp", "txt", "xcn", "xls", "xml", "zip", "gff", "gff3", "gtf", "wig", "psl", "bedgraph", "bw", "bigwig", "bb", "bigbed", "tdf", "vcf"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The index file.",
            "choices":[],
            "kinds":["bai", "sai"],
            "name":"index.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Choose the genome for your data. IGV will launch with hg19 or the last viewed genome by default.",
            "choices":["=Select a genome", "hg19=Human hg19", "b37=Human (b37)", "hg18=Human hg18", "1kg_ref=Human (1kg reference, b36)", "hg17=Human hg17", "hg16=Human hg16", "mm9=Mouse mm9", "mm8=Mouse mm8", "mm7=Mouse mm7", "panTro2=Chimp (panTro2)", "rheMac2=Rhesus (rheMac2)", "rn4=Rat (rn4)", "canFam2=Dog (canFam2)", "bosTau6=Cow (bosTau6)", "bosTau4=Cow (bosTau4)", "bosTau3=Cow (bosTau3)", "equCab2=Horse (equCab2)", "susScrofa=Sus Scrofa (9.56)", "galGal3=Chicken (galGal3)", "cavPor3=Guinea Pig (cavPor3)", "monDom5=Opossum (monDom5)", "MusPutFur1.0=Ferret (MusPutFur1.0)", "xenTro2=X. tropicalis (xenTro2)", "taeGut1=Zebra Finch (taeGut1)", "zebrafish=Zebrafish (Zv7/danRer5)", "danRer6=Zebrafish (Zv8/danRer6)", "danRer7=Zebrafish (Zv9/danRer7)", "gasAcu1=Stickleback (gasAcu1)", "Aplysia=Aplysia", "Plasmodium_3D7_v2.1=Plasmodium (3D7 v2.1)", "Plasmodium_3D7_v5.5=Plasmodium (3D7 v5.5)", "Plasmodium_6.1=Plasmodium (6.1)", "PlasmoDB_7.0=Plasmodium (3D7 V7.0)", "PlasmoDB_8.2=Plasmodium (3D7 V8.2)", "pvivax=P. vivax (7.2)", "GSM552910=S. cerevisiae (GSM552910)", "sacCer1=S. cerevisiae (sacCer1)", "sacCer2=S. cerevisiae (sacCer2)", "sacCer3=S. cerevisiae (sacCer3)", "sk1=S. cerevisiae (sk1)", "Y55=S. cerevisiae (Y55)", "sacCer62=S. cerevisiae (EF3 r62)", "spombe_709=S. pombe (7/09)", "spombe_1.55=S. pombe (EF 1.55)", "candida=C. albicans", "mg8=M. oryzae (mg8)", "spur_2.1=S.purpuratus (2.1+)", "spur_2.5=S. purpuratus (2.5)", "spur_3.0=S. purpuratus (3.0)", "WS220=C. elegans (WS220)", "WS201=C. elegans (WS201)", "ce6=C. elegans (ce6)", "ce4=C. elegans (ce4)", "dm3=D. melanogaster (dm3)", "dm2=D. melanogaster (dm2)", "dmel_5.9=D. melanogaster (5.9)", "dmel_r5.22=D. melanogaster (r5.22)", "dmel_r5.33=D. melanogaster (r5.33)", "tcas_2.0=T. castaneum (2.0)", "tcas_3.0=T. castaneum (3.0)", "ncrassa_v3=Neurospora crassa (v3)", "nc10=N. crassa OR74A (NC10)", "Glamblia_2.0=G. lamblia (2.0)", "me49=T. gondii (ME49)", "tb927=T. brucei (927 v2.5)", "tbrucei927_4.0=T. brucei (927 v4.0)", "tbgambi=T. brucei gambiense", "tbgambi_4.0=T. brucei gambiense (v4.0)", "lmjr=L. major Friedlin", "lmjr_4.0=L. major Friedlin (v4.0)", "anidulans_4.1=A. nidulans (4.1)", "NC_009012=C. thermocellum (NC_009012)", "NC_002929=B. pertussis (Tohama I NC_002929.2)", "U00096.2=E. coli K-12 MG1655 (U00096.2)", "NC_000913.2=E. coli K-12 MG1655 (NC_000913.2)", "NC_002655.2=E. coli O157:H7 EDL933 (NC_002655.2)", "CSavignyi_v2.1=C. savignyi (v2.1 reftigs)", "tair8=A. thaliana (TAIR 8)", "tair9=A. thaliana (TAIR 9)", "tair10=A. thaliana (TAIR 10)", "O_Sativa_r6=O. Sativa (release 6)", "osativa_6.1=O. Sativa (release 6.1)", "osativa_7=O. Sativa (release 7)", "B73=Maize (B73 4a.53)", "ZmB73_5a=Maize (ZmB73 5a)", "ITAG2.3=Tomato (ITAG2.3)", "ppatens_1.2=P. patens (V 1.2)", "D.discoideum=D. discoideum (05-13-2009)", "Foxy4287=Foxy4287"],
            "kinds":[],
            "name":"genomeId",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Provide a locus or gene of interest for your data. IGV will launch on chr1 or the last viewed chromosome by default. (e.g. chr1:2000-3000 or egfr)",
            "choices":[],
            "kinds":[],
            "name":"locus",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"IGV",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00170:4"
}, "351":{
    "category":"Prediction",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Gene expression data set (.gct)",
            "choices":[],
            "kinds":["gct"],
            "name":"input.exp.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"List of marker genes (.txt): Probe ID, Gene name, Class (1,2,...), Weight (optional)",
            "choices":[],
            "kinds":["txt"],
            "name":"input.features.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Name for output files",
            "choices":[],
            "kinds":[],
            "name":"output.name",
            "numValues":"0-1",
            "defaultValue":"NTP",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Distance metric",
            "choices":["cosine=cosine", "correlation=correlation"],
            "kinds":[],
            "name":"distance.selection",
            "numValues":"0-1",
            "defaultValue":"cosine",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Weight genes? (by statistic, fold change, etc. only for 2 classes)",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"weight.genes",
            "numValues":"0-1",
            "defaultValue":"T",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"# resampling to generate null distribution for distance metric",
            "choices":[],
            "kinds":[],
            "name":"num.resamplings",
            "numValues":"0-1",
            "defaultValue":"1000",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Create .gct and .cls files for GenePattern",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"GenePattern.output",
            "numValues":"0-1",
            "defaultValue":"F",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Random seed",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"7392854",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        }
    ],
    "name":"NearestTemplatePrediction",
    "write":false,
    "tags":["gct", "png", "txt", "xls", "cls"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00166:3"
}, "353":{
    "category":"Proteomics",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input file with pre-processed MRM data in csv format",
            "choices":[],
            "kinds":["csv"],
            "name":"data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"if \"yes\", data file is a Skyline csv export including following columns: Sample (usually derived from SampleName, having identical value for all its replicates), PeptideSequence, ReplicateName, FragmentIon, PrecursorCharge, ProductCharge, light Area, heavy Area. When \"no\", input must contain sample, replicate, peptide, transition.id, area, IS.area in that order.",
            "choices":["TRUE=yes", "FALSE=no"],
            "kinds":[],
            "name":"skyline.export",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":true
        },
        {
            "description":"p-value threshold above which transition is quantification-worthy. Must be a value between 0 and 1 inclusive.",
            "choices":[],
            "kinds":[],
            "name":"pvalue.threshold",
            "numValues":"0-1",
            "defaultValue":"0.00001",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"threshold for coefficient of variation below which transition is quantification-worthy",
            "choices":[],
            "kinds":[],
            "name":"cv.threshold",
            "numValues":"0-1",
            "defaultValue":"0.2",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"calculate all possible pairs of relative ratios for a transition",
            "choices":["FALSE=no", "TRUE=yes"],
            "kinds":[],
            "name":"all.pairs",
            "numValues":"0-1",
            "defaultValue":"FALSE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"create files with intermediate results",
            "choices":["FALSE=no", "TRUE=yes"],
            "kinds":[],
            "name":"output.intermediate.results",
            "numValues":"0-1",
            "defaultValue":"FALSE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"file name prefix used for output file(s)",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<data.file_basename>-results",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"AuDIT",
    "write":false,
    "tags":["csv"],
    "type":"module",
    "version":"5",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00172:5"
}, "352":{
    "category":"Preprocess & Utilities",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input dataset - .gct, .res",
            "choices":[],
            "kinds":["res", "gct"],
            "name":"input.dataset.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"class template - .cls",
            "choices":[],
            "kinds":["cls"],
            "name":"cls.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"whether to split the data using a percentage split or cross validation approach",
            "choices":["random=percentage split", "CV=cross-validation"],
            "kinds":[],
            "name":"split.method",
            "numValues":"0-1",
            "defaultValue":"random",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"whether to create splits stratified with respect to the class template",
            "choices":["T=yes", "F=no"],
            "kinds":[],
            "name":"stratified",
            "numValues":"0-1",
            "defaultValue":"T",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"number of train/test splits to generate",
            "choices":[],
            "kinds":[],
            "name":"folds",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"proportion of data to be allocated to train file when split method is percentage split (ignored when split method is cross-validation)",
            "choices":[],
            "kinds":[],
            "name":"percentage.split.proportion",
            "numValues":"0-1",
            "defaultValue":"0.5",
            "required":false,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"random number generator seed",
            "choices":[],
            "kinds":[],
            "name":"seed",
            "numValues":"0-1",
            "defaultValue":"123456",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"output saved to output.prefix.{train,test}.n.{gct|res,cls}, where n is the fold index",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<input.dataset.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"SplitDatasetTrainTest",
    "write":false,
    "tags":["gct", "cls", "res", "train.0.gct", "train.0.cls", "train.0.res", "test.0.gct", "test.0.cls", "test.0.res", "train.1.gct", "train.1.cls", "train.1.res", "test.1.gct", "test.1.cls", "test.1.res"],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00024:4"
}, "355":{
    "category":"Projection",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input file - .gct, .res, .odf",
            "choices":[],
            "kinds":["res", "gct", "Dataset"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Cluster by rows or columns",
            "choices":["1=rows", "3=columns"],
            "kinds":[],
            "name":"cluster.by",
            "numValues":"0-1",
            "defaultValue":"3",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":true
        },
        {
            "description":"stub name of the output files",
            "choices":[],
            "kinds":[],
            "name":"output.file",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"PCA",
    "write":false,
    "tags":["matrix"],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00017:4"
}, "354":{
    "category":"Clustering",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The data to be clustered (.gct, .res, .odf)",
            "choices":[],
            "kinds":["gct", "res", "Dataset"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Try K=2,3,...,kmax clusters (must be > 1)",
            "choices":[],
            "kinds":[],
            "name":"kmax",
            "numValues":"0-1",
            "defaultValue":"5",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Number of resampling iterations",
            "choices":[],
            "kinds":[],
            "name":"resampling.iterations",
            "numValues":"0-1",
            "defaultValue":"20",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Random number generator seed",
            "choices":[],
            "kinds":[],
            "name":"seed.value",
            "numValues":"0-1",
            "defaultValue":"12345",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Type of clustering algorithm",
            "choices":["HIERARCHICAL=Hierarchical", "SOM", "NMF", "KMEANS=KMeans"],
            "kinds":[],
            "name":"clustering.algorithm",
            "numValues":"0-1",
            "defaultValue":"HIERARCHICAL",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Whether to cluster by rows/genes or columns/experiments",
            "choices":["=columns", "-c=rows"],
            "kinds":[],
            "name":"cluster.by",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Distance measure",
            "choices":["EUCLIDEAN=Euclidean", "PEARSON=Pearson"],
            "kinds":[],
            "name":"distance.measure",
            "numValues":"0-1",
            "defaultValue":"EUCLIDEAN",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"resampling scheme (one of 'subsample[ratio]', 'features[nfeat]', 'nosampling')",
            "choices":[],
            "kinds":[],
            "name":"resample",
            "numValues":"0-1",
            "defaultValue":"subsample",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Ignored when algorithm other than hierarchical selected",
            "choices":["average", "complete", "single"],
            "kinds":[],
            "name":"merge.type",
            "numValues":"0-1",
            "defaultValue":"average",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Number of SOM/NMF iterations",
            "choices":[],
            "kinds":[],
            "name":"descent.iterations",
            "numValues":"0-1",
            "defaultValue":"2000",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Stub pre-pended to all the output file names",
            "choices":[],
            "kinds":[],
            "name":"output.stub",
            "numValues":"0-1",
            "defaultValue":"<input.filename_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"row-wise, column-wise, both",
            "choices":["-n1=row-wise", "-n2=column-wise", "-n3=both", "=none"],
            "kinds":[],
            "name":"normalize.type",
            "numValues":"0-1",
            "defaultValue":"-n1",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"number of row/column normalization iterations (supercedes normalize.type)",
            "choices":[],
            "kinds":[],
            "name":"normalization.iterations",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Whether to create heatmaps (one for each cluster number)",
            "choices":["=no", "-p=yes"],
            "kinds":[],
            "name":"create.heat.map",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"point size of a consensus matrix's heat map (between 1 and 20)",
            "choices":[],
            "kinds":[],
            "name":"heat.map.size",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":false,
            "type":"java.lang.Integer",
            "fileChoice":false
        }
    ],
    "name":"ConsensusClustering",
    "write":false,
    "tags":["gct", "gif", "clu", "pdf", "clsdist", "stdev"],
    "type":"module",
    "version":"6",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00030:6"
}, "357":{
    "category":"Data Format Conversion",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The SAM or BAM file",
            "choices":[],
            "kinds":["bam", "sam"],
            "name":"input.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Whether to output a fastq file per read group",
            "choices":[],
            "kinds":[],
            "name":"per.read.group",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to re-reverse bases and qualities of reads with negative strand flag set",
            "choices":[],
            "kinds":[],
            "name":"re-reverse.bases",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Whether to include non-PF reads",
            "choices":[],
            "kinds":[],
            "name":"include.non.pf.reads",
            "numValues":"0-1",
            "defaultValue":"no",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Attribute that stores the position at which the SAM record should be clipped",
            "choices":[],
            "kinds":[],
            "name":"clipping.attribute",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Action to take with clipped reads when a clipping attribute is specified",
            "choices":[],
            "kinds":[],
            "name":"clipping.action",
            "numValues":"0-1",
            "defaultValue":"none",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Value to set base qualities to when clipping action is \"change base quality values\"",
            "choices":[],
            "kinds":[],
            "name":"clipping.action.quality.value",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The fastq output file name for single-end fastq or first end of a paired fastq. Only specify when \"per read group\" is \"no\".",
            "choices":[],
            "kinds":[],
            "name":"fastq.output.prefix.1",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"The second end of a paired fastq. Only specify when \"per read group\" is \"no\".",
            "choices":[],
            "kinds":[],
            "name":"fastq.output.prefix.2",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"Picard.SamToFastq",
    "write":false,
    "tags":["fastq"],
    "type":"module",
    "version":"2",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00240:2"
}, "356":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"odf file with or without features to summarize",
            "choices":[],
            "kinds":["Prediction Features"],
            "name":"feature.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"FeatureSummaryViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.visualizer:00005:4"
}, "359":{
    "category":"Proteomics",
    "description":"description goes here",
     "inputs":[
        {
            "description":"This is a Skyline export in csv file format. The file has to include the following 10 columns with the exact column names given here (in no particular order): SampleName, PeptideSequence, ProteinName, ReplicateName, PrecursorCharge, ProductCharge, FragmentIon, AverageMeasuredRetentionTime, light Area, heavy Area. The file may contain many more columns, but it has to include at least these 10 columns",
            "choices":[],
            "kinds":[],
            "name":"skyline.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":true
        },
        {
            "description":"Concentration values given in csv file format. The file has to include the following 5 columns with the exact column names given here (in no particular order): SampleName, SampleID, Analyte Concentration, IS Conc, Concentration Ratio. Notice the single space between Analyte Concentration, IS Conc and Concentration Ratio. The space has to be maintained.",
            "choices":[],
            "kinds":[],
            "name":"concentration.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":true
        },
        {
            "description":"The title is displayed on each calibration plot",
            "choices":[],
            "kinds":[],
            "name":"title",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"User must specify the exact analyte column header name as it is appears in the input CSV file. The default is \"light Area\"",
            "choices":[],
            "kinds":[],
            "name":"analyte",
            "numValues":"0-1",
            "defaultValue":"light Area",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"User must specify the exact internal standard column header name as it is appears in the input CSV file. The default is \"heavy Area\"",
            "choices":[],
            "kinds":[],
            "name":"standard",
            "numValues":"0-1",
            "defaultValue":"heavy Area",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"If \"yes\" then generate CV (coefficient of variation) table",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"generate.cv.table",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"If \"yes\" then generate calibration curves",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"generate.calcurves",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"If \"yes\" then generate LOD/LOQ table",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"generate.lodloq.table",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"If \"yes\" then generate peak area plots",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"generate.peak.area.plots",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"If \"yes\" then use peak area ratio (PAR) for analysis (instead of concentration)",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"use.par",
            "numValues":"0-1",
            "defaultValue":"0",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The maximum value for linear scale in fmols/ul",
            "choices":[],
            "kinds":[],
            "name":"max.calcurve.linear.scale",
            "numValues":"0-1",
            "defaultValue":"150",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"The maximum value for log scale in fmols/ul",
            "choices":[],
            "kinds":[],
            "name":"max.calcurve.log.scale",
            "numValues":"0-1",
            "defaultValue":"150",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"If \"yes\" then perform AuDIT for interference detection.",
            "choices":["0=no", "1=yes"],
            "kinds":[],
            "name":"perform.audit",
            "numValues":"0-1",
            "defaultValue":"1",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"For AuDIT the threshold for coefficient of variation below which transition is quantification-worthy. Default is 0.2.",
            "choices":[],
            "kinds":[],
            "name":"audit.cv.threshold",
            "numValues":"0-1",
            "defaultValue":"0.2",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":true
        },
        {
            "description":"Prefix used for all output file names",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<skyline.file_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"QuaSAR",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00298:1"
}, "358":{
    "category":"Clustering",
    "description":"description goes here",
     "inputs":[
        {
            "description":"Input dataset (gct or res)",
            "choices":[],
            "kinds":[],
            "name":"dataset.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"Initial value of K",
            "choices":[],
            "kinds":[],
            "name":"k.initial",
            "numValues":"0-1",
            "defaultValue":"2",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Final value of K",
            "choices":[],
            "kinds":[],
            "name":"k.final",
            "numValues":"0-1",
            "defaultValue":"5",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Number of clusterings per value of K",
            "choices":[],
            "kinds":[],
            "name":"num.clusterings",
            "numValues":"0-1",
            "defaultValue":"20",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Maximum number of NMF iterations per clustering",
            "choices":[],
            "kinds":[],
            "name":"max.num.iterations",
            "numValues":"0-1",
            "defaultValue":"2000",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Error function",
            "choices":["divergence", "euclidean"],
            "kinds":[],
            "name":"error.function",
            "numValues":"0-1",
            "defaultValue":"divergence",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Seed for random number generator",
            "choices":[],
            "kinds":[],
            "name":"random.seed",
            "numValues":"0-1",
            "defaultValue":"123456789",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Prefix to append to all output files",
            "choices":[],
            "kinds":[],
            "name":"output.file.prefix",
            "numValues":"0-1",
            "defaultValue":"<dataset.filename_basename>",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"How many \"no change\" checks are needed to stop NMF iterations before max iterations is reached(convergence)",
            "choices":[],
            "kinds":[],
            "name":"stop.convergence",
            "numValues":"0-1",
            "defaultValue":"40",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        },
        {
            "description":"Frequency (NMF iterations) of \"no change\" checks",
            "choices":[],
            "kinds":[],
            "name":"stop.frequency",
            "numValues":"0-1",
            "defaultValue":"10",
            "required":true,
            "type":"java.lang.Integer",
            "fileChoice":false
        }
    ],
    "name":"NMFConsensus",
    "write":false,
    "tags":["membership.gct", "cophenetic.txt", "cophenetic.plot.pdf", "consensus.k.2.gct", "consensus.k.3.gct", "consensus.k.4.gct", "consensus.k.5.gct"],
    "type":"module",
    "version":"5",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00057:5"
}, "258":{
    "category":"Data Format Conversion",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A CSV file to be converted to FCS.",
            "choices":[],
            "kinds":["csv"],
            "name":"Input.CSV.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The name of the output FCS file.",
            "choices":[],
            "kinds":[],
            "name":"Output.FCS.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.CSV.data.file_basename>.fcs",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Value of the $PnR keyword for all parameters. By default, this tool will try to set the best settings based on the data in the file; use \"auto\", \"auto-exact\", \"BD\", or an integer value.",
            "choices":[],
            "kinds":[],
            "name":"Range",
            "numValues":"0-1",
            "defaultValue":"auto",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Value of the $DATATYPE keyword. By default, this tool will try to set the best settings based on the data in the input CSV file.",
            "choices":["auto=auto, default", "int=integer", "float=floating point"],
            "kinds":[],
            "name":"Data.type",
            "numValues":"0-1",
            "defaultValue":"auto",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":true
        }
    ],
    "name":"CsvToFcs",
    "write":false,
    "tags":["fcs"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00174:1"
}, "257":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"A FCS data file to add parameters to.",
            "choices":[],
            "kinds":["fcs"],
            "name":"Input.fcs.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"A CSV file with parameters and values to add.",
            "choices":[],
            "kinds":["csv"],
            "name":"Input.csv.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The output FCS file name.",
            "choices":[],
            "kinds":[],
            "name":"Output.file.name",
            "numValues":"0-1",
            "defaultValue":"<Input.fcs.data.file_basename>_with_extra_params.fcs",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"AddFCSParameter",
    "write":false,
    "tags":["FCS", "fcs"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00198:1"
}, "259":{
    "category":"Flow Cytometry",
    "description":"description goes here",
     "inputs":[
        {
            "description":"The input FCS data file; one or more data sets will be extracted from this file.",
            "choices":[],
            "kinds":["fcs"],
            "name":"Input.data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"The name for the output file. Uses the input data file name (for example, name.fcs) as the default, and adds _datasetIndex to the name (e.g., name_datasetIndex.fcs).",
            "choices":[],
            "kinds":[],
            "name":"Output.file.name",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"A list of data set indexes to be extracted from the data file (e.g., 1-3, 5, 8). The first data set has the index 1, the second the index 2, etc. All data sets will be extracted if no indexes are provided.",
            "choices":[],
            "kinds":[],
            "name":"Dataset.indexes",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"ExtractFCSDataset",
    "write":false,
    "tags":["fcs"],
    "type":"module",
    "version":"1",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00182:1"
}, "254":{
    "category":"pipeline",
    "description":"description goes here",
     "inputs":[
        {
            "description":"",
            "choices":[],
            "kinds":["res"],
            "name":"MIT_701X_getFilesBack1.res.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"",
            "choices":[],
            "kinds":["cls"],
            "name":"MIT_701X_getFilesBack1.cls.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"MIT_701X_processClusteringData.pipeline",
    "write":false,
    "tags":[],
    "type":"pipeline",
    "version":"5.1",
    "lsid":"urn:lsid:8080.jtriley.STARAPP.MIT.EDU:genepatternmodules:11:5.1"
}, "253":{
    "category":"Visualizer",
    "description":"description goes here",
     "inputs":[
        {
            "description":"",
            "choices":[],
            "kinds":["txt"],
            "name":"input.filename",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        }
    ],
    "name":"MIT_701X_OriginalDataViewer",
    "write":false,
    "tags":[],
    "type":"visualizer",
    "version":"2",
    "lsid":"urn:lsid:8086.jtriley.starapp.mit.edu:genepatternmodules:11:2"
}, "256":{
    "category":"caBIG",
    "description":"description goes here",
     "inputs":[
        {
            "description":"URL for caArray server.",
            "choices":[],
            "kinds":[],
            "name":"url",
            "numValues":"0-1",
            "defaultValue":"http://array.nci.nih.gov:8080",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Title or identifier of the caArray experiment to import data from.",
            "choices":[],
            "kinds":[],
            "name":"experiment",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Type of bioassay data to be retrieved.",
            "choices":["RAW", "DERIVED"],
            "kinds":[],
            "name":"type",
            "numValues":"0-1",
            "defaultValue":"RAW",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"Data file extension to be retrieved.",
            "choices":[],
            "kinds":[],
            "name":"extension",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Name of the zip file to be created.",
            "choices":[],
            "kinds":[],
            "name":"zipFileName",
            "numValues":"0-1",
            "defaultValue":"<experiment>.zip",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Username for caArray server",
            "choices":[],
            "kinds":[],
            "name":"username",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"java.lang.String",
            "fileChoice":false
        },
        {
            "description":"Password for caArray server",
            "choices":[],
            "kinds":[],
            "name":"password",
            "numValues":"0-1",
            "defaultValue":"",
            "required":false,
            "type":"PASSWORD",
            "fileChoice":false
        }
    ],
    "name":"CaArray2.3.0Importer",
    "write":false,
    "tags":[],
    "type":"module",
    "version":"4",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00171:4"
}, "255":{
    "category":"Proteomics",
    "description":"description goes here",
     "inputs":[
        {
            "description":"input file with pre-processed MRM data in csv format",
            "choices":[],
            "kinds":["csv"],
            "name":"data.file",
            "numValues":"0-1",
            "defaultValue":"",
            "required":true,
            "type":"java.io.File",
            "fileChoice":false
        },
        {
            "description":"if \"yes\", data file is a Skyline csv export including following columns: Sample (usually derived from SampleName, having identical value for all its replicates), PeptideSequence, ReplicateName, FragmentIon, PrecursorCharge, ProductCharge, light Area, heavy Area. When \"no\", input must contain sample, replicate, peptide, transition.id, area, IS.area in that order.",
            "choices":["TRUE=yes", "FALSE=no"],
            "kinds":[],
            "name":"skyline.export",
            "numValues":"0-1",
            "defaultValue":"TRUE",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":true
        },
        {
            "description":"p-value threshold above which transition is quantification-worthy. Must be a value between 0 and 1 inclusive.",
            "choices":[],
            "kinds":[],
            "name":"pvalue.threshold",
            "numValues":"0-1",
            "defaultValue":"0.00001",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"threshold for coefficient of variation below which transition is quantification-worthy",
            "choices":[],
            "kinds":[],
            "name":"cv.threshold",
            "numValues":"0-1",
            "defaultValue":"0.2",
            "required":true,
            "type":"java.lang.Float",
            "fileChoice":false
        },
        {
            "description":"calculate all possible pairs of relative ratios for a transition",
            "choices":["FALSE=no", "TRUE=yes"],
            "kinds":[],
            "name":"all.pairs",
            "numValues":"0-1",
            "defaultValue":"FALSE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"create files with intermediate results",
            "choices":["FALSE=no", "TRUE=yes"],
            "kinds":[],
            "name":"output.intermediate.results",
            "numValues":"0-1",
            "defaultValue":"FALSE",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":true
        },
        {
            "description":"file name prefix used for output file(s)",
            "choices":[],
            "kinds":[],
            "name":"output.prefix",
            "numValues":"0-1",
            "defaultValue":"<data.file_basename>-results",
            "required":true,
            "type":"java.lang.String",
            "fileChoice":false
        }
    ],
    "name":"AuDIT",
    "write":false,
    "tags":["csv"],
    "type":"module",
    "version":"3",
    "lsid":"urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00172:3"
}}
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<!-- /*
 The Broad Institute
 SOFTWARE COPYRIGHT NOTICE AGREEMENT
 This software and its documentation are copyright (2003-2009) by the
 Broad Institute/Massachusetts Institute of Technology. All rights are
 reserved.
 
 This software is supplied without any warranty or guaranteed support
 whatsoever. Neither the Broad Institute nor MIT can be responsible for its
 use, misuse, or functionality.
 */ -->

<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:fn="http://java.sun.com/jsp/jstl/functions"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:t="http://myfaces.apache.org/tomahawk"
	xmlns:c="http://java.sun.com/jstl/core">
<ui:composition template="/templates/common.xhtml">
	<ui:define name="pageTitle">
		GenePattern | Job #{jobStatusBean.jobInfo.jobNumber}
	</ui:define>
	<ui:define name="headText">
		
		<link href="#{facesContext.externalContext.requestContextPath}/css/GP_DK.css" rel="stylesheet" type="text/css" />
		<!-- Dependency -->
		<script src="/gp/js/YUI/yahoo/yahoo-min.js"></script>
		
		<!-- Used for Custom Events and event listener bindings -->
		<script src="/gp/js/YUI/event/event-min.js"></script>
		
		<!-- Source file -->
		<script src="/gp/js/YUI/connection/connection-min.js"></script>
			
		<script type="text/javascript">

		var currentJobNumber = #{jobInfoBean.jobNumber};

		function setEmailNotification(cb, jobId, userId, userEmail){
            var valid = userEmail != null &amp;&amp; userEmail.length > 0;
		    if (valid) {
			    valid = jcv_checkEmail(userEmail);
		    }
		    if (!valid) {
		        var em = prompt("Email on completion to?:");
		        if (em == null){
		            cb.checked = false;
		            return;
		        } 
		        else {
		            userEmail = em;
		            valid = jcv_checkEmail(userEmail);
		            if (!valid){
		                cb.checked = false;
		                alert(userEmail + ' is not a valid email address');
		                return;
		            }
		        }
		    }
		    if (cb.checked) {
		        requestEmailNotification(cb, jobId, userEmail);
		    }
		    else {
		        cancelEmailNotification(cb, jobId, userEmail);
		    }
		}	

        function setShowExecutionLogs(cb, jobNumber) {
            var action = cb.checked ? 'showExecutionLogs' : 'hideExecutionLogs';
            var opt = {
                    method:    'post',
                    postBody:  '',
                    onSuccess:  function(response) {
                                    location.reload();
                                },
                    onFailure: function(t) {
                        cb.checked = false;
                        alert('Error ' + t.status + ': Problem with Show Execution Logs checkbox');
                    }
            } 
            new  Ajax.Request('/gp/jobResults/'+jobNumber+'/'+action,opt);
        }
		
		var openVisualizers = #{jobStatusBean.openVisualizers};
		
		/* <![CDATA[ */	
		
		var handlePermSuccess = function(o){
			if(o.responseText !== undefined){
				var data = eval('(' + o.responseText + ')');
				if (data.success) {
					document.getElementById("permissionsWorkingImage").src = '/gp/images/complete.gif';
					if (data.isShared) {
						document.getElementById("permissionsIcon").src = "/gp/images/lockOpen.gif";
					} else {
						document.getElementById("permissionsIcon").src = "/gp/images/lock.gif";
					}
				} else {
					document.getElementById("permissionsWorkingImage").src = '/gp/images/error.gif';
				}
			}
		}
		
		var handlePermFailure = function(o){
			alert("permissions request failed");
			document.getElementById("permissionsWorkingImage").src = '/gp/images/error.gif';
		}
		
		var permCallback =
		{
		  success: handlePermSuccess,
		  failure: handlePermFailure
		  
		};
		
		function submitPermissionsRequest(form) {
			document.getElementById("permissionsWorkingImage").style.display = '';
			document.getElementById("permissionsWorkingImage").src = '/gp/images/spin.gif';
			var permPostData = getPermissionsPostData(form);
			
			var request = YAHOO.util.Connect.asyncRequest('POST', '/gp/jobResults/'+currentJobNumber+'/setPermissions', permCallback, permPostData);
		}
		
		function getPermissionsPostData(form) {
			var postInfo = "jobNumber=" + currentJobNumber + "&";
			for( var i = 0; i < form.elements.length; i++ ) 
			{ 
   				if (form.elements[i].type == "radio" &&  form.elements[i].checked) {
   					postInfo += form.elements[i].name + "=" + form.elements[i].value + "&";
   				}
 			} 
 			return postInfo;
		}
		
			function toggle(id, openLabel, closedLabel) {
				var open = !(document.getElementById(id).style.display == 'none');
				document.getElementById(id).style.display = open ? 'none' : '';
				if (openLabel) {
					document.getElementById(id + "Label").innerHTML = open ? closedLabel : openLabel;
				}
			}
			
			var handleUpdateSuccess = function(o){
				if(o.responseText !== undefined){
					var data = eval('(' + o.responseText + ')');
					var status = data.status;
					var jobNumber = data.jobNumber;
					updateStatus(data, status);
					
					if (data.isPipeline && data.children) {
						updateChildren(data);
					}
					
					document.getElementById('responseArea').value = o.responseText;
					if (status != 'Finished' && status != 'Error' && document.getElementById('keepUpdating').checked) {
						setTimeout("updatePage();", 2500);
					} else {
						createOutputFiles(data);
						// remove the email reminder button if it's there
						if (document.getElementById('emailDiv')) {
							document.getElementById('emailDiv').style.display = 'none';
						}
						
					}
				}
			}
			
			var handleUpdateFailure = function(o){
				setTimeout("updatePage();", 2500);
			}
			
			var updateCallback =
			{
			  success: handleUpdateSuccess,
			  failure: handleUpdateFailure
			  
			};
			
			function updatePage() {
				var request = YAHOO.util.Connect.asyncRequest('GET', '#{jobStatusBean.jobInfo.jobNumber}?returnType=JSON', updateCallback);
			} 
			
			function updateChildren(parent) {
				for (var i = 0; i < parent.children.length; i++) {
					if (document.getElementById("jobTable"+parent.children[i].jobNumber)) {
						updateChild(parent.children[i], i, parent);
					} else {
						createChild(parent.children[i], i, parent);
					}
				}	
			}
			
			function createRegularTable(id, className) {
				var table = document.getElementById("testTable").cloneNode(false);
				table.id = id;
				table.className = className;
				//table.cellpadding = '0';
				//table.cellspacing = '0';
				//table.border = '0';
				table.style.display = '';
				return table;
			}
			
			function createChild(child, index, parent) {
				// create overall job container
				var div = document.createElement('div');
				div.id = 'jobContainer' + child.jobNumber;
				document.getElementById('jobContainer' + parent.jobNumber).appendChild(div);
				var table = createRegularTable('jobTable' + child.jobNumber, 'module');
				div.appendChild(table);
				
				
				var row = table.insertRow(table.rows.length);
				var cell = row.insertCell(row.cells.length);
				for (var i = 1; i < child.numAncestors; i++) {
					addSpacer(cell);
				}
				addImage(cell, "/gp/images/darkArrow.gif");
				cell.appendChild(document.createTextNode(' step ' + child.stepPath + ': ' + child.truncatedTaskName + '[id: ' + child.jobNumber + ']' ));
				cell = row.insertCell(row.cells.length);
				if (child.inputParameters && child.inputParameters.length > 0) {
					var iconDiv = document.createElement("div");
					iconDiv.className = 'icon2';
					var inputParamTable = createRegularTable('', '');
					var row2 = inputParamTable.insertRow(inputParamTable.rows.length);
					var cell2 = row2.insertCell(row2.cells.length);
					var link = document.createElement('a');
					link.style.color = '#0066FF';
					link.href = "javascript:toggle('inputParamsDiv" + child.jobNumber + "', 'Hide', 'Show');";
					var inputIcon = addImage(link, "/gp/images/parameters.gif");
					inputIcon.align = 'left';
					cell2.appendChild(link);
					cell2 = row2.insertCell(row2.cells.length);
					link = document.createElement('a');
					link.href = "javascript:toggle('inputParamsDiv" + child.jobNumber + "', 'Hide', 'Show');";
					var span = document.createElement('span');
					span.innerHTML = 'Show';
					span.id = "inputParamsDiv" + child.jobNumber + "Label";
					link.appendChild(span);
					link.appendChild(document.createTextNode(" Input "));
					link.appendChild(document.createElement("br"));
					link.appendChild(document.createTextNode("Parameters"));
					cell2.appendChild(link);
					iconDiv.appendChild(inputParamTable);
					cell.appendChild(iconDiv);
				}
				
				cell = row.insertCell(row.cells.length);
				cell.width = '30px';
				var img = document.createElement('img');
				img.id = "jobStatusIcon" + child.jobNumber;
				if (child.status == 'Error') {
					img.src = "/gp/images/error.gif";
				} else if (child.status == 'Finished') {
				 	img.src = "/gp/images/complete.gif";
				} else {
					img.src = "/gp/images/spin.gif";
				}
				cell.appendChild(img);
				var statusSpan = document.createElement('span');
				statusSpan.id = 'jobStatus' + child.jobNumber;
				statusSpan.style.display = 'none';
				statusSpan.innerHTML = child.status;
				cell.appendChild(statusSpan);			
				
				if (child.isPipeline) {
					var indicator = createIndicator(child);
					div.appendChild(indicator);
				}
				//createInputParams(child);
				//createInputFiles(child);			
				
				//if (child.status == 'Finished') {
			//		createOutputFiles(child);
				//}		
				tagIndicatorCell(child, index, parent);
				
				// create input parameters
				if (child.inputParameters && child.inputParameters.length > 0) {
					var inputParameters = createInputParameters(child);
					div.appendChild(inputParameters);
				}
				
				// create outputFileDiv
				var outputFileDiv = document.createElement('div');
				outputFileDiv.id = 'outputFilesDiv' + child.jobNumber;
				outputFileDiv.className = 'files';
				div.appendChild(outputFileDiv);
				
				createInputFiles(child);
				
				if ((child.status == 'Error' || child.status == 'Finished')) {
					createOutputFiles(child);
				}
						
				var fileMenusDiv = document.createElement('div');
				fileMenusDiv.id = 'fileMenus' + child.jobNumber;
				div.appendChild(fileMenusDiv);
				
						
				// update the children
				if (child.isPipeline && child.children) {
					updateChildren(child);
				}
			}
			
			function createIndicator(child) {
				var table = createRegularTable('indicator' + child.jobNumber, 'indicator');
				var row = table.insertRow(table.rows.length);
				for (var i = 0; i < child.numSteps; i++) {
					var cell = row.insertCell(row.cells.length);
					if (i < child.numStepsCompleted) {
						cell.id = 'indicatorCell' + child.children[i].jobNumber;
						if (child.children[i].status == 'Error') {
							cell.innerHTML = '&nbsp;';
							cell.className = 'red';
						} else if (child.children[i].status == 'Finished') {
							cell.innerHTML = '&nbsp;';
							cell.className = 'blue';
						} else {
							cell.innerHTML = '&nbsp;';
							cell.className = 'green';
						}
					} else {
						cell.innerHTML = '&nbsp;';
						cell.className = 'green';
					} 
				}
				return table;
			}
			
			function updateChild(child, index, parent) {
				var status = document.getElementById("jobStatus"+child.jobNumber).innerHTML;
				if (status == 'Processing' && child.status != 'Processing') {
					createOutputFiles(child);
				}
				updateStatus(child, child.status);
				// if there's an indicator cell, update it, else create it
				if (document.getElementById("indicatorCell"+child.jobNumber)) {
					var indicatorCell = document.getElementById("indicatorCell"+child.jobNumber);
					indicatorCell.className = child.status == 'Error' ? "red" : (child.status == 'Finished' ? "blue" : "green");
				} else {
					tagIndicatorCell(child, index, parent);
				}
				
				// update the children
				if (child.isPipeline && child.children) {
					updateChildren(child);
				}
			}
			
			function tagIndicatorCell(child, index, parent) {
				var indicatorTable = document.getElementById('indicator' + parent.jobNumber);
				indicatorTable.rows[0].cells[index].id = 'indicatorCell' + child.jobNumber;
				indicatorTable.rows[0].cells[index].className = child.status == 'Error' ? "red" : (child.status == 'Finished' ? "blue" : "green");
			}
					
			
			function updateStatus(job, status) {
				document.getElementById("jobStatusIcon"+job.jobNumber).src = (status == 'Error' ? "/gp/images/error.gif" : (status == 'Finished' ? "/gp/images/complete.gif" : "/gp/images/spin.gif"));
				document.getElementById("jobStatus"+job.jobNumber).innerHTML = status;
				
			}
			
			function addSpacer(element) {
				addImage(element, "/gp/images/blank.gif");
			}
			
			function addImage(element, src) {
				var image = document.createElement("img");
				image.src = src;
				element.appendChild(image);
				return image;
			}
			
			
			var visualizerAppletTags = new Array();
			
			function createInputFiles(job) {
				var div = document.getElementById("outputFilesDiv"+job.jobNumber);
				if (job.inputFiles) {											
					for (var i = 0; i < job.inputFiles.length; i++) {
						var p = document.createElement("p");
						p.className = 'narrow';
						for (var j = 1; j < job.numAncestors && j < 10; j++) {
							addSpacer(p);
						}
						var image = document.createElement("img");
						image.src = "/gp/images/inputFile.gif";
						image.title = 'input file';
						p.appendChild(image);
						var label = document.createElement("strong");
						label.appendChild(document.createTextNode(" " + job.inputFiles[i].name + ": "));
						p.appendChild(label);
						var link = document.createElement("a");
						link.style.color = '#0066FF';
						link.href = job.inputFiles[i].link;
						link.appendChild(document.createTextNode(job.inputFiles[i].truncatedDisplayValue));
						p.appendChild(link);
						div.appendChild(p);
				    }
				}
			}
			
			function createOutputFiles(job) {
				var div = document.getElementById("outputFilesDiv"+job.jobNumber);
				if (job.outputFiles) {	
					for (var i = 0; i < job.outputFiles.length; i++) {
						var p = document.createElement("p");
						p.className = 'narrow';
						for (var j = 1; j < job.numAncestors && j < 10; j++) {
							addSpacer(p);
						}
						var image = document.createElement("img");
						image.title = 'output file';
						image.src = "/gp/images/outputFile.gif";
						var link = document.createElement("a");
						link.style.color = '#0066FF';
						link.href = job.outputFiles[i].link;
						link.appendChild(image);
						link.appendChild(document.createTextNode(job.outputFiles[i].truncatedDisplayValue));
						p.appendChild(link);
						p.appendChild(document.createTextNode(" ("+job.outputFiles[i].formattedSize+") "));
						
						var fileMenuImage = document.createElement("img");
						fileMenuImage.src = "/gp/images/smallOptions.gif";
						fileMenuImage.name = "Image_" + job.outputFiles[i].valueId; 
			            fileMenuImage.id = "Image_" + job.outputFiles[i].valueId;
			            fileMenuImage.border = "0";
			            fileMenuImage.align = "top"; 
			            fileMenuImage.onclick = Function("pm_showMenu('menuDiv_" + job.outputFiles[i].valueId + "', Position.cumulativeOffset(this), 50, 50);"); 
			            fileMenuImage.onmouseover = Function("MM_swapImage('Image_" + job.outputFiles[i].valueId + "','','/gp/images/smallOptions2.gif',2)"); 
			            fileMenuImage.onmouseout = Function("MM_swapImgRestore();");
						p.appendChild(fileMenuImage);
						div.appendChild(p);
				    }
				}
				if (job.isVisualizer) {
					var p = document.createElement("p");
					p.className = 'narrow';
					for (var j = 1; j < job.numAncestors && j < 10; j++) {
						addSpacer(p);
					}
					var link = document.createElement('a');
					link.href = 'javascript:this.runVisualizer(' + job.jobNumber + ')';
					visualizerAppletTags[job.jobNumber] = job.visualizerAppletTag;
					var img = document.createElement('img');
					img.border = '0';
					img.src = '/gp/images/visualizer.gif';
					link.appendChild(img);
					link.appendChild(document.createTextNode(' Open Visualizer'));
					p.appendChild(link);
					div.appendChild(p);
					var span = document.createElement('span');
					span.id = 'visualizerSpan' + job.jobNumber;
					div.appendChild(span);
					if (openVisualizers) {
						runVisualizer(job.jobNumber);						
					}
				}
				// create menus for this job's files
				loadFileMenus(job.jobNumber);
			}
			
			function createInputParameters(job) {
				var div = document.createElement('div');
				div.id = 'inputParamsDiv' + job.jobNumber;
				div.className = "jobContent";
				div.style.display = 'none';
				div.appendChild(document.createElement('br'));
				
				var windowTable = createRegularTable('', 'window');
				var singleRow = windowTable.insertRow(windowTable.rows.length);
				var singleCell = singleRow.insertCell(singleRow.cells.length);
				singleCell.appendChild(document.createElement('br'));
				div.appendChild(windowTable);
				
				if (job.inputParameters) {
					
					var table = createRegularTable('', 'summary');
					table.style.backgroundColor = '#FFFFFF';
					singleCell.appendChild(table);
					
					row = table.insertRow(table.rows.length);
					var header = document.createElement('th');
					header.appendChild(document.createTextNode('Input Parameter'));
					header.style.width = '150px';
					row.appendChild(header);
					header = document.createElement('th');
					header.appendChild(document.createTextNode('Value'));
					row.appendChild(header);
					
					for (var i = 0; i < job.inputParameters.length; i++) {
						row = table.insertRow(table.rows.length);
						var cell = row.insertCell(row.cells.length);
						cell.align = 'right';
						cell.appendChild(document.createTextNode(job.inputParameters[i].name));
						cell = row.insertCell(row.cells.length);
						cell.appendChild(document.createTextNode(job.inputParameters[i].value));
					}
				} else {
					singleCell.appendChild(document.createTextNode("no input parameters"));
				}		
				
				var closeRow = windowTable.insertRow(windowTable.rows.length);
				var closeCell = closeRow.insertCell(closeRow.cells.length);
				closeCell.align = 'right';
				var link = document.createElement('a');
				link.href = "javascript:toggle('inputParamsDiv" + job.jobNumber + "', 'Hide', 'Show');";
				link.style.color = '#0066FF';
				var closeImage = document.createElement('img');
				closeImage.src = "/gp/images/cross.gif";
				link.appendChild(closeImage);
				link.appendChild(document.createTextNode(' hide'));
				closeCell.appendChild(link);
				return div;		
			}
				
			function runVisualizer(jobNumber) {
				document.getElementById("visualizerSpan" + jobNumber).innerHTML = visualizerAppletTags[jobNumber];
			}
			
		/* ]]> */
			
			<h:outputText rendered="#{jobStatusBean.jobInfo.status != 'Finished' and jobStatusBean.jobInfo.status != 'Error'}">
				YAHOO.util.Event.addListener(window, "load", function() { 
					setTimeout("updatePage();", 2500);
				});
			</h:outputText>
			
		</script>
	</ui:define>

	<ui:define name="body">

		<div class="statusReport">
		<input type="checkbox" CHECKED="true" id="keepUpdating" style="display:none;"/>
	    <input type="textarea" id="responseArea" rows="30" cols="100" style="display:none;"/>
	    
		<div style="text-align:right;">
			<h:outputText rendered="#{jobStatusBean.jobInfo.hasVisualizer}">
			To launch visualizer click <img src="/gp/images/visualizer.gif" /> icon.
			</h:outputText> To see options click <img src="/gp/images/smallOptions.gif" /> icon. For Input Parameters click <img src="/gp/images/smallParameters.gif" /> icon.</div> <br />
			<h:outputText rendered="#{not jobStatusBean.finished}">
			    <div style="float:right;margin-right:10px;" id="emailDiv">
                <h:form>
                <h:selectBooleanCheckbox value="#{jobStatusBean.sendEmailNotification}" 
                    onclick="setEmailNotification(this, #{jobStatusBean.jobInfo.jobNumber}, '#{jobStatusBean.currentUserId}', '#{jobStatusBean.currentUserEmail}');"
                /> Email Reminder 
                </h:form>
			    </div>
            </h:outputText>
		<!--   div style="float:right;margin-right:10px;"><input type="checkbox" /> Show Execution Logs</div -->
		<div style="float:right;margin-right:10px;">
		    <h:form>
		    <h:selectBooleanCheckbox value="#{jobStatusBean.showExecutionLogs}" 
		        onclick="setShowExecutionLogs(this, #{jobStatusBean.jobInfo.jobNumber});" 
		    /> Show Execution Logs
		    </h:form>
		</div>
		<br /><br />

		<div id="jobContainer#{jobStatusBean.jobInfo.jobNumber}">
		<table class="title" cellpadding="0" cellspacing="0" border="0" id="jobTable#{jobStatusBean.jobInfo.jobNumber}">
			<tr>
				<td class="title">
					#{jobStatusBean.jobInfo.jobNumber}.#{jobStatusBean.jobInfo.truncatedTaskName}
					<img src="/gp/images/smallOptions.gif"
		                 name="Image2_#{jobStatusBean.jobInfo.jobNumber}" border="0" align="top"
		                 id="Image2_#{jobStatusBean.jobInfo.jobNumber}" onclick="pm_showMenu('menuDiv_#{jobStatusBean.jobInfo.jobNumber}', Position.cumulativeOffset(this), 50, 50);"
		                 onmouseover="MM_swapImage('Image2_#{jobStatusBean.jobInfo.jobNumber}','','/gp/images/smallOptions2.gif',1)"
		                 onmouseout="MM_swapImgRestore();"/>
				</td>
				<td>
					<h:outputText rendered="#{not empty jobStatusBean.jobInfo.inputParameters}">
			    		<div class="icon2"><table cellpadding="0" border="0" cellspacing="0"><tr><td><a href="javascript:toggle('inputParamsDiv#{jobStatusBean.jobInfo.jobNumber}', 'Hide', 'Show');"><img src="/gp/images/parameters.gif" align="left" /></a></td><td><a style="color:#0066FF;" href="javascript:toggle('inputParamsDiv#{jobStatusBean.jobInfo.jobNumber}', 'Hide', 'Show');"><span id="inputParamsDiv#{jobStatusBean.jobInfo.jobNumber}Label">Show</span> Input <br/>Parameters</a></td></tr></table></div>
			    	</h:outputText>
					<h:outputText rendered="#{jobStatusBean.jobInfo.permissions.editPermissionsAllowed}">
						<div class="icon">
							<a style="color:#0066FF;" href="javascript:toggle('permissionsDiv', 'Hide', 'Edit')">
							<h:outputText rendered="#{jobStatusBean.jobInfo.permissions.shared}">
					        		<img id="permissionsIcon" src="/gp/images/lockOpen.gif" alt="" border="0" align="left" />
					        </h:outputText>
					        <h:outputText rendered="#{not jobStatusBean.jobInfo.permissions.shared}">
					        	<img id="permissionsIcon" src="/gp/images/lock.gif" alt="" border="0" align="left"/>
					        </h:outputText>
						   	<span id="permissionsDivLabel">Edit</span><br />Sharing...</a>
						</div>
					</h:outputText>
			    </td>
				<td width="30px">
					<h:outputText rendered="#{jobStatusBean.jobInfo.status != 'Finished' and jobStatusBean.jobInfo.status != 'Error'}">
						<img src="/gp/images/spin.gif" id="jobStatusIcon#{jobStatusBean.jobInfo.jobNumber}"/>
					</h:outputText>
					<h:outputText rendered="#{jobStatusBean.jobInfo.status == 'Finished'}">
						<img src="/gp/images/complete.gif" id="jobStatusIcon#{jobStatusBean.jobInfo.jobNumber}"/>
					</h:outputText>
					<h:outputText rendered="#{jobStatusBean.jobInfo.status == 'Error'}">
						<img src="/gp/images/error.gif" border="0" id="jobStatusIcon#{jobStatusBean.jobInfo.jobNumber}"/>
					</h:outputText>
					<span id="jobStatus#{jobStatusBean.jobInfo.jobNumber}" style="display: none;">#{jobStatusBean.jobInfo.status}</span>
				</td>
			</tr>
		</table>

		<h:outputText rendered="#{jobStatusBean.jobInfo.pipeline}">
			<ui:include src="jobStatus_indicator.xhtml">
		    	<ui:param name="jobInfo" value="#{jobStatusBean.jobInfo}" />
		    </ui:include>
		</h:outputText>

		<h:outputText rendered="#{jobStatusBean.jobInfo.permissions.editPermissionsAllowed}">
			<div id="permissionsDiv" style="display: none;">
				<form name="permissionsForm">
					
			        <table class="summary" cellpadding="0" cellspacing="0" border="0">
					    <tr class="summaryTitle">
					    <td width="300px">Sharing</td><td>Access</td>
					    </tr>
					    <tr>
						    <td><strong>Public</strong></td>
						    <td>
						    	<t:outputText escape="false" rendered="#{jobStatusBean.jobInfo.permissions.publicAccessPermission == 'NONE'}">
								    <input type="radio" name="jobAccessPerm:*" value="NONE" checked="checked" />None
								</t:outputText>
								<t:outputText escape="false" rendered="#{jobStatusBean.jobInfo.permissions.publicAccessPermission != 'NONE'}">
									<input type="radio" name="jobAccessPerm:*" value="NONE"  />None
								</t:outputText>
								
								<t:outputText escape="false" rendered="#{jobStatusBean.jobInfo.permissions.publicAccessPermission == 'READ'}">
								    <input type="radio" name="jobAccessPerm:*" value="READ" checked="checked" />Read Only
								</t:outputText>
								<t:outputText escape="false" rendered="#{jobStatusBean.jobInfo.permissions.publicAccessPermission != 'READ'}">
								    <input type="radio" name="jobAccessPerm:*" value="READ"  />Read Only
								</t:outputText>
								
								<t:outputText escape="false" rendered="#{jobStatusBean.jobInfo.permissions.publicAccessPermission == 'READ_WRITE'}">
									<input type="radio" name="jobAccessPerm:*" value="READ_WRITE" checked="checked" />Read and Write
								</t:outputText>
								<t:outputText escape="false" rendered="#{jobStatusBean.jobInfo.permissions.publicAccessPermission != 'READ_WRITE'}">
									<input type="radio" name="jobAccessPerm:*" value="READ_WRITE"  />Read and Write
								</t:outputText>
						    </td>
					    </tr>
					    <c:if test="#{jobStatusBean.jobInfo.permissions.numGroupAccessPermissions gt 0}">
					    <tr class="brown">
					    	<td><strong>Group</strong></td><td></td>
					    </tr>
					    <t:dataList var="groupPermission" rowIndexVar="rowIndex" value="#{jobStatusBean.jobInfo.permissions.groupAccessPermissions}">
						    <tr class="brown">
						    	<td><img src="/gp/images/arrow2.gif" />#{groupPermission.groupId}</td>
							    <td>
									<t:outputText escape="false" rendered="#{groupPermission.permission == 'NONE'}">
								    	<input type="radio" name="jobAccessPerm:#{groupPermission.groupId}" value="NONE" checked="checked" />None
								    </t:outputText>
								    <t:outputText escape="false" rendered="#{groupPermission.permission != 'NONE'}">
								        <input type="radio" name="jobAccessPerm:#{groupPermission.groupId}" value="NONE"  />None
								    </t:outputText>
								
								    <t:outputText escape="false" rendered="#{groupPermission.permission == 'READ'}">
								        <input type="radio" name="jobAccessPerm:#{groupPermission.groupId}" value="READ" checked="checked" />Read Only
								    </t:outputText>
								    <t:outputText escape="false" rendered="#{groupPermission.permission != 'READ'}">
								        <input type="radio" name="jobAccessPerm:#{groupPermission.groupId}" value="READ"  />Read Only
								    </t:outputText>
								
								    <t:outputText escape="false" rendered="#{groupPermission.permission == 'READ_WRITE'}">
								        <input type="radio" name="jobAccessPerm:#{groupPermission.groupId}" value="READ_WRITE" checked="checked" />Read and Write
								    </t:outputText>
								    <t:outputText escape="false" rendered="#{groupPermission.permission != 'READ_WRITE'}">
								        <input type="radio" name="jobAccessPerm:#{groupPermission.groupId}" value="READ_WRITE"  />Read and Write
								    </t:outputText>
							    </td>
						    </tr>
						</t:dataList>
					    </c:if>
					    <tr class="brown">
					    	<td style="whitespace: no-wrap;">
					    		<input type="button" enabled="false" onclick="submitPermissionsRequest(this.form)" value="Update Settings"/>
					    		<img style="vertical-align: middle; display: none;" src="/gp/images/spin.gif" id="permissionsWorkingImage"/>
					    	</td>
							<td align="right">
								<a style="color:#0066FF;" href="javascript:toggle('permissionsDiv', 'Hide', 'Edit')"><img src="/gp/images/cross.gif" /> hide</a>
							</td>
						</tr>
				    </table>
				    <br/>
				</form>	 
			</div>
		</h:outputText>

		<ui:include src="jobStatus_inputParams.xhtml">
	    	<ui:param name="jobInfo" value="#{jobStatusBean.jobInfo}" />
	    </ui:include>

		<ui:include src="jobStatus_files.xhtml">
	    	<ui:param name="jobInfo" value="#{jobStatusBean.jobInfo}" />
	    	<ui:param name="indent" value="#{false}" />
	    	<ui:param name="openVisualizers" value="#{jobStatusBean.openVisualizers}" />
	    </ui:include>
	    <h:form>
		    <ui:include src="jobStatus_menu.xhtml">
		    	<ui:param name="jobInfo" value="#{jobStatusBean.jobInfo}" />
		    </ui:include>
	    </h:form>
	    <div id="fileMenus#{jobStatusBean.jobInfo.jobNumber}">
        <t:dataList var="outputFile" value="#{jobStatusBean.jobInfo.outputFiles}">
	 		<h:form>
	   			<ui:include src="jobStatus_fileMenu.xhtml">
                    <ui:param name="jobNumber" value="#{jobStatusBean.jobInfo.jobNumber}"/>
                    <ui:param name="filename" value="#{outputFile.name}" />
                    <ui:param name="deleteAllowed" value="#{false}"/>
                    <ui:param name="value" value="#{outputFile.link}"/>
	       			<ui:param name="valueId" value="#{outputFile.valueId}"/>
                    <ui:param name="moduleMenuItems" value="#{outputFile.moduleMenuItems}"/>
	   			</ui:include>
	  		</h:form>
	  	</t:dataList>
	  	<t:dataList var="inputFile" value="#{jobStatusBean.jobInfo.inputFiles}" rowIndexVar="fileindex">
	 		<h:form>
	   			<ui:include src="jobStatus_fileMenu.xhtml">
                    <ui:param name="jobNumber" value="#{jobStatusBean.jobInfo.jobNumber}"/>
                    <ui:param name="filename" value="#{inputFile.name}" />
                    <ui:param name="deleteAllowed" value="#{false}"/>
                    <ui:param name="value" value="#{inputFile.link}"/>
                    <ui:param name="valueId" value="#{inputFile.valueId}"/>
                    <ui:param name="moduleMenuItems" value="#{inputFile.moduleMenuItems}"/>
	   			</ui:include>
	   		</h:form>		
	  	</t:dataList>
	  	</div>
	    <h:outputText rendered="#{jobStatusBean.jobInfo.pipeline}">
			<t:dataList var="child" value="#{jobStatusBean.allSteps}" rowIndexVar="idx">
				<h:outputText rendered="#{idx gt 0}">
		    		<ui:include src="jobStatus_child.xhtml">
				    	<ui:param name="jobInfo" value="#{child}" />
				    </ui:include>
			    </h:outputText>
	    	</t:dataList>
	   	</h:outputText>
	    </div>
	    
	    
	    <br/>
	    <br/>
	    
	    <h:outputText rendered="#{not empty jobStatus.jobInfo.purgeDate}">
	    	<b>These job results are scheduled to be purged from the server on #{jobStatus.jobInfo.formattedPurgeDate}</b>
	    </h:outputText>
	    
	    </div>
	    <table cellpadding="0" cellspacing="0" border="0" style="display: none;" id="testTable">
	    	<tr><td></td></tr>
	    </table>
	    <br/><br/>
	     
	     <script type="text/javascript">
	     /* <![CDATA[ */	
	     	var handleMenuSuccess = function(o){
				if(o.responseText !== undefined){
					//alert (o.responseText);
					document.getElementById('fileMenus'+o.argument[0]).innerHTML = o.responseText;
					
					//pm_showMenu('menuDiv_C:\Program Files\GenePatternServer\Tomcat\webapps\gp\jobResults\821\all_aml_test.preprocessed.preprocessed.gct', Position.cumulativeOffset(document.getElementById('testFileMenu')), 50, 50);
				}
			}
			
			var handleMenuError = function(o){
				alert("menu request failed");
			}
			
			var menuCallback =
			{
			  success: handleMenuSuccess,
			  failure: handleMenuError
			  
			};
			
			function loadFileMenus(jobNumber) {
				var menuPostData = "jobNumber="+jobNumber;
				menuCallback.argument = [jobNumber];
				var request = YAHOO.util.Connect.asyncRequest('POST', '/gp/pages/jobStatus_fileMenuJSON.jsf', menuCallback, menuPostData);
			}
	     	/* ]]> */
	     </script>
	     
	</ui:define>
	
</ui:composition>
</html>

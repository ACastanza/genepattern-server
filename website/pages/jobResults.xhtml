<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<!-- /*
 The Broad Institute
 SOFTWARE COPYRIGHT NOTICE AGREEMENT
 This software and its documentation are copyright (2003-2008) by the
 Broad Institute/Massachusetts Institute of Technology. All rights are
 reserved.
 
 This software is supplied without any warranty or guaranteed support
 whatsoever. Neither the Broad Institute nor MIT can be responsible for its
 use, misuse, or functionality.
 */ -->

<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:t="http://myfaces.apache.org/tomahawk"
	xmlns:c="http://java.sun.com/jstl/core" charset="UTF-8">
<ui:composition template="/templates/common.xhtml">
	<ui:define name="pageTitle">
		GenePattern | Job Results
	</ui:define>
	<ui:define name="headText">
		<link
			href="#{facesContext.externalContext.requestContextPath}/css/style-jobresults.css"
			rel="stylesheet" type="text/css" />
		<script type="text/javascript"
			src="#{facesContext.externalContext.requestContextPath}/js/jobResults.js" />
		<script type="text/javascript"
			src="#{facesContext.externalContext.requestContextPath}/js/collapsiblePanel.js" />
		<script type="text/javascript" language="javascript">

/* <![CDATA[ */

    function getContext() {
      return '#{facesContext.externalContext.requestContextPath}';
    }

    var jobNumbers = new Array();
    var fileRows = new Object();

    function addFileRow(jobNumber, fileRowId) {
      var rowIds = fileRows[jobNumber];
      if(rowIds == null) {
        rowIds = new Array();
        fileRows[jobNumber] = rowIds;
      }
      rowIds[rowIds.length] = fileRowId;
    }

    function toggleJobCheckboxes(jobNo)
    {
      var jobCheckboxDiv = $("cb_job_" + jobNo);
      var jobCheckbox = jobCheckboxDiv.getElementsByTagName("input")[0];
      var isChecked = jobCheckbox.checked;
      var rowIds = fileRows[jobNo];
      if(rowIds != null) {
        for(var i=0; i<rowIds.length; i++) {
          var row = document.getElementById(rowIds[i]);
          var elements = row.getElementsByTagName("input");
          for(var j=0; j<elements.length; j++) {
            if(elements[j].type == "checkbox") {
               elements[j].checked = isChecked;
            }
          }
        }
      }
    }

    function toggleAllCheckboxes(maincheckbox)
    {
      var isChecked = maincheckbox.checked;
      for(var i=0; i<jobNumbers.length; i++) {
        var jobNo = jobNumbers[i];
        var jobCheckboxDiv = $("cb_job_" + jobNo);
        var jobCheckbox = jobCheckboxDiv.getElementsByTagName("input")[0];
        jobCheckbox.checked = isChecked;
        toggleJobCheckboxes(jobNumbers[i]);
      }
    }

    function toggleVisibility(jobNo) {
      var hiddenField = $("expansion_state_" + jobNo);
      if(hiddenField.value == "false")
      {
        showCategory(jobNo);
       }
      else
      {
        hideCategory(jobNo);
      }
    }

    function hideCategory( jobNo ) {
      $("expansion_state_" + jobNo).value = "false";

      var downArrow = document.getElementById(jobNo + "_expanded_img");
      var rightArrow = document.getElementById(jobNo + "_collapsed_img");
      downArrow.style.display ="none";
      rightArrow.style.display ="inline"

      var rowIds = fileRows[jobNo];
      if(rowIds != null) {
        for(var i=0; i<rowIds.length; i++) {
          row = document.getElementById(rowIds[i]);
          if(row != null) row.style.display="none";
        }
      }
    }

    function showCategory( jobNo ) {
      $("expansion_state_" + jobNo).value = "true";

      var downArrow = document.getElementById(jobNo + "_expanded_img");
      var rightArrow = document.getElementById(jobNo + "_collapsed_img");
      downArrow.style.display ="inline";
      rightArrow.style.display ="none"

      var rowIds = fileRows[jobNo];
      for(var i=0; i<rowIds.length; i++)
      {
        row = document.getElementById(rowIds[i]);
        if(row != null) row.style.display="";
      }
    }

    function openAll() {
      for(property in fileRows) {
        showCategory(property);
      }
      var header_two_row = document.getElementById("header_two");
      header_two_row.style.display="";
    }

    function closeAll() {
      for(property in fileRows) {
        hideCategory(property);
      }
      var header_two_row = document.getElementById("header_two");
      header_two_row.style.display="none";
    }

	function confirmDelete() {
		var jobs = document.getElementsByClassName("jobResult", "jobsForm");
       	var files = document.getElementsByClassName("jobFile", "jobsForm");
       	var numJobsChecked = 0;
       	for(var i = 0, length = jobs.length; i < length && numJobsChecked < 2; i++) {
       		if(jobs[i].checked) {
       			numJobsChecked++;
       		}
       	}

       	var numFilesChecked = 0;
       	for(var i = 0, length = files.length; i < length && numFilesChecked < 2; i++) {
       		if(files[i].checked) {
       			numFilesChecked++;
       		}
       	}
       	if(numJobsChecked==0 && numFilesChecked==0) {
       		return alert("No jobs or files selected.");
       	}
       	var jobString = "";
       	if(numJobsChecked == 1) {
       		jobString = " job";
       	} else if(numJobsChecked > 1) {
       		jobString = " jobs";
       	}

       	var fileString = "";
       	if(numJobsChecked > 0) {
       		fileString = " and";
       	}

       	if(numFilesChecked==1) {
      		fileString += " file";
       	} else if(numFilesChecked > 1) {
       		fileString += " files";
       	}
		return confirm('Are you sure you want to delete the selected' + jobString + fileString + '?');

	}

/* ]]> */

	</script>
	</ui:define>

	<ui:define name="body">
    <table width="100%" class="barhead-other">
      <tr><td>Job Results</td></tr>
    </table>

    <h:form id="jobsForm">
    <!-- Job results table -->
    <table width="100%" border="0" cellspacing="0" cellpadding="0" style="padding-top: 10px;">
      <tr class="maintasknav">
        <td colspan="6">&#160;</td>
        <td align="right" colspan="4">
        <h:outputText value=" Filter job results, show: " />
        <h:selectOneMenu value="#{jobResultsFilterBean.jobFilter}" onchange="this.form.submit();">
          <f:selectItems value="#{jobResultsFilterBean.jobFilterMenu}" />
        </h:selectOneMenu>
        </td>
      </tr>
      <tr class="maintasknav">
        <td>&#160;</td>
        <td class="checkbox_column"><h:commandLink action="#{jobsBean.delete}" onclick="if (!confirmDelete()) return false">delete</h:commandLink></td>
        <td>&#160;</td>
        <td align="left"><h:commandLink onclick="openAll(); return false;">open all</h:commandLink>&#160;|&#160;<h:commandLink onclick="closeAll(); return false;">close all</h:commandLink></td>
        <td>&#160;</td>
        <td>&#160;</td>
        <td align="right" valign="top" colspan="4"><h:selectBooleanCheckbox value="#{jobsBean.showExecutionLogs}" onclick="this.form.submit();" />show execution logs</td>
      </tr>

      <!-- primary header row; active links for toggling sort order of job results -->
      <tr class="jobresults-header-1">
        <td><h:commandLink action="#{jobsBean.sortJobsById}" title="Sort job results by job number (#{jobsBean.jobSortAscending ? 'high to low' : 'low to high'})">job
          <h:outputText escape="false" rendered="#{jobsBean.jobSortColumn == 'jobNumber' and jobsBean.jobSortAscending}">▲</h:outputText>
          <h:outputText escape="false" rendered="#{jobsBean.jobSortColumn == 'jobNumber' and not jobsBean.jobSortAscending}">▼</h:outputText>
          <h:outputText escape="false" rendered="#{jobsBean.jobSortColumn != 'jobNumber'}">&#160;</h:outputText>
        </h:commandLink></td>
		<td class="checkbox_column"><input type="checkbox" onclick="toggleAllCheckboxes(this);" /></td>
		<td>&#160;</td>
		<td><h:commandLink action="#{jobsBean.sortJobsByModule}" title="Sort job results by module name">module name
          <h:outputText escape="false" rendered="#{jobsBean.jobSortColumn == 'taskName' and jobsBean.jobSortAscending}">▲</h:outputText>
          <h:outputText escape="false" rendered="#{jobsBean.jobSortColumn == 'taskName' and not jobsBean.jobSortAscending}">▼</h:outputText>
          <h:outputText escape="false" rendered="#{jobsBean.jobSortColumn != 'taskName'}">&#160;</h:outputText>
		</h:commandLink></td>
		<td>
		  <!--  file size link here -->
        </td>
		<td><h:commandLink action="#{jobsBean.sortJobsByDateSubmitted}" title="Sort job results by date submitted">date submitted
          <h:outputText escape="false" rendered="#{jobsBean.jobSortColumn == 'dateSubmitted' and jobsBean.jobSortAscending}">▲</h:outputText>
          <h:outputText escape="false" rendered="#{jobsBean.jobSortColumn == 'dateSubmitted' and not jobsBean.jobSortAscending}">▼</h:outputText>
          <h:outputText escape="false" rendered="#{jobsBean.jobSortColumn != 'dateSubmitted'}">&#160;</h:outputText>
		</h:commandLink></td>
		<td><h:commandLink action="#{jobsBean.sortJobsByDateCompleted}" title="Sort job results by date completed">date completed
          <h:outputText escape="false" rendered="#{jobsBean.jobSortColumn == 'dateCompleted' and jobsBean.jobSortAscending}">▲</h:outputText>
          <h:outputText escape="false" rendered="#{jobsBean.jobSortColumn == 'dateCompleted' and not jobsBean.jobSortAscending}">▼</h:outputText>
          <h:outputText escape="false" rendered="#{jobsBean.jobSortColumn != 'dateCompleted'}">&#160;</h:outputText>
        </h:commandLink></td>
        <td><h:commandLink action="#{jobsBean.sortJobsByStatus}" title="Sort job results by status">status
          <h:outputText escape="false" rendered="#{jobsBean.jobSortColumn == 'status' and jobsBean.jobSortAscending}">▲</h:outputText>
          <h:outputText escape="false" rendered="#{jobsBean.jobSortColumn == 'status' and not jobsBean.jobSortAscending}">▼</h:outputText>
          <h:outputText escape="false" rendered="#{jobsBean.jobSortColumn != 'status'}">&#160;</h:outputText>
        </h:commandLink></td>
		<td>owner</td>
		<td>groups</td>					
      </tr>

      <!--  secondary header row: active links for sorting output files within each job result -->
      <tr id="header_two" class="jobresults-header-2">
        <td>&#160;</td>
        <td>&#160;</td>
        <td>&#160;</td>
        <td>&#160;&#160;&#160;&#160;&#160;
          <h:commandLink action="#{jobsBean.sortFilesByName}" title="Sort output files by name">file  
          <h:outputText escape="false" rendered="#{jobsBean.fileSortColumn == 'name' and jobsBean.fileSortAscending}">▲</h:outputText>
          <h:outputText escape="false" rendered="#{jobsBean.fileSortColumn == 'name' and not jobsBean.fileSortAscending}">▼</h:outputText>
          <h:outputText escape="false" rendered="#{jobsBean.fileSortColumn != 'name'}">&#160;</h:outputText>
          </h:commandLink></td>
        <td>
          <h:commandLink action="#{jobsBean.sortFilesBySize}" title="Sort output files by size">size
          <h:outputText escape="false" rendered="#{jobsBean.fileSortColumn == 'size' and jobsBean.fileSortAscending}">▲</h:outputText>
          <h:outputText escape="false" rendered="#{jobsBean.fileSortColumn == 'size' and not jobsBean.fileSortAscending}">▼</h:outputText>
          <h:outputText escape="false" rendered="#{jobsBean.fileSortColumn != 'size'}">&#160;</h:outputText>
          </h:commandLink>&#160;</td>                    
        <td></td>
        <td>&#160;&#160;&#160;&#160;&#160;
          <h:commandLink action="#{jobsBean.sortFilesByDateCompleted}" title="Sort output files by last modification date">date saved
          <h:outputText escape="false" rendered="#{jobsBean.fileSortColumn == 'lastModified' and jobsBean.fileSortAscending}">▲</h:outputText>
          <h:outputText escape="false" rendered="#{jobsBean.fileSortColumn == 'lastModified' and not jobsBean.fileSortAscending}">▼</h:outputText>
          <h:outputText escape="false" rendered="#{jobsBean.fileSortColumn != 'lastModified'}">&#160;</h:outputText>
          </h:commandLink>&#160;</td>
        <td></td>
        <td></td>
        <td></td>
      </tr>

      <!--  Loop through job list -->
      <t:dataList var="rootJobWrapper" value="#{jobsBean.pagedJobs}" rowIndexVar="jobIndex">
        <script type="text/javascript" language="javascript">
          jobNumbers[#{jobIndex}]='#{rootJobWrapper.jobNumber}';
        </script>
        <ui:include src="jobResultsJobs.xhtml">
          <ui:param name="jobWrapper" value="#{rootJobWrapper}" />
          <ui:param name="parentJobNumber" value="#{rootJobWrapper.jobNumber}" />
        </ui:include>

        <!--  Loop through descendants  -->
        <t:dataList var="childJob" value="#{rootJobWrapper.descendantJobs}">
          <script type="text/javascript" language="javascript">
            var rowId = "job_row_" + #{childJob.jobNumber};
             addFileRow('#{rootJobWrapper.jobNumber}', rowId);
          </script>
          <ui:include src="jobResultsJobs.xhtml">
            <ui:param name="jobWrapper" value="#{childJob}" />
            <ui:param name="parentJobNumber" value="#{rootJobWrapper.jobNumber}" />
          </ui:include>
        </t:dataList>
      </t:dataList>

      <tr>
        <td>&#160;</td>
        <td class="checkbox_column"><h:commandLink action="#{jobsBean.delete}" onclick="if (!confirmDelete()) return false">delete</h:commandLink></td>
        <td>&#160;</td>
        <td>&#160;</td>
        <td>&#160;</td>
        <td>&#160;</td>
        <td>&#160;</td>
        <td>&#160;</td>
        <td>&#160;</td>
        <td>&#160;</td>
      </tr>
    </table>

    <t:div style="text-align: center;" rendered="#{jobsBean.pageCount gt 1}">
      <h:commandLink rendered="#{jobsBean.pageNumber gt 1}" immediate="true" action="#{jobsBean.goToPage}">
        <h:outputText value="Previous"/><f:param name="page" value="#{jobsBean.pageNumber - 1}" /></h:commandLink>
		<t:dataList var="p" value="#{jobsBean.pages}">
		  <h:outputText rendered="#{p lt 0}" value=" ... " />
		  <h:commandLink rendered="#{p gt 0 and p != jobsBean.pageNumber}" action="#{jobsBean.goToPage}">
            <f:param name="page" value="#{p}" />
		    <span style="text-decoration: underline;">#{p}</span>
          </h:commandLink>
          <h:outputText rendered="#{p == jobsBean.pageNumber}"><span  style="font-weight: bold;">#{p}</span></h:outputText>
        </t:dataList> 
        <h:commandLink immediate="true" rendered="#{jobsBean.pageCount gt 1 and jobsBean.pageNumber lt jobsBean.pageCount}" action="#{jobsBean.goToPage}">Next
          <f:param name="page" value="#{jobsBean.pageNumber + 1}" />
        </h:commandLink>
        <br clear="all"/>
        <h:outputText rendered="#{jobsBean.pageCount gt 1}" value="Page #{jobsBean.pageNumber} of #{jobsBean.pageCount} (#{jobResultsFilterBean.jobCount} jobs)" />
    </t:div>
    </h:form>

    <!-- Set initial visibility state  -->
    <script type="text/javascript" language="javascript">
    <t:dataList var="jobInfo" value="#{jobsBean.pagedJobs}">
      <h:outputText rendered="#{!jobInfo.expanded}">hideCategory('#{jobInfo.jobNumber}');</h:outputText>
    </t:dataList>
    </script>

	</ui:define>

	<!-- Create menus  -->
	<ui:define name="popupMenus">
		<h:form>
			<t:dataList var="jobInfo" value="#{jobsBean.pagedJobs}">
				<ui:include src="jobsMenu.xhtml">
					<ui:param name="job" value="#{jobInfo}" />
				</ui:include>
				<t:dataList var="fileInfo" value="#{jobInfo.allFileInfos}">
					<ui:include src="jobFileMenu.xhtml">
						<ui:param name="job" value="#{jobInfo}" />
						<ui:param name="fileInfo" value="#{fileInfo}" />
					</ui:include>
				</t:dataList>
			</t:dataList>
		</h:form>
	</ui:define>

</ui:composition>
</html>

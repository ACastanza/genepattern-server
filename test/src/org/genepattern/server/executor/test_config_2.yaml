# example of config file for production gp server
default.properties:
    executor: LSF
    java_flags: -Xmx512m
    lsf.project: genepattern
    lsf.queue: genepattern
    lsf.max.memory: 2
    lsf.wrapper.script: lsf_wrapper.sh
    lsf.output.filename: .lsf.out
    lsf.use.pre.exec.command: "false"
    lsf.extra.bsub.args: "null"

executors:
    # run jobs on Broad LSF 
    LSF:
        classname: org.genepattern.server.executor.lsf.LsfCommandExecutor
        #BroadCore configuration properties
        configuration.properties:
            hibernate.connection.datasource: java:comp/env/jdbc/gpdb
            hibernate.default_schema: GENEPATTERN
            hibernate.dialect: org.genepattern.server.database.PlatformOracle9Dialect
            # number of seconds to check for completed jobs
            lsf.check.frequency: 15

    # RuntimeExec, for testing 
    RuntimeExec: org.genepattern.server.executor.RuntimeCommandExecutor

    # Test, for testing
    Test: org.genepattern.server.executor.TestCommandExecutor

# override default.properties and <executor>.job.properties based on taskname or lsid
# Note: <executor>.configuration.properties are intended to be applied at startup and may not make sense to be overwritten here
module.properties:
    CBS:
        lsf.max.memory: 16
        java_flags: -Xmx16g
    CopyNumberDivideByNormals:
        lsf.max.memory: 16
    ESPPredictor:
        lsf.max.memory: 8
    ExpressionFileCreator: 
        lsf.max.memory: 8
    GISTIC: 
        lsf.max.memory: 12
    GLAD: 
        lsf.max.memory: 8
    HierarchicalClustering: 
        lsf.max.memory: 4
    LOHPaired: 
        lsf.max.memory: 4
    NMFConsensus: 
        lsf.max.memory: 8
    #example usage of anchor '&' and '*' alias to reuse the same set of properties
    SNPFileCreator: &snp_settings
        lsf.max.memory: 12
        java_flags: -Xmx12g
    SNPFileSorter: *snp_settings
    SNPMultipleSampleAnalysis: *snp_settings
    XChromosomeCorrect: 
        executor: LSF
        lsf.max.memory: 4

# user and group specific configuration
# example use cases:
# 1) for all users in the 'broadusers' group, use lsf.queue=broad
group.properties:
    admingroup:
        # this is here to test a user which is a member of both 'admin' and 'broadusers'
        lsf.queue: genepattern
    broadgroup:
        lsf.queue: broad
        # ... except for SNPFileCreator ... use lsf.queue=priority
        module.properties:
            SNPFileCreator: 
                lsf.queue: priority

# 2) when user 'test' runs ExpressionFileCreator, make sure to use lsf.max.memory=24g (rather than the default of 4g) 
user.properties: {
    test: {
        module.properties:
            ExpressionFileCreator: 
                lsf.max.memory: 24
     }
    # ... also, run all of adminuser's jobs with the Test executor
    adminuser:
        executor: Test
}
# Note: user and group specific configuration options are not thoroughly tested for precedence rules...
#    here is what is supposed to happen:
#    1) determine which executor to use;
#    2) then determine properties in the following order:
#        default.properties
#        executor.default.properties
#        module.properties
#        group.properties
#        group.properties.module.properties
#        user.properties
#        user.properties.module.properties
#    the order described in step 2 is used to determine the executor.

# Note: when a user is a member of more than one group, precedence is based on the order in which the group appears in this file
# 




/*
 * ClassifierDialog.java
 *
 * Created on February 8, 2002, 11:40 AM
 */

package org.genepattern.modules.ui.graphics;

import java.awt.event.*;

import javax.swing.*;
import javax.swing.table.*;
//import java.awt.event.ActionListener;

/**
 *
 * @author  KOhm
 */
public class ClassifierDialog extends javax.swing.JDialog {

    /** creates a new ClassifierDialog */
    public ClassifierDialog(java.awt.Frame parent, int[] data) {
        this(parent, true);
        // handle the table
//        jTable1.setModel (new javax.swing.table.DefaultTableModel (
//        new Object [data.length][2],
//        new String [] {
//            "Data Value", "Classifier"
//        }
//        ) {
//            Class[] types = new Class [] {
//                java.lang.String.class, java.lang.Integer.class
//            };
//            boolean[] canEdit = new boolean [] {
//                false, true
//            };
//            
//            public Class getColumnClass (int columnIndex) {
//                return types [columnIndex];
//            }
//            
//            public boolean isCellEditable (int rowIndex, int columnIndex) {
//                return canEdit [columnIndex];
//            }
//        });
        // expand the table
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        model.setNumRows (data.length);
        for(int i = data.length - 1; i >= 0; i--) {
            model.setValueAt(new Integer(data[i]), i, 0); // row, col
        }
        model.fireTableDataChanged ();
        // end table
        
        // buttons
        final ActionListener listener = new ActionListener(){
            public void actionPerformed(java.awt.event.ActionEvent actionEvent){
                Object button = actionEvent.getSource();
                if(button == okButton) {
                    done();
                } else if(button == fillButton) {
                    fillTable();
                }
            }
        };
        okButton.addActionListener (listener);
        fillButton.addActionListener(listener);
        
    }
        
    /** Creates new form ClassifierDialog */
    protected ClassifierDialog (java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents () {//GEN-BEGIN:initComponents
        jLabel1 = new javax.swing.JLabel ();
        jScrollPane1 = new javax.swing.JScrollPane ();
        jTable1 = new BaseTable (true);
        jPanel1 = new javax.swing.JPanel ();
        okButton = new javax.swing.JButton ();
        fillButton = new javax.swing.JButton ();
        
        setTitle ("Create Class Labels");
        addWindowListener (new java.awt.event.WindowAdapter () {
            public void windowClosing (java.awt.event.WindowEvent evt) {
                closeDialog (evt);
            }
        });
        
        jLabel1.setText (" Fill in class labels:");
        getContentPane ().add (jLabel1, java.awt.BorderLayout.NORTH);
        
        jTable1.setModel (new javax.swing.table.DefaultTableModel (
        new Object [][] {
            {null, null},
            {null, null},
            {null, null},
            {null, null}
        },
        new String [] {
            "Data Value", "Classifier"
        }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };
            
            public Class getColumnClass (int columnIndex) {
                return types [columnIndex];
            }
            
            public boolean isCellEditable (int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView (jTable1);
        
        getContentPane ().add (jScrollPane1, java.awt.BorderLayout.CENTER);
        
        okButton.setText ("OK");
        jPanel1.add (okButton);
        
        fillButton.setText ("Fill with default labels");
        jPanel1.add (fillButton);
        
        getContentPane ().add (jPanel1, java.awt.BorderLayout.SOUTH);
        
        pack ();
    }//GEN-END:initComponents

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        done();
    }//GEN-LAST:event_closeDialog
    /** gets the class labels from the table */
    public String[] getClassLabels() {
        String[] clabels = new String[jTable1.getRowCount ()];
        for(int i = clabels.length - 1; i >= 0; i--) {
            clabels[i] = (String)jTable1.getValueAt(i, 1);
        }
        return clabels;
    }
    /** determines if the program is done if so closes the window */
    private final void done() {
        stopCellEditing();
        if(hasAllClassifiers() && allClassifiersAreUnique()) {
            setVisible(false);
            dispose();
        }
    }
    /** fills any empty classifier cells with a bugus label */
    private final void fillTable() {
        for(int r = jTable1.getRowCount () - 1; r >= 0; r--) {
            Object cls = jTable1.getValueAt (r, 1);
            if(cls == null || cls.toString ().trim ().length () == 0)
                jTable1.setValueAt ((BOGUS + jTable1.getValueAt (r, 0)), r, 1);
        }
    }
    /** determines if the table has all its' classifiers set */
    private final boolean hasAllClassifiers() {
        for(int r = 0, limit = jTable1.getRowCount (); r < limit; r++){
            Object obj = jTable1.getValueAt(r, 1);
            if(obj == null || obj.toString ().trim().length () == 0) {
                setMessage("Error: line "+r+" has no classifier!");
                return false;
            }
        }
        return true;
    }
    /** determines that all classifiers are unique */
    private final boolean allClassifiersAreUnique() {
        for(int i = jTable1.getRowCount () - 1; i >= 0; i--) {
            for(int j = i - 1; j >= 0; j--) {
                String st1 = jTable1.getValueAt (i, 1).toString ().trim();
                String st2 = jTable1.getValueAt (j, 1).toString ().trim();
                if(st1.equals (st2)) {
                    setMessage("Error: Classifiers on lines "+j+" and "+i+" ("+st1+") are the same!");
                    return false;
                }
            }
        }
        return true;
    }
    /**
     * stops the editing of a cell (if editing is occuring)
     */
    public final void stopCellEditing() {
        CellEditor ce = jTable1.getCellEditor();
        if(ce != null)
            ce.stopCellEditing();
    }
    private final void setMessage(String mes) {
        System.out.println(mes);
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        new ClassifierDialog (new javax.swing.JFrame (), true).show ();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton okButton;
    private javax.swing.JButton fillButton;
    // End of variables declaration//GEN-END:variables
    
    //begin human modifiable
    /** the text of the bogus classifier */
    private final static String BOGUS = "class_";
    // end vars
}
